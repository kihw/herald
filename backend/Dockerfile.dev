# Herald.lol Gaming Analytics - Development Dockerfile
# Optimized for gaming platform development with hot reload

FROM golang:1.23-alpine AS base

# Gaming development tools
RUN apk add --no-cache \
    git \
    curl \
    ca-certificates \
    make \
    bash \
    protobuf \
    protoc-gen-go \
    && rm -rf /var/cache/apk/*

# Set gaming work directory
WORKDIR /app

# Copy gaming dependencies
COPY go.mod go.sum ./
RUN go mod download && go mod verify

# Install gaming development tools
RUN go install github.com/cosmtrek/air@latest \
    && go install google.golang.org/protobuf/cmd/protoc-gen-go@latest \
    && go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest \
    && go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

# Gaming source code
COPY . .

# Build gaming binary
RUN go build -ldflags="-X main.version=dev -X main.buildTime=$(date -u +%Y%m%d-%H%M%S)" \
    -o bin/herald-gaming ./cmd/server

# Gaming development stage with hot reload
FROM base AS development

# Gaming environment
ENV HERALD_ENV=development
ENV HERALD_DEBUG=true
ENV HERALD_PORT=8080
ENV HERALD_GRPC_PORT=8081
ENV HERALD_METRICS_PORT=9091

# Gaming performance targets
ENV GAMING_PERFORMANCE_TARGET_MS=5000
ENV GAMING_MAX_CONCURRENT_USERS=1000000

# Install air for hot reloading
RUN go install github.com/cosmtrek/air@latest

# Create air configuration for gaming development
RUN echo '[build]\n\
  cmd = "go build -ldflags=\"-X main.version=dev\" -o ./tmp/herald-gaming ./cmd/server"\n\
  bin = "tmp/herald-gaming"\n\
  full_bin = "./tmp/herald-gaming"\n\
  include_ext = ["go", "tpl", "tmpl", "html", "yml", "yaml", "json"]\n\
  exclude_dir = ["tmp", "vendor", "node_modules", ".git", ".vscode"]\n\
  include_dir = ["cmd", "internal", "api"]\n\
  exclude_file = ["*_test.go"]\n\
  log = "build-errors.log"\n\
  delay = 1000\n\
  stop_on_error = true\n\
  send_interrupt = false\n\
  kill_delay = 500\n\
[color]\n\
  main = "magenta"\n\
  watcher = "cyan"\n\
  build = "yellow"\n\
  runner = "green"\n\
[misc]\n\
  clean_on_exit = true' > .air.toml

# Expose gaming ports
EXPOSE 8080 8081 9091

# Gaming health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD curl -f http://localhost:8080/health || exit 1

# Gaming development command with hot reload
CMD ["air", "-c", ".air.toml"]