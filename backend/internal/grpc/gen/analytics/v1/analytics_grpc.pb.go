// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: analytics.proto

package analyticsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AnalyticsService_GetPlayerAnalytics_FullMethodName    = "/herald.analytics.v1.AnalyticsService/GetPlayerAnalytics"
	AnalyticsService_GetMatchAnalytics_FullMethodName     = "/herald.analytics.v1.AnalyticsService/GetMatchAnalytics"
	AnalyticsService_GetChampionAnalytics_FullMethodName  = "/herald.analytics.v1.AnalyticsService/GetChampionAnalytics"
	AnalyticsService_StreamAnalytics_FullMethodName       = "/herald.analytics.v1.AnalyticsService/StreamAnalytics"
	AnalyticsService_BatchProcessAnalytics_FullMethodName = "/herald.analytics.v1.AnalyticsService/BatchProcessAnalytics"
)

// AnalyticsServiceClient is the client API for AnalyticsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnalyticsServiceClient interface {
	// Get comprehensive player analytics
	GetPlayerAnalytics(ctx context.Context, in *GetPlayerAnalyticsRequest, opts ...grpc.CallOption) (*GetPlayerAnalyticsResponse, error)
	// Get real-time match analytics
	GetMatchAnalytics(ctx context.Context, in *GetMatchAnalyticsRequest, opts ...grpc.CallOption) (*GetMatchAnalyticsResponse, error)
	// Get champion-specific analytics
	GetChampionAnalytics(ctx context.Context, in *GetChampionAnalyticsRequest, opts ...grpc.CallOption) (*GetChampionAnalyticsResponse, error)
	// Stream real-time analytics updates
	StreamAnalytics(ctx context.Context, in *StreamAnalyticsRequest, opts ...grpc.CallOption) (AnalyticsService_StreamAnalyticsClient, error)
	// Batch process analytics data
	BatchProcessAnalytics(ctx context.Context, in *BatchProcessAnalyticsRequest, opts ...grpc.CallOption) (*BatchProcessAnalyticsResponse, error)
}

type analyticsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnalyticsServiceClient(cc grpc.ClientConnInterface) AnalyticsServiceClient {
	return &analyticsServiceClient{cc}
}

func (c *analyticsServiceClient) GetPlayerAnalytics(ctx context.Context, in *GetPlayerAnalyticsRequest, opts ...grpc.CallOption) (*GetPlayerAnalyticsResponse, error) {
	out := new(GetPlayerAnalyticsResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetPlayerAnalytics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetMatchAnalytics(ctx context.Context, in *GetMatchAnalyticsRequest, opts ...grpc.CallOption) (*GetMatchAnalyticsResponse, error) {
	out := new(GetMatchAnalyticsResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetMatchAnalytics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetChampionAnalytics(ctx context.Context, in *GetChampionAnalyticsRequest, opts ...grpc.CallOption) (*GetChampionAnalyticsResponse, error) {
	out := new(GetChampionAnalyticsResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetChampionAnalytics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) StreamAnalytics(ctx context.Context, in *StreamAnalyticsRequest, opts ...grpc.CallOption) (AnalyticsService_StreamAnalyticsClient, error) {
	stream, err := c.cc.NewStream(ctx, &AnalyticsService_ServiceDesc.Streams[0], AnalyticsService_StreamAnalytics_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &analyticsServiceStreamAnalyticsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AnalyticsService_StreamAnalyticsClient interface {
	Recv() (*AnalyticsEvent, error)
	grpc.ClientStream
}

type analyticsServiceStreamAnalyticsClient struct {
	grpc.ClientStream
}

func (x *analyticsServiceStreamAnalyticsClient) Recv() (*AnalyticsEvent, error) {
	m := new(AnalyticsEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *analyticsServiceClient) BatchProcessAnalytics(ctx context.Context, in *BatchProcessAnalyticsRequest, opts ...grpc.CallOption) (*BatchProcessAnalyticsResponse, error) {
	out := new(BatchProcessAnalyticsResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_BatchProcessAnalytics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnalyticsServiceServer is the server API for AnalyticsService service.
// All implementations must embed UnimplementedAnalyticsServiceServer
// for forward compatibility
type AnalyticsServiceServer interface {
	// Get comprehensive player analytics
	GetPlayerAnalytics(context.Context, *GetPlayerAnalyticsRequest) (*GetPlayerAnalyticsResponse, error)
	// Get real-time match analytics
	GetMatchAnalytics(context.Context, *GetMatchAnalyticsRequest) (*GetMatchAnalyticsResponse, error)
	// Get champion-specific analytics
	GetChampionAnalytics(context.Context, *GetChampionAnalyticsRequest) (*GetChampionAnalyticsResponse, error)
	// Stream real-time analytics updates
	StreamAnalytics(*StreamAnalyticsRequest, AnalyticsService_StreamAnalyticsServer) error
	// Batch process analytics data
	BatchProcessAnalytics(context.Context, *BatchProcessAnalyticsRequest) (*BatchProcessAnalyticsResponse, error)
	mustEmbedUnimplementedAnalyticsServiceServer()
}

// UnimplementedAnalyticsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAnalyticsServiceServer struct {
}

func (UnimplementedAnalyticsServiceServer) GetPlayerAnalytics(context.Context, *GetPlayerAnalyticsRequest) (*GetPlayerAnalyticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerAnalytics not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetMatchAnalytics(context.Context, *GetMatchAnalyticsRequest) (*GetMatchAnalyticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchAnalytics not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetChampionAnalytics(context.Context, *GetChampionAnalyticsRequest) (*GetChampionAnalyticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChampionAnalytics not implemented")
}
func (UnimplementedAnalyticsServiceServer) StreamAnalytics(*StreamAnalyticsRequest, AnalyticsService_StreamAnalyticsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamAnalytics not implemented")
}
func (UnimplementedAnalyticsServiceServer) BatchProcessAnalytics(context.Context, *BatchProcessAnalyticsRequest) (*BatchProcessAnalyticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchProcessAnalytics not implemented")
}
func (UnimplementedAnalyticsServiceServer) mustEmbedUnimplementedAnalyticsServiceServer() {}

// UnsafeAnalyticsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnalyticsServiceServer will
// result in compilation errors.
type UnsafeAnalyticsServiceServer interface {
	mustEmbedUnimplementedAnalyticsServiceServer()
}

func RegisterAnalyticsServiceServer(s grpc.ServiceRegistrar, srv AnalyticsServiceServer) {
	s.RegisterService(&AnalyticsService_ServiceDesc, srv)
}

func _AnalyticsService_GetPlayerAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetPlayerAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetPlayerAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetPlayerAnalytics(ctx, req.(*GetPlayerAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetMatchAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMatchAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetMatchAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetMatchAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetMatchAnalytics(ctx, req.(*GetMatchAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetChampionAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChampionAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetChampionAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetChampionAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetChampionAnalytics(ctx, req.(*GetChampionAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_StreamAnalytics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamAnalyticsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AnalyticsServiceServer).StreamAnalytics(m, &analyticsServiceStreamAnalyticsServer{stream})
}

type AnalyticsService_StreamAnalyticsServer interface {
	Send(*AnalyticsEvent) error
	grpc.ServerStream
}

type analyticsServiceStreamAnalyticsServer struct {
	grpc.ServerStream
}

func (x *analyticsServiceStreamAnalyticsServer) Send(m *AnalyticsEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _AnalyticsService_BatchProcessAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchProcessAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).BatchProcessAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_BatchProcessAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).BatchProcessAnalytics(ctx, req.(*BatchProcessAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AnalyticsService_ServiceDesc is the grpc.ServiceDesc for AnalyticsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnalyticsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "herald.analytics.v1.AnalyticsService",
	HandlerType: (*AnalyticsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlayerAnalytics",
			Handler:    _AnalyticsService_GetPlayerAnalytics_Handler,
		},
		{
			MethodName: "GetMatchAnalytics",
			Handler:    _AnalyticsService_GetMatchAnalytics_Handler,
		},
		{
			MethodName: "GetChampionAnalytics",
			Handler:    _AnalyticsService_GetChampionAnalytics_Handler,
		},
		{
			MethodName: "BatchProcessAnalytics",
			Handler:    _AnalyticsService_BatchProcessAnalytics_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamAnalytics",
			Handler:       _AnalyticsService_StreamAnalytics_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "analytics.proto",
}
