// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.4
// source: analytics.proto

package analyticsv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetPlayerAnalyticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId  string  `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	TimeRange string  `protobuf:"bytes,2,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	Champion  *string `protobuf:"bytes,3,opt,name=champion,proto3,oneof" json:"champion,omitempty"`
	Position  *string `protobuf:"bytes,4,opt,name=position,proto3,oneof" json:"position,omitempty"`
	Region    *string `protobuf:"bytes,5,opt,name=region,proto3,oneof" json:"region,omitempty"`
}

func (x *GetPlayerAnalyticsRequest) Reset() {
	*x = GetPlayerAnalyticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlayerAnalyticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlayerAnalyticsRequest) ProtoMessage() {}

func (x *GetPlayerAnalyticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlayerAnalyticsRequest.ProtoReflect.Descriptor instead.
func (*GetPlayerAnalyticsRequest) Descriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{0}
}

func (x *GetPlayerAnalyticsRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *GetPlayerAnalyticsRequest) GetTimeRange() string {
	if x != nil {
		return x.TimeRange
	}
	return ""
}

func (x *GetPlayerAnalyticsRequest) GetChampion() string {
	if x != nil && x.Champion != nil {
		return *x.Champion
	}
	return ""
}

func (x *GetPlayerAnalyticsRequest) GetPosition() string {
	if x != nil && x.Position != nil {
		return *x.Position
	}
	return ""
}

func (x *GetPlayerAnalyticsRequest) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

type GetPlayerAnalyticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Analytics *PlayerAnalytics  `protobuf:"bytes,1,opt,name=analytics,proto3" json:"analytics,omitempty"`
	Metadata  *ResponseMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *GetPlayerAnalyticsResponse) Reset() {
	*x = GetPlayerAnalyticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlayerAnalyticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlayerAnalyticsResponse) ProtoMessage() {}

func (x *GetPlayerAnalyticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlayerAnalyticsResponse.ProtoReflect.Descriptor instead.
func (*GetPlayerAnalyticsResponse) Descriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{1}
}

func (x *GetPlayerAnalyticsResponse) GetAnalytics() *PlayerAnalytics {
	if x != nil {
		return x.Analytics
	}
	return nil
}

func (x *GetPlayerAnalyticsResponse) GetMetadata() *ResponseMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type GetMatchAnalyticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId         string  `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	PlayerId        *string `protobuf:"bytes,2,opt,name=player_id,json=playerId,proto3,oneof" json:"player_id,omitempty"`
	IncludeTimeline bool    `protobuf:"varint,3,opt,name=include_timeline,json=includeTimeline,proto3" json:"include_timeline,omitempty"`
}

func (x *GetMatchAnalyticsRequest) Reset() {
	*x = GetMatchAnalyticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMatchAnalyticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchAnalyticsRequest) ProtoMessage() {}

func (x *GetMatchAnalyticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchAnalyticsRequest.ProtoReflect.Descriptor instead.
func (*GetMatchAnalyticsRequest) Descriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{2}
}

func (x *GetMatchAnalyticsRequest) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *GetMatchAnalyticsRequest) GetPlayerId() string {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return ""
}

func (x *GetMatchAnalyticsRequest) GetIncludeTimeline() bool {
	if x != nil {
		return x.IncludeTimeline
	}
	return false
}

type GetMatchAnalyticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Analytics *MatchAnalytics   `protobuf:"bytes,1,opt,name=analytics,proto3" json:"analytics,omitempty"`
	Metadata  *ResponseMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *GetMatchAnalyticsResponse) Reset() {
	*x = GetMatchAnalyticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMatchAnalyticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchAnalyticsResponse) ProtoMessage() {}

func (x *GetMatchAnalyticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchAnalyticsResponse.ProtoReflect.Descriptor instead.
func (*GetMatchAnalyticsResponse) Descriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{3}
}

func (x *GetMatchAnalyticsResponse) GetAnalytics() *MatchAnalytics {
	if x != nil {
		return x.Analytics
	}
	return nil
}

func (x *GetMatchAnalyticsResponse) GetMetadata() *ResponseMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type GetChampionAnalyticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId  string  `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	Champion  string  `protobuf:"bytes,2,opt,name=champion,proto3" json:"champion,omitempty"`
	TimeRange string  `protobuf:"bytes,3,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	Position  *string `protobuf:"bytes,4,opt,name=position,proto3,oneof" json:"position,omitempty"`
}

func (x *GetChampionAnalyticsRequest) Reset() {
	*x = GetChampionAnalyticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChampionAnalyticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChampionAnalyticsRequest) ProtoMessage() {}

func (x *GetChampionAnalyticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChampionAnalyticsRequest.ProtoReflect.Descriptor instead.
func (*GetChampionAnalyticsRequest) Descriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{4}
}

func (x *GetChampionAnalyticsRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *GetChampionAnalyticsRequest) GetChampion() string {
	if x != nil {
		return x.Champion
	}
	return ""
}

func (x *GetChampionAnalyticsRequest) GetTimeRange() string {
	if x != nil {
		return x.TimeRange
	}
	return ""
}

func (x *GetChampionAnalyticsRequest) GetPosition() string {
	if x != nil && x.Position != nil {
		return *x.Position
	}
	return ""
}

type GetChampionAnalyticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Analytics *ChampionAnalytics `protobuf:"bytes,1,opt,name=analytics,proto3" json:"analytics,omitempty"`
	Metadata  *ResponseMetadata  `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *GetChampionAnalyticsResponse) Reset() {
	*x = GetChampionAnalyticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChampionAnalyticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChampionAnalyticsResponse) ProtoMessage() {}

func (x *GetChampionAnalyticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChampionAnalyticsResponse.ProtoReflect.Descriptor instead.
func (*GetChampionAnalyticsResponse) Descriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{5}
}

func (x *GetChampionAnalyticsResponse) GetAnalytics() *ChampionAnalytics {
	if x != nil {
		return x.Analytics
	}
	return nil
}

func (x *GetChampionAnalyticsResponse) GetMetadata() *ResponseMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type StreamAnalyticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId       string               `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	EventTypes     []string             `protobuf:"bytes,2,rep,name=event_types,json=eventTypes,proto3" json:"event_types,omitempty"`
	UpdateInterval *durationpb.Duration `protobuf:"bytes,3,opt,name=update_interval,json=updateInterval,proto3,oneof" json:"update_interval,omitempty"`
}

func (x *StreamAnalyticsRequest) Reset() {
	*x = StreamAnalyticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamAnalyticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamAnalyticsRequest) ProtoMessage() {}

func (x *StreamAnalyticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamAnalyticsRequest.ProtoReflect.Descriptor instead.
func (*StreamAnalyticsRequest) Descriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{6}
}

func (x *StreamAnalyticsRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *StreamAnalyticsRequest) GetEventTypes() []string {
	if x != nil {
		return x.EventTypes
	}
	return nil
}

func (x *StreamAnalyticsRequest) GetUpdateInterval() *durationpb.Duration {
	if x != nil {
		return x.UpdateInterval
	}
	return nil
}

type AnalyticsEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId   string                 `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	EventType string                 `protobuf:"bytes,2,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	PlayerId  string                 `protobuf:"bytes,3,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Data      map[string]string      `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AnalyticsEvent) Reset() {
	*x = AnalyticsEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyticsEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyticsEvent) ProtoMessage() {}

func (x *AnalyticsEvent) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyticsEvent.ProtoReflect.Descriptor instead.
func (*AnalyticsEvent) Descriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{7}
}

func (x *AnalyticsEvent) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *AnalyticsEvent) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *AnalyticsEvent) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *AnalyticsEvent) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *AnalyticsEvent) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

type BatchProcessAnalyticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchIds []string           `protobuf:"bytes,1,rep,name=match_ids,json=matchIds,proto3" json:"match_ids,omitempty"`
	Options  *ProcessingOptions `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *BatchProcessAnalyticsRequest) Reset() {
	*x = BatchProcessAnalyticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchProcessAnalyticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchProcessAnalyticsRequest) ProtoMessage() {}

func (x *BatchProcessAnalyticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchProcessAnalyticsRequest.ProtoReflect.Descriptor instead.
func (*BatchProcessAnalyticsRequest) Descriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{8}
}

func (x *BatchProcessAnalyticsRequest) GetMatchIds() []string {
	if x != nil {
		return x.MatchIds
	}
	return nil
}

func (x *BatchProcessAnalyticsRequest) GetOptions() *ProcessingOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type BatchProcessAnalyticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results  []*ProcessingResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Metadata *ResponseMetadata   `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *BatchProcessAnalyticsResponse) Reset() {
	*x = BatchProcessAnalyticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchProcessAnalyticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchProcessAnalyticsResponse) ProtoMessage() {}

func (x *BatchProcessAnalyticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchProcessAnalyticsResponse.ProtoReflect.Descriptor instead.
func (*BatchProcessAnalyticsResponse) Descriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{9}
}

func (x *BatchProcessAnalyticsResponse) GetResults() []*ProcessingResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *BatchProcessAnalyticsResponse) GetMetadata() *ResponseMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type PlayerAnalytics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId     string                 `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	SummonerName string                 `protobuf:"bytes,2,opt,name=summoner_name,json=summonerName,proto3" json:"summoner_name,omitempty"`
	Region       string                 `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	Stats        *PlayerStats           `protobuf:"bytes,4,opt,name=stats,proto3" json:"stats,omitempty"`
	Trends       *PlayerTrends          `protobuf:"bytes,5,opt,name=trends,proto3" json:"trends,omitempty"`
	TopChampions []*ChampionSummary     `protobuf:"bytes,6,rep,name=top_champions,json=topChampions,proto3" json:"top_champions,omitempty"`
	Rankings     *PlayerRankings        `protobuf:"bytes,7,opt,name=rankings,proto3" json:"rankings,omitempty"`
	LastUpdated  *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
}

func (x *PlayerAnalytics) Reset() {
	*x = PlayerAnalytics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerAnalytics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerAnalytics) ProtoMessage() {}

func (x *PlayerAnalytics) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerAnalytics.ProtoReflect.Descriptor instead.
func (*PlayerAnalytics) Descriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{10}
}

func (x *PlayerAnalytics) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *PlayerAnalytics) GetSummonerName() string {
	if x != nil {
		return x.SummonerName
	}
	return ""
}

func (x *PlayerAnalytics) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *PlayerAnalytics) GetStats() *PlayerStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *PlayerAnalytics) GetTrends() *PlayerTrends {
	if x != nil {
		return x.Trends
	}
	return nil
}

func (x *PlayerAnalytics) GetTopChampions() []*ChampionSummary {
	if x != nil {
		return x.TopChampions
	}
	return nil
}

func (x *PlayerAnalytics) GetRankings() *PlayerRankings {
	if x != nil {
		return x.Rankings
	}
	return nil
}

func (x *PlayerAnalytics) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

type PlayerStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OverallRating        float64         `protobuf:"fixed64,1,opt,name=overall_rating,json=overallRating,proto3" json:"overall_rating,omitempty"`
	WinRate              float64         `protobuf:"fixed64,2,opt,name=win_rate,json=winRate,proto3" json:"win_rate,omitempty"`
	KdaRatio             float64         `protobuf:"fixed64,3,opt,name=kda_ratio,json=kdaRatio,proto3" json:"kda_ratio,omitempty"`
	CsPerMinute          float64         `protobuf:"fixed64,4,opt,name=cs_per_minute,json=csPerMinute,proto3" json:"cs_per_minute,omitempty"`
	DamagePerMinute      float64         `protobuf:"fixed64,5,opt,name=damage_per_minute,json=damagePerMinute,proto3" json:"damage_per_minute,omitempty"`
	GoldPerMinute        float64         `protobuf:"fixed64,6,opt,name=gold_per_minute,json=goldPerMinute,proto3" json:"gold_per_minute,omitempty"`
	VisionScorePerMinute float64         `protobuf:"fixed64,7,opt,name=vision_score_per_minute,json=visionScorePerMinute,proto3" json:"vision_score_per_minute,omitempty"`
	TotalGames           int32           `protobuf:"varint,8,opt,name=total_games,json=totalGames,proto3" json:"total_games,omitempty"`
	RankInfo             *PlayerRankInfo `protobuf:"bytes,9,opt,name=rank_info,json=rankInfo,proto3" json:"rank_info,omitempty"`
}

func (x *PlayerStats) Reset() {
	*x = PlayerStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerStats) ProtoMessage() {}

func (x *PlayerStats) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerStats.ProtoReflect.Descriptor instead.
func (*PlayerStats) Descriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{11}
}

func (x *PlayerStats) GetOverallRating() float64 {
	if x != nil {
		return x.OverallRating
	}
	return 0
}

func (x *PlayerStats) GetWinRate() float64 {
	if x != nil {
		return x.WinRate
	}
	return 0
}

func (x *PlayerStats) GetKdaRatio() float64 {
	if x != nil {
		return x.KdaRatio
	}
	return 0
}

func (x *PlayerStats) GetCsPerMinute() float64 {
	if x != nil {
		return x.CsPerMinute
	}
	return 0
}

func (x *PlayerStats) GetDamagePerMinute() float64 {
	if x != nil {
		return x.DamagePerMinute
	}
	return 0
}

func (x *PlayerStats) GetGoldPerMinute() float64 {
	if x != nil {
		return x.GoldPerMinute
	}
	return 0
}

func (x *PlayerStats) GetVisionScorePerMinute() float64 {
	if x != nil {
		return x.VisionScorePerMinute
	}
	return 0
}

func (x *PlayerStats) GetTotalGames() int32 {
	if x != nil {
		return x.TotalGames
	}
	return 0
}

func (x *PlayerStats) GetRankInfo() *PlayerRankInfo {
	if x != nil {
		return x.RankInfo
	}
	return nil
}

type PlayerTrends struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RatingTrend      *TrendData `protobuf:"bytes,1,opt,name=rating_trend,json=ratingTrend,proto3" json:"rating_trend,omitempty"`
	WinrateTrend     *TrendData `protobuf:"bytes,2,opt,name=winrate_trend,json=winrateTrend,proto3" json:"winrate_trend,omitempty"`
	KdaTrend         *TrendData `protobuf:"bytes,3,opt,name=kda_trend,json=kdaTrend,proto3" json:"kda_trend,omitempty"`
	PerformanceTrend *TrendData `protobuf:"bytes,4,opt,name=performance_trend,json=performanceTrend,proto3" json:"performance_trend,omitempty"`
	TrendDirection   string     `protobuf:"bytes,5,opt,name=trend_direction,json=trendDirection,proto3" json:"trend_direction,omitempty"`
	TrendConfidence  float64    `protobuf:"fixed64,6,opt,name=trend_confidence,json=trendConfidence,proto3" json:"trend_confidence,omitempty"`
}

func (x *PlayerTrends) Reset() {
	*x = PlayerTrends{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerTrends) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerTrends) ProtoMessage() {}

func (x *PlayerTrends) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerTrends.ProtoReflect.Descriptor instead.
func (*PlayerTrends) Descriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{12}
}

func (x *PlayerTrends) GetRatingTrend() *TrendData {
	if x != nil {
		return x.RatingTrend
	}
	return nil
}

func (x *PlayerTrends) GetWinrateTrend() *TrendData {
	if x != nil {
		return x.WinrateTrend
	}
	return nil
}

func (x *PlayerTrends) GetKdaTrend() *TrendData {
	if x != nil {
		return x.KdaTrend
	}
	return nil
}

func (x *PlayerTrends) GetPerformanceTrend() *TrendData {
	if x != nil {
		return x.PerformanceTrend
	}
	return nil
}

func (x *PlayerTrends) GetTrendDirection() string {
	if x != nil {
		return x.TrendDirection
	}
	return ""
}

func (x *PlayerTrends) GetTrendConfidence() float64 {
	if x != nil {
		return x.TrendConfidence
	}
	return 0
}

type TrendData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Points      []*TrendPoint `protobuf:"bytes,1,rep,name=points,proto3" json:"points,omitempty"`
	Slope       float64       `protobuf:"fixed64,2,opt,name=slope,proto3" json:"slope,omitempty"`
	Correlation float64       `protobuf:"fixed64,3,opt,name=correlation,proto3" json:"correlation,omitempty"`
}

func (x *TrendData) Reset() {
	*x = TrendData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrendData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrendData) ProtoMessage() {}

func (x *TrendData) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrendData.ProtoReflect.Descriptor instead.
func (*TrendData) Descriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{13}
}

func (x *TrendData) GetPoints() []*TrendPoint {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *TrendData) GetSlope() float64 {
	if x != nil {
		return x.Slope
	}
	return 0
}

func (x *TrendData) GetCorrelation() float64 {
	if x != nil {
		return x.Correlation
	}
	return 0
}

type TrendPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Value     float64                `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TrendPoint) Reset() {
	*x = TrendPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrendPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrendPoint) ProtoMessage() {}

func (x *TrendPoint) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrendPoint.ProtoReflect.Descriptor instead.
func (*TrendPoint) Descriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{14}
}

func (x *TrendPoint) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *TrendPoint) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type ChampionSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Champion      string  `protobuf:"bytes,1,opt,name=champion,proto3" json:"champion,omitempty"`
	GamesPlayed   int32   `protobuf:"varint,2,opt,name=games_played,json=gamesPlayed,proto3" json:"games_played,omitempty"`
	WinRate       float64 `protobuf:"fixed64,3,opt,name=win_rate,json=winRate,proto3" json:"win_rate,omitempty"`
	Kda           float64 `protobuf:"fixed64,4,opt,name=kda,proto3" json:"kda,omitempty"`
	Rating        float64 `protobuf:"fixed64,5,opt,name=rating,proto3" json:"rating,omitempty"`
	MasteryPoints float64 `protobuf:"fixed64,6,opt,name=mastery_points,json=masteryPoints,proto3" json:"mastery_points,omitempty"`
	MasteryLevel  int32   `protobuf:"varint,7,opt,name=mastery_level,json=masteryLevel,proto3" json:"mastery_level,omitempty"`
}

func (x *ChampionSummary) Reset() {
	*x = ChampionSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChampionSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChampionSummary) ProtoMessage() {}

func (x *ChampionSummary) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChampionSummary.ProtoReflect.Descriptor instead.
func (*ChampionSummary) Descriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{15}
}

func (x *ChampionSummary) GetChampion() string {
	if x != nil {
		return x.Champion
	}
	return ""
}

func (x *ChampionSummary) GetGamesPlayed() int32 {
	if x != nil {
		return x.GamesPlayed
	}
	return 0
}

func (x *ChampionSummary) GetWinRate() float64 {
	if x != nil {
		return x.WinRate
	}
	return 0
}

func (x *ChampionSummary) GetKda() float64 {
	if x != nil {
		return x.Kda
	}
	return 0
}

func (x *ChampionSummary) GetRating() float64 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *ChampionSummary) GetMasteryPoints() float64 {
	if x != nil {
		return x.MasteryPoints
	}
	return 0
}

func (x *ChampionSummary) GetMasteryLevel() int32 {
	if x != nil {
		return x.MasteryLevel
	}
	return 0
}

type PlayerRankings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OverallRank  *RankPosition `protobuf:"bytes,1,opt,name=overall_rank,json=overallRank,proto3" json:"overall_rank,omitempty"`
	ChampionRank *RankPosition `protobuf:"bytes,2,opt,name=champion_rank,json=championRank,proto3" json:"champion_rank,omitempty"`
	PositionRank *RankPosition `protobuf:"bytes,3,opt,name=position_rank,json=positionRank,proto3" json:"position_rank,omitempty"`
	Percentile   int32         `protobuf:"varint,4,opt,name=percentile,proto3" json:"percentile,omitempty"`
}

func (x *PlayerRankings) Reset() {
	*x = PlayerRankings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerRankings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerRankings) ProtoMessage() {}

func (x *PlayerRankings) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerRankings.ProtoReflect.Descriptor instead.
func (*PlayerRankings) Descriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{16}
}

func (x *PlayerRankings) GetOverallRank() *RankPosition {
	if x != nil {
		return x.OverallRank
	}
	return nil
}

func (x *PlayerRankings) GetChampionRank() *RankPosition {
	if x != nil {
		return x.ChampionRank
	}
	return nil
}

func (x *PlayerRankings) GetPositionRank() *RankPosition {
	if x != nil {
		return x.PositionRank
	}
	return nil
}

func (x *PlayerRankings) GetPercentile() int32 {
	if x != nil {
		return x.Percentile
	}
	return 0
}

type RankPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tier          string `protobuf:"bytes,1,opt,name=tier,proto3" json:"tier,omitempty"`
	Division      string `protobuf:"bytes,2,opt,name=division,proto3" json:"division,omitempty"`
	Lp            int32  `protobuf:"varint,3,opt,name=lp,proto3" json:"lp,omitempty"`
	IsProvisional bool   `protobuf:"varint,4,opt,name=is_provisional,json=isProvisional,proto3" json:"is_provisional,omitempty"`
}

func (x *RankPosition) Reset() {
	*x = RankPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankPosition) ProtoMessage() {}

func (x *RankPosition) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankPosition.ProtoReflect.Descriptor instead.
func (*RankPosition) Descriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{17}
}

func (x *RankPosition) GetTier() string {
	if x != nil {
		return x.Tier
	}
	return ""
}

func (x *RankPosition) GetDivision() string {
	if x != nil {
		return x.Division
	}
	return ""
}

func (x *RankPosition) GetLp() int32 {
	if x != nil {
		return x.Lp
	}
	return 0
}

func (x *RankPosition) GetIsProvisional() bool {
	if x != nil {
		return x.IsProvisional
	}
	return false
}

type PlayerRankInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentRank string `protobuf:"bytes,1,opt,name=current_rank,json=currentRank,proto3" json:"current_rank,omitempty"`
	Lp          int32  `protobuf:"varint,2,opt,name=lp,proto3" json:"lp,omitempty"`
	PeakRank    string `protobuf:"bytes,3,opt,name=peak_rank,json=peakRank,proto3" json:"peak_rank,omitempty"`
	Wins        int32  `protobuf:"varint,4,opt,name=wins,proto3" json:"wins,omitempty"`
	Losses      int32  `protobuf:"varint,5,opt,name=losses,proto3" json:"losses,omitempty"`
	InPromos    bool   `protobuf:"varint,6,opt,name=in_promos,json=inPromos,proto3" json:"in_promos,omitempty"`
}

func (x *PlayerRankInfo) Reset() {
	*x = PlayerRankInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerRankInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerRankInfo) ProtoMessage() {}

func (x *PlayerRankInfo) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerRankInfo.ProtoReflect.Descriptor instead.
func (*PlayerRankInfo) Descriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{18}
}

func (x *PlayerRankInfo) GetCurrentRank() string {
	if x != nil {
		return x.CurrentRank
	}
	return ""
}

func (x *PlayerRankInfo) GetLp() int32 {
	if x != nil {
		return x.Lp
	}
	return 0
}

func (x *PlayerRankInfo) GetPeakRank() string {
	if x != nil {
		return x.PeakRank
	}
	return ""
}

func (x *PlayerRankInfo) GetWins() int32 {
	if x != nil {
		return x.Wins
	}
	return 0
}

func (x *PlayerRankInfo) GetLosses() int32 {
	if x != nil {
		return x.Losses
	}
	return 0
}

func (x *PlayerRankInfo) GetInPromos() bool {
	if x != nil {
		return x.InPromos
	}
	return false
}

type MatchAnalytics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId       string               `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	GameMode      string               `protobuf:"bytes,2,opt,name=game_mode,json=gameMode,proto3" json:"game_mode,omitempty"`
	MatchDuration *durationpb.Duration `protobuf:"bytes,3,opt,name=match_duration,json=matchDuration,proto3" json:"match_duration,omitempty"`
	Players       []*PlayerMatchData   `protobuf:"bytes,4,rep,name=players,proto3" json:"players,omitempty"`
	BlueTeam      *TeamAnalytics       `protobuf:"bytes,5,opt,name=blue_team,json=blueTeam,proto3" json:"blue_team,omitempty"`
	RedTeam       *TeamAnalytics       `protobuf:"bytes,6,opt,name=red_team,json=redTeam,proto3" json:"red_team,omitempty"`
	Outcome       *MatchOutcome        `protobuf:"bytes,7,opt,name=outcome,proto3" json:"outcome,omitempty"`
	Meta          *MatchMeta           `protobuf:"bytes,8,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *MatchAnalytics) Reset() {
	*x = MatchAnalytics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchAnalytics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchAnalytics) ProtoMessage() {}

func (x *MatchAnalytics) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchAnalytics.ProtoReflect.Descriptor instead.
func (*MatchAnalytics) Descriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{19}
}

func (x *MatchAnalytics) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *MatchAnalytics) GetGameMode() string {
	if x != nil {
		return x.GameMode
	}
	return ""
}

func (x *MatchAnalytics) GetMatchDuration() *durationpb.Duration {
	if x != nil {
		return x.MatchDuration
	}
	return nil
}

func (x *MatchAnalytics) GetPlayers() []*PlayerMatchData {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *MatchAnalytics) GetBlueTeam() *TeamAnalytics {
	if x != nil {
		return x.BlueTeam
	}
	return nil
}

func (x *MatchAnalytics) GetRedTeam() *TeamAnalytics {
	if x != nil {
		return x.RedTeam
	}
	return nil
}

func (x *MatchAnalytics) GetOutcome() *MatchOutcome {
	if x != nil {
		return x.Outcome
	}
	return nil
}

func (x *MatchAnalytics) GetMeta() *MatchMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type PlayerMatchData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId    string                  `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	Champion    string                  `protobuf:"bytes,2,opt,name=champion,proto3" json:"champion,omitempty"`
	Position    string                  `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
	Stats       *PlayerMatchStats       `protobuf:"bytes,4,opt,name=stats,proto3" json:"stats,omitempty"`
	Performance *PlayerMatchPerformance `protobuf:"bytes,5,opt,name=performance,proto3" json:"performance,omitempty"`
	Timeline    *PlayerMatchTimeline    `protobuf:"bytes,6,opt,name=timeline,proto3" json:"timeline,omitempty"`
}

func (x *PlayerMatchData) Reset() {
	*x = PlayerMatchData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerMatchData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerMatchData) ProtoMessage() {}

func (x *PlayerMatchData) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerMatchData.ProtoReflect.Descriptor instead.
func (*PlayerMatchData) Descriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{20}
}

func (x *PlayerMatchData) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *PlayerMatchData) GetChampion() string {
	if x != nil {
		return x.Champion
	}
	return ""
}

func (x *PlayerMatchData) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *PlayerMatchData) GetStats() *PlayerMatchStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *PlayerMatchData) GetPerformance() *PlayerMatchPerformance {
	if x != nil {
		return x.Performance
	}
	return nil
}

func (x *PlayerMatchData) GetTimeline() *PlayerMatchTimeline {
	if x != nil {
		return x.Timeline
	}
	return nil
}

type PlayerMatchStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kills         int32    `protobuf:"varint,1,opt,name=kills,proto3" json:"kills,omitempty"`
	Deaths        int32    `protobuf:"varint,2,opt,name=deaths,proto3" json:"deaths,omitempty"`
	Assists       int32    `protobuf:"varint,3,opt,name=assists,proto3" json:"assists,omitempty"`
	Cs            int32    `protobuf:"varint,4,opt,name=cs,proto3" json:"cs,omitempty"`
	GoldEarned    int32    `protobuf:"varint,5,opt,name=gold_earned,json=goldEarned,proto3" json:"gold_earned,omitempty"`
	DamageDealt   int32    `protobuf:"varint,6,opt,name=damage_dealt,json=damageDealt,proto3" json:"damage_dealt,omitempty"`
	DamageTaken   int32    `protobuf:"varint,7,opt,name=damage_taken,json=damageTaken,proto3" json:"damage_taken,omitempty"`
	VisionScore   int32    `protobuf:"varint,8,opt,name=vision_score,json=visionScore,proto3" json:"vision_score,omitempty"`
	Items         []string `protobuf:"bytes,9,rep,name=items,proto3" json:"items,omitempty"`
	PrimaryRune   string   `protobuf:"bytes,10,opt,name=primary_rune,json=primaryRune,proto3" json:"primary_rune,omitempty"`
	SecondaryRune string   `protobuf:"bytes,11,opt,name=secondary_rune,json=secondaryRune,proto3" json:"secondary_rune,omitempty"`
}

func (x *PlayerMatchStats) Reset() {
	*x = PlayerMatchStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerMatchStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerMatchStats) ProtoMessage() {}

func (x *PlayerMatchStats) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerMatchStats.ProtoReflect.Descriptor instead.
func (*PlayerMatchStats) Descriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{21}
}

func (x *PlayerMatchStats) GetKills() int32 {
	if x != nil {
		return x.Kills
	}
	return 0
}

func (x *PlayerMatchStats) GetDeaths() int32 {
	if x != nil {
		return x.Deaths
	}
	return 0
}

func (x *PlayerMatchStats) GetAssists() int32 {
	if x != nil {
		return x.Assists
	}
	return 0
}

func (x *PlayerMatchStats) GetCs() int32 {
	if x != nil {
		return x.Cs
	}
	return 0
}

func (x *PlayerMatchStats) GetGoldEarned() int32 {
	if x != nil {
		return x.GoldEarned
	}
	return 0
}

func (x *PlayerMatchStats) GetDamageDealt() int32 {
	if x != nil {
		return x.DamageDealt
	}
	return 0
}

func (x *PlayerMatchStats) GetDamageTaken() int32 {
	if x != nil {
		return x.DamageTaken
	}
	return 0
}

func (x *PlayerMatchStats) GetVisionScore() int32 {
	if x != nil {
		return x.VisionScore
	}
	return 0
}

func (x *PlayerMatchStats) GetItems() []string {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *PlayerMatchStats) GetPrimaryRune() string {
	if x != nil {
		return x.PrimaryRune
	}
	return ""
}

func (x *PlayerMatchStats) GetSecondaryRune() string {
	if x != nil {
		return x.SecondaryRune
	}
	return ""
}

type PlayerMatchPerformance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rating            float64 `protobuf:"fixed64,1,opt,name=rating,proto3" json:"rating,omitempty"`
	Kda               float64 `protobuf:"fixed64,2,opt,name=kda,proto3" json:"kda,omitempty"`
	CsPerMinute       float64 `protobuf:"fixed64,3,opt,name=cs_per_minute,json=csPerMinute,proto3" json:"cs_per_minute,omitempty"`
	DamageShare       float64 `protobuf:"fixed64,4,opt,name=damage_share,json=damageShare,proto3" json:"damage_share,omitempty"`
	KillParticipation float64 `protobuf:"fixed64,5,opt,name=kill_participation,json=killParticipation,proto3" json:"kill_participation,omitempty"`
	EarlyGameRating   float64 `protobuf:"fixed64,6,opt,name=early_game_rating,json=earlyGameRating,proto3" json:"early_game_rating,omitempty"`
	MidGameRating     float64 `protobuf:"fixed64,7,opt,name=mid_game_rating,json=midGameRating,proto3" json:"mid_game_rating,omitempty"`
	LateGameRating    float64 `protobuf:"fixed64,8,opt,name=late_game_rating,json=lateGameRating,proto3" json:"late_game_rating,omitempty"`
}

func (x *PlayerMatchPerformance) Reset() {
	*x = PlayerMatchPerformance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerMatchPerformance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerMatchPerformance) ProtoMessage() {}

func (x *PlayerMatchPerformance) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerMatchPerformance.ProtoReflect.Descriptor instead.
func (*PlayerMatchPerformance) Descriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{22}
}

func (x *PlayerMatchPerformance) GetRating() float64 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *PlayerMatchPerformance) GetKda() float64 {
	if x != nil {
		return x.Kda
	}
	return 0
}

func (x *PlayerMatchPerformance) GetCsPerMinute() float64 {
	if x != nil {
		return x.CsPerMinute
	}
	return 0
}

func (x *PlayerMatchPerformance) GetDamageShare() float64 {
	if x != nil {
		return x.DamageShare
	}
	return 0
}

func (x *PlayerMatchPerformance) GetKillParticipation() float64 {
	if x != nil {
		return x.KillParticipation
	}
	return 0
}

func (x *PlayerMatchPerformance) GetEarlyGameRating() float64 {
	if x != nil {
		return x.EarlyGameRating
	}
	return 0
}

func (x *PlayerMatchPerformance) GetMidGameRating() float64 {
	if x != nil {
		return x.MidGameRating
	}
	return 0
}

func (x *PlayerMatchPerformance) GetLateGameRating() float64 {
	if x != nil {
		return x.LateGameRating
	}
	return 0
}

type PlayerMatchTimeline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events      []*TimelineEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	PowerSpikes []*PowerSpike    `protobuf:"bytes,2,rep,name=power_spikes,json=powerSpikes,proto3" json:"power_spikes,omitempty"`
}

func (x *PlayerMatchTimeline) Reset() {
	*x = PlayerMatchTimeline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerMatchTimeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerMatchTimeline) ProtoMessage() {}

func (x *PlayerMatchTimeline) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerMatchTimeline.ProtoReflect.Descriptor instead.
func (*PlayerMatchTimeline) Descriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{23}
}

func (x *PlayerMatchTimeline) GetEvents() []*TimelineEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *PlayerMatchTimeline) GetPowerSpikes() []*PowerSpike {
	if x != nil {
		return x.PowerSpikes
	}
	return nil
}

type TimelineEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *durationpb.Duration `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	EventType string               `protobuf:"bytes,2,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	Position  string               `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
	Data      map[string]string    `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TimelineEvent) Reset() {
	*x = TimelineEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimelineEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimelineEvent) ProtoMessage() {}

func (x *TimelineEvent) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimelineEvent.ProtoReflect.Descriptor instead.
func (*TimelineEvent) Descriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{24}
}

func (x *TimelineEvent) GetTimestamp() *durationpb.Duration {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *TimelineEvent) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *TimelineEvent) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *TimelineEvent) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

type PowerSpike struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp   *durationpb.Duration `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	SpikeType   string               `protobuf:"bytes,2,opt,name=spike_type,json=spikeType,proto3" json:"spike_type,omitempty"`
	PowerRating float64              `protobuf:"fixed64,3,opt,name=power_rating,json=powerRating,proto3" json:"power_rating,omitempty"`
	Reason      string               `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *PowerSpike) Reset() {
	*x = PowerSpike{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PowerSpike) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerSpike) ProtoMessage() {}

func (x *PowerSpike) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerSpike.ProtoReflect.Descriptor instead.
func (*PowerSpike) Descriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{25}
}

func (x *PowerSpike) GetTimestamp() *durationpb.Duration {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *PowerSpike) GetSpikeType() string {
	if x != nil {
		return x.SpikeType
	}
	return ""
}

func (x *PowerSpike) GetPowerRating() float64 {
	if x != nil {
		return x.PowerRating
	}
	return 0
}

func (x *PowerSpike) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type TeamAnalytics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamSide    string           `protobuf:"bytes,1,opt,name=team_side,json=teamSide,proto3" json:"team_side,omitempty"`
	Stats       *TeamStats       `protobuf:"bytes,2,opt,name=stats,proto3" json:"stats,omitempty"`
	Composition *TeamComposition `protobuf:"bytes,3,opt,name=composition,proto3" json:"composition,omitempty"`
	Objectives  *TeamObjectives  `protobuf:"bytes,4,opt,name=objectives,proto3" json:"objectives,omitempty"`
}

func (x *TeamAnalytics) Reset() {
	*x = TeamAnalytics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamAnalytics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamAnalytics) ProtoMessage() {}

func (x *TeamAnalytics) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamAnalytics.ProtoReflect.Descriptor instead.
func (*TeamAnalytics) Descriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{26}
}

func (x *TeamAnalytics) GetTeamSide() string {
	if x != nil {
		return x.TeamSide
	}
	return ""
}

func (x *TeamAnalytics) GetStats() *TeamStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *TeamAnalytics) GetComposition() *TeamComposition {
	if x != nil {
		return x.Composition
	}
	return nil
}

func (x *TeamAnalytics) GetObjectives() *TeamObjectives {
	if x != nil {
		return x.Objectives
	}
	return nil
}

type TeamStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalKills   int32   `protobuf:"varint,1,opt,name=total_kills,json=totalKills,proto3" json:"total_kills,omitempty"`
	TotalDeaths  int32   `protobuf:"varint,2,opt,name=total_deaths,json=totalDeaths,proto3" json:"total_deaths,omitempty"`
	TotalAssists int32   `protobuf:"varint,3,opt,name=total_assists,json=totalAssists,proto3" json:"total_assists,omitempty"`
	TotalGold    int32   `protobuf:"varint,4,opt,name=total_gold,json=totalGold,proto3" json:"total_gold,omitempty"`
	TotalDamage  int32   `protobuf:"varint,5,opt,name=total_damage,json=totalDamage,proto3" json:"total_damage,omitempty"`
	AvgLevel     float64 `protobuf:"fixed64,6,opt,name=avg_level,json=avgLevel,proto3" json:"avg_level,omitempty"`
}

func (x *TeamStats) Reset() {
	*x = TeamStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamStats) ProtoMessage() {}

func (x *TeamStats) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamStats.ProtoReflect.Descriptor instead.
func (*TeamStats) Descriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{27}
}

func (x *TeamStats) GetTotalKills() int32 {
	if x != nil {
		return x.TotalKills
	}
	return 0
}

func (x *TeamStats) GetTotalDeaths() int32 {
	if x != nil {
		return x.TotalDeaths
	}
	return 0
}

func (x *TeamStats) GetTotalAssists() int32 {
	if x != nil {
		return x.TotalAssists
	}
	return 0
}

func (x *TeamStats) GetTotalGold() int32 {
	if x != nil {
		return x.TotalGold
	}
	return 0
}

func (x *TeamStats) GetTotalDamage() int32 {
	if x != nil {
		return x.TotalDamage
	}
	return 0
}

func (x *TeamStats) GetAvgLevel() float64 {
	if x != nil {
		return x.AvgLevel
	}
	return 0
}

type TeamComposition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Champions       []string `protobuf:"bytes,1,rep,name=champions,proto3" json:"champions,omitempty"`
	TeamFightRating float64  `protobuf:"fixed64,2,opt,name=team_fight_rating,json=teamFightRating,proto3" json:"team_fight_rating,omitempty"`
	SiegeRating     float64  `protobuf:"fixed64,3,opt,name=siege_rating,json=siegeRating,proto3" json:"siege_rating,omitempty"`
	PickRating      float64  `protobuf:"fixed64,4,opt,name=pick_rating,json=pickRating,proto3" json:"pick_rating,omitempty"`
	ScalingRating   float64  `protobuf:"fixed64,5,opt,name=scaling_rating,json=scalingRating,proto3" json:"scaling_rating,omitempty"`
}

func (x *TeamComposition) Reset() {
	*x = TeamComposition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamComposition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamComposition) ProtoMessage() {}

func (x *TeamComposition) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamComposition.ProtoReflect.Descriptor instead.
func (*TeamComposition) Descriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{28}
}

func (x *TeamComposition) GetChampions() []string {
	if x != nil {
		return x.Champions
	}
	return nil
}

func (x *TeamComposition) GetTeamFightRating() float64 {
	if x != nil {
		return x.TeamFightRating
	}
	return 0
}

func (x *TeamComposition) GetSiegeRating() float64 {
	if x != nil {
		return x.SiegeRating
	}
	return 0
}

func (x *TeamComposition) GetPickRating() float64 {
	if x != nil {
		return x.PickRating
	}
	return 0
}

func (x *TeamComposition) GetScalingRating() float64 {
	if x != nil {
		return x.ScalingRating
	}
	return 0
}

type TeamObjectives struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Towers      int32 `protobuf:"varint,1,opt,name=towers,proto3" json:"towers,omitempty"`
	Dragons     int32 `protobuf:"varint,2,opt,name=dragons,proto3" json:"dragons,omitempty"`
	Barons      int32 `protobuf:"varint,3,opt,name=barons,proto3" json:"barons,omitempty"`
	Heralds     int32 `protobuf:"varint,4,opt,name=heralds,proto3" json:"heralds,omitempty"`
	ElderDragon bool  `protobuf:"varint,5,opt,name=elder_dragon,json=elderDragon,proto3" json:"elder_dragon,omitempty"`
}

func (x *TeamObjectives) Reset() {
	*x = TeamObjectives{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamObjectives) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamObjectives) ProtoMessage() {}

func (x *TeamObjectives) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamObjectives.ProtoReflect.Descriptor instead.
func (*TeamObjectives) Descriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{29}
}

func (x *TeamObjectives) GetTowers() int32 {
	if x != nil {
		return x.Towers
	}
	return 0
}

func (x *TeamObjectives) GetDragons() int32 {
	if x != nil {
		return x.Dragons
	}
	return 0
}

func (x *TeamObjectives) GetBarons() int32 {
	if x != nil {
		return x.Barons
	}
	return 0
}

func (x *TeamObjectives) GetHeralds() int32 {
	if x != nil {
		return x.Heralds
	}
	return 0
}

func (x *TeamObjectives) GetElderDragon() bool {
	if x != nil {
		return x.ElderDragon
	}
	return false
}

type MatchOutcome struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WinningTeam      string               `protobuf:"bytes,1,opt,name=winning_team,json=winningTeam,proto3" json:"winning_team,omitempty"`
	MatchDuration    *durationpb.Duration `protobuf:"bytes,2,opt,name=match_duration,json=matchDuration,proto3" json:"match_duration,omitempty"`
	VictoryCondition string               `protobuf:"bytes,3,opt,name=victory_condition,json=victoryCondition,proto3" json:"victory_condition,omitempty"`
	WasSurrender     bool                 `protobuf:"varint,4,opt,name=was_surrender,json=wasSurrender,proto3" json:"was_surrender,omitempty"`
}

func (x *MatchOutcome) Reset() {
	*x = MatchOutcome{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchOutcome) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchOutcome) ProtoMessage() {}

func (x *MatchOutcome) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchOutcome.ProtoReflect.Descriptor instead.
func (*MatchOutcome) Descriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{30}
}

func (x *MatchOutcome) GetWinningTeam() string {
	if x != nil {
		return x.WinningTeam
	}
	return ""
}

func (x *MatchOutcome) GetMatchDuration() *durationpb.Duration {
	if x != nil {
		return x.MatchDuration
	}
	return nil
}

func (x *MatchOutcome) GetVictoryCondition() string {
	if x != nil {
		return x.VictoryCondition
	}
	return ""
}

func (x *MatchOutcome) GetWasSurrender() bool {
	if x != nil {
		return x.WasSurrender
	}
	return false
}

type MatchMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PatchVersion string                 `protobuf:"bytes,1,opt,name=patch_version,json=patchVersion,proto3" json:"patch_version,omitempty"`
	MatchDate    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=match_date,json=matchDate,proto3" json:"match_date,omitempty"`
	QueueType    string                 `protobuf:"bytes,3,opt,name=queue_type,json=queueType,proto3" json:"queue_type,omitempty"`
	Region       string                 `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	Season       string                 `protobuf:"bytes,5,opt,name=season,proto3" json:"season,omitempty"`
}

func (x *MatchMeta) Reset() {
	*x = MatchMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchMeta) ProtoMessage() {}

func (x *MatchMeta) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchMeta.ProtoReflect.Descriptor instead.
func (*MatchMeta) Descriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{31}
}

func (x *MatchMeta) GetPatchVersion() string {
	if x != nil {
		return x.PatchVersion
	}
	return ""
}

func (x *MatchMeta) GetMatchDate() *timestamppb.Timestamp {
	if x != nil {
		return x.MatchDate
	}
	return nil
}

func (x *MatchMeta) GetQueueType() string {
	if x != nil {
		return x.QueueType
	}
	return ""
}

func (x *MatchMeta) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *MatchMeta) GetSeason() string {
	if x != nil {
		return x.Season
	}
	return ""
}

type ChampionAnalytics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId        string                   `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	Champion        string                   `protobuf:"bytes,2,opt,name=champion,proto3" json:"champion,omitempty"`
	Stats           *ChampionStats           `protobuf:"bytes,3,opt,name=stats,proto3" json:"stats,omitempty"`
	Performance     *ChampionPerformance     `protobuf:"bytes,4,opt,name=performance,proto3" json:"performance,omitempty"`
	Mastery         *ChampionMastery         `protobuf:"bytes,5,opt,name=mastery,proto3" json:"mastery,omitempty"`
	Matchups        []*ChampionMatchup       `protobuf:"bytes,6,rep,name=matchups,proto3" json:"matchups,omitempty"`
	Recommendations *ChampionRecommendations `protobuf:"bytes,7,opt,name=recommendations,proto3" json:"recommendations,omitempty"`
}

func (x *ChampionAnalytics) Reset() {
	*x = ChampionAnalytics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChampionAnalytics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChampionAnalytics) ProtoMessage() {}

func (x *ChampionAnalytics) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChampionAnalytics.ProtoReflect.Descriptor instead.
func (*ChampionAnalytics) Descriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{32}
}

func (x *ChampionAnalytics) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *ChampionAnalytics) GetChampion() string {
	if x != nil {
		return x.Champion
	}
	return ""
}

func (x *ChampionAnalytics) GetStats() *ChampionStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *ChampionAnalytics) GetPerformance() *ChampionPerformance {
	if x != nil {
		return x.Performance
	}
	return nil
}

func (x *ChampionAnalytics) GetMastery() *ChampionMastery {
	if x != nil {
		return x.Mastery
	}
	return nil
}

func (x *ChampionAnalytics) GetMatchups() []*ChampionMatchup {
	if x != nil {
		return x.Matchups
	}
	return nil
}

func (x *ChampionAnalytics) GetRecommendations() *ChampionRecommendations {
	if x != nil {
		return x.Recommendations
	}
	return nil
}

type ChampionStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GamesPlayed     int32   `protobuf:"varint,1,opt,name=games_played,json=gamesPlayed,proto3" json:"games_played,omitempty"`
	WinRate         float64 `protobuf:"fixed64,2,opt,name=win_rate,json=winRate,proto3" json:"win_rate,omitempty"`
	AvgKda          float64 `protobuf:"fixed64,3,opt,name=avg_kda,json=avgKda,proto3" json:"avg_kda,omitempty"`
	AvgCsPerMin     float64 `protobuf:"fixed64,4,opt,name=avg_cs_per_min,json=avgCsPerMin,proto3" json:"avg_cs_per_min,omitempty"`
	AvgDamagePerMin float64 `protobuf:"fixed64,5,opt,name=avg_damage_per_min,json=avgDamagePerMin,proto3" json:"avg_damage_per_min,omitempty"`
	AvgGoldPerMin   float64 `protobuf:"fixed64,6,opt,name=avg_gold_per_min,json=avgGoldPerMin,proto3" json:"avg_gold_per_min,omitempty"`
	AvgVisionScore  float64 `protobuf:"fixed64,7,opt,name=avg_vision_score,json=avgVisionScore,proto3" json:"avg_vision_score,omitempty"`
}

func (x *ChampionStats) Reset() {
	*x = ChampionStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChampionStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChampionStats) ProtoMessage() {}

func (x *ChampionStats) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChampionStats.ProtoReflect.Descriptor instead.
func (*ChampionStats) Descriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{33}
}

func (x *ChampionStats) GetGamesPlayed() int32 {
	if x != nil {
		return x.GamesPlayed
	}
	return 0
}

func (x *ChampionStats) GetWinRate() float64 {
	if x != nil {
		return x.WinRate
	}
	return 0
}

func (x *ChampionStats) GetAvgKda() float64 {
	if x != nil {
		return x.AvgKda
	}
	return 0
}

func (x *ChampionStats) GetAvgCsPerMin() float64 {
	if x != nil {
		return x.AvgCsPerMin
	}
	return 0
}

func (x *ChampionStats) GetAvgDamagePerMin() float64 {
	if x != nil {
		return x.AvgDamagePerMin
	}
	return 0
}

func (x *ChampionStats) GetAvgGoldPerMin() float64 {
	if x != nil {
		return x.AvgGoldPerMin
	}
	return 0
}

func (x *ChampionStats) GetAvgVisionScore() float64 {
	if x != nil {
		return x.AvgVisionScore
	}
	return 0
}

type ChampionPerformance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OverallRating        float64 `protobuf:"fixed64,1,opt,name=overall_rating,json=overallRating,proto3" json:"overall_rating,omitempty"`
	MechanicsRating      float64 `protobuf:"fixed64,2,opt,name=mechanics_rating,json=mechanicsRating,proto3" json:"mechanics_rating,omitempty"`
	PositioningRating    float64 `protobuf:"fixed64,3,opt,name=positioning_rating,json=positioningRating,proto3" json:"positioning_rating,omitempty"`
	DecisionMakingRating float64 `protobuf:"fixed64,4,opt,name=decision_making_rating,json=decisionMakingRating,proto3" json:"decision_making_rating,omitempty"`
	EarlyGameRating      float64 `protobuf:"fixed64,5,opt,name=early_game_rating,json=earlyGameRating,proto3" json:"early_game_rating,omitempty"`
	MidGameRating        float64 `protobuf:"fixed64,6,opt,name=mid_game_rating,json=midGameRating,proto3" json:"mid_game_rating,omitempty"`
	LateGameRating       float64 `protobuf:"fixed64,7,opt,name=late_game_rating,json=lateGameRating,proto3" json:"late_game_rating,omitempty"`
}

func (x *ChampionPerformance) Reset() {
	*x = ChampionPerformance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChampionPerformance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChampionPerformance) ProtoMessage() {}

func (x *ChampionPerformance) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChampionPerformance.ProtoReflect.Descriptor instead.
func (*ChampionPerformance) Descriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{34}
}

func (x *ChampionPerformance) GetOverallRating() float64 {
	if x != nil {
		return x.OverallRating
	}
	return 0
}

func (x *ChampionPerformance) GetMechanicsRating() float64 {
	if x != nil {
		return x.MechanicsRating
	}
	return 0
}

func (x *ChampionPerformance) GetPositioningRating() float64 {
	if x != nil {
		return x.PositioningRating
	}
	return 0
}

func (x *ChampionPerformance) GetDecisionMakingRating() float64 {
	if x != nil {
		return x.DecisionMakingRating
	}
	return 0
}

func (x *ChampionPerformance) GetEarlyGameRating() float64 {
	if x != nil {
		return x.EarlyGameRating
	}
	return 0
}

func (x *ChampionPerformance) GetMidGameRating() float64 {
	if x != nil {
		return x.MidGameRating
	}
	return 0
}

func (x *ChampionPerformance) GetLateGameRating() float64 {
	if x != nil {
		return x.LateGameRating
	}
	return 0
}

type ChampionMastery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MasteryLevel  int32   `protobuf:"varint,1,opt,name=mastery_level,json=masteryLevel,proto3" json:"mastery_level,omitempty"`
	MasteryPoints int64   `protobuf:"varint,2,opt,name=mastery_points,json=masteryPoints,proto3" json:"mastery_points,omitempty"`
	MasteryTier   string  `protobuf:"bytes,3,opt,name=mastery_tier,json=masteryTier,proto3" json:"mastery_tier,omitempty"`
	PlayRate      float64 `protobuf:"fixed64,4,opt,name=play_rate,json=playRate,proto3" json:"play_rate,omitempty"`
	RecentForm    string  `protobuf:"bytes,5,opt,name=recent_form,json=recentForm,proto3" json:"recent_form,omitempty"`
}

func (x *ChampionMastery) Reset() {
	*x = ChampionMastery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChampionMastery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChampionMastery) ProtoMessage() {}

func (x *ChampionMastery) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChampionMastery.ProtoReflect.Descriptor instead.
func (*ChampionMastery) Descriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{35}
}

func (x *ChampionMastery) GetMasteryLevel() int32 {
	if x != nil {
		return x.MasteryLevel
	}
	return 0
}

func (x *ChampionMastery) GetMasteryPoints() int64 {
	if x != nil {
		return x.MasteryPoints
	}
	return 0
}

func (x *ChampionMastery) GetMasteryTier() string {
	if x != nil {
		return x.MasteryTier
	}
	return ""
}

func (x *ChampionMastery) GetPlayRate() float64 {
	if x != nil {
		return x.PlayRate
	}
	return 0
}

func (x *ChampionMastery) GetRecentForm() string {
	if x != nil {
		return x.RecentForm
	}
	return ""
}

type ChampionMatchup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpponentChampion string   `protobuf:"bytes,1,opt,name=opponent_champion,json=opponentChampion,proto3" json:"opponent_champion,omitempty"`
	GamesPlayed      int32    `protobuf:"varint,2,opt,name=games_played,json=gamesPlayed,proto3" json:"games_played,omitempty"`
	WinRate          float64  `protobuf:"fixed64,3,opt,name=win_rate,json=winRate,proto3" json:"win_rate,omitempty"`
	AvgCsDiff        float64  `protobuf:"fixed64,4,opt,name=avg_cs_diff,json=avgCsDiff,proto3" json:"avg_cs_diff,omitempty"`
	LanePhaseRating  float64  `protobuf:"fixed64,5,opt,name=lane_phase_rating,json=lanePhaseRating,proto3" json:"lane_phase_rating,omitempty"`
	CommonMistakes   []string `protobuf:"bytes,6,rep,name=common_mistakes,json=commonMistakes,proto3" json:"common_mistakes,omitempty"`
}

func (x *ChampionMatchup) Reset() {
	*x = ChampionMatchup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChampionMatchup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChampionMatchup) ProtoMessage() {}

func (x *ChampionMatchup) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChampionMatchup.ProtoReflect.Descriptor instead.
func (*ChampionMatchup) Descriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{36}
}

func (x *ChampionMatchup) GetOpponentChampion() string {
	if x != nil {
		return x.OpponentChampion
	}
	return ""
}

func (x *ChampionMatchup) GetGamesPlayed() int32 {
	if x != nil {
		return x.GamesPlayed
	}
	return 0
}

func (x *ChampionMatchup) GetWinRate() float64 {
	if x != nil {
		return x.WinRate
	}
	return 0
}

func (x *ChampionMatchup) GetAvgCsDiff() float64 {
	if x != nil {
		return x.AvgCsDiff
	}
	return 0
}

func (x *ChampionMatchup) GetLanePhaseRating() float64 {
	if x != nil {
		return x.LanePhaseRating
	}
	return 0
}

func (x *ChampionMatchup) GetCommonMistakes() []string {
	if x != nil {
		return x.CommonMistakes
	}
	return nil
}

type ChampionRecommendations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayStyle []*PlayStyleRecommendation `protobuf:"bytes,1,rep,name=play_style,json=playStyle,proto3" json:"play_style,omitempty"`
	Builds    []*BuildRecommendation     `protobuf:"bytes,2,rep,name=builds,proto3" json:"builds,omitempty"`
	Runes     []*RuneRecommendation      `protobuf:"bytes,3,rep,name=runes,proto3" json:"runes,omitempty"`
	Training  []*TrainingRecommendation  `protobuf:"bytes,4,rep,name=training,proto3" json:"training,omitempty"`
}

func (x *ChampionRecommendations) Reset() {
	*x = ChampionRecommendations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChampionRecommendations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChampionRecommendations) ProtoMessage() {}

func (x *ChampionRecommendations) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChampionRecommendations.ProtoReflect.Descriptor instead.
func (*ChampionRecommendations) Descriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{37}
}

func (x *ChampionRecommendations) GetPlayStyle() []*PlayStyleRecommendation {
	if x != nil {
		return x.PlayStyle
	}
	return nil
}

func (x *ChampionRecommendations) GetBuilds() []*BuildRecommendation {
	if x != nil {
		return x.Builds
	}
	return nil
}

func (x *ChampionRecommendations) GetRunes() []*RuneRecommendation {
	if x != nil {
		return x.Runes
	}
	return nil
}

func (x *ChampionRecommendations) GetTraining() []*TrainingRecommendation {
	if x != nil {
		return x.Training
	}
	return nil
}

type PlayStyleRecommendation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title               string  `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description         string  `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Priority            string  `protobuf:"bytes,3,opt,name=priority,proto3" json:"priority,omitempty"`
	ExpectedImprovement float64 `protobuf:"fixed64,4,opt,name=expected_improvement,json=expectedImprovement,proto3" json:"expected_improvement,omitempty"`
}

func (x *PlayStyleRecommendation) Reset() {
	*x = PlayStyleRecommendation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayStyleRecommendation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayStyleRecommendation) ProtoMessage() {}

func (x *PlayStyleRecommendation) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayStyleRecommendation.ProtoReflect.Descriptor instead.
func (*PlayStyleRecommendation) Descriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{38}
}

func (x *PlayStyleRecommendation) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PlayStyleRecommendation) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PlayStyleRecommendation) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *PlayStyleRecommendation) GetExpectedImprovement() float64 {
	if x != nil {
		return x.ExpectedImprovement
	}
	return 0
}

type BuildRecommendation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items     []string `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	WinRate   float64  `protobuf:"fixed64,2,opt,name=win_rate,json=winRate,proto3" json:"win_rate,omitempty"`
	PlayRate  float64  `protobuf:"fixed64,3,opt,name=play_rate,json=playRate,proto3" json:"play_rate,omitempty"`
	Situation string   `protobuf:"bytes,4,opt,name=situation,proto3" json:"situation,omitempty"`
}

func (x *BuildRecommendation) Reset() {
	*x = BuildRecommendation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildRecommendation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildRecommendation) ProtoMessage() {}

func (x *BuildRecommendation) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildRecommendation.ProtoReflect.Descriptor instead.
func (*BuildRecommendation) Descriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{39}
}

func (x *BuildRecommendation) GetItems() []string {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *BuildRecommendation) GetWinRate() float64 {
	if x != nil {
		return x.WinRate
	}
	return 0
}

func (x *BuildRecommendation) GetPlayRate() float64 {
	if x != nil {
		return x.PlayRate
	}
	return 0
}

func (x *BuildRecommendation) GetSituation() string {
	if x != nil {
		return x.Situation
	}
	return ""
}

type RuneRecommendation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrimaryTree     string   `protobuf:"bytes,1,opt,name=primary_tree,json=primaryTree,proto3" json:"primary_tree,omitempty"`
	SecondaryTree   string   `protobuf:"bytes,2,opt,name=secondary_tree,json=secondaryTree,proto3" json:"secondary_tree,omitempty"`
	KeystoneOptions []string `protobuf:"bytes,3,rep,name=keystone_options,json=keystoneOptions,proto3" json:"keystone_options,omitempty"`
	OptimalityScore float64  `protobuf:"fixed64,4,opt,name=optimality_score,json=optimalityScore,proto3" json:"optimality_score,omitempty"`
}

func (x *RuneRecommendation) Reset() {
	*x = RuneRecommendation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuneRecommendation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuneRecommendation) ProtoMessage() {}

func (x *RuneRecommendation) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuneRecommendation.ProtoReflect.Descriptor instead.
func (*RuneRecommendation) Descriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{40}
}

func (x *RuneRecommendation) GetPrimaryTree() string {
	if x != nil {
		return x.PrimaryTree
	}
	return ""
}

func (x *RuneRecommendation) GetSecondaryTree() string {
	if x != nil {
		return x.SecondaryTree
	}
	return ""
}

func (x *RuneRecommendation) GetKeystoneOptions() []string {
	if x != nil {
		return x.KeystoneOptions
	}
	return nil
}

func (x *RuneRecommendation) GetOptimalityScore() float64 {
	if x != nil {
		return x.OptimalityScore
	}
	return 0
}

type TrainingRecommendation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title            string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description      string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Duration         string `protobuf:"bytes,3,opt,name=duration,proto3" json:"duration,omitempty"`
	Frequency        string `protobuf:"bytes,4,opt,name=frequency,proto3" json:"frequency,omitempty"`
	ExpectedTimeline string `protobuf:"bytes,5,opt,name=expected_timeline,json=expectedTimeline,proto3" json:"expected_timeline,omitempty"`
}

func (x *TrainingRecommendation) Reset() {
	*x = TrainingRecommendation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrainingRecommendation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrainingRecommendation) ProtoMessage() {}

func (x *TrainingRecommendation) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrainingRecommendation.ProtoReflect.Descriptor instead.
func (*TrainingRecommendation) Descriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{41}
}

func (x *TrainingRecommendation) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TrainingRecommendation) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TrainingRecommendation) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

func (x *TrainingRecommendation) GetFrequency() string {
	if x != nil {
		return x.Frequency
	}
	return ""
}

func (x *TrainingRecommendation) GetExpectedTimeline() string {
	if x != nil {
		return x.ExpectedTimeline
	}
	return ""
}

type ProcessingOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncludeTimeline      bool  `protobuf:"varint,1,opt,name=include_timeline,json=includeTimeline,proto3" json:"include_timeline,omitempty"`
	IncludeAdvancedStats bool  `protobuf:"varint,2,opt,name=include_advanced_stats,json=includeAdvancedStats,proto3" json:"include_advanced_stats,omitempty"`
	ForceRefresh         bool  `protobuf:"varint,3,opt,name=force_refresh,json=forceRefresh,proto3" json:"force_refresh,omitempty"`
	BatchSize            int32 `protobuf:"varint,4,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
}

func (x *ProcessingOptions) Reset() {
	*x = ProcessingOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessingOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessingOptions) ProtoMessage() {}

func (x *ProcessingOptions) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessingOptions.ProtoReflect.Descriptor instead.
func (*ProcessingOptions) Descriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{42}
}

func (x *ProcessingOptions) GetIncludeTimeline() bool {
	if x != nil {
		return x.IncludeTimeline
	}
	return false
}

func (x *ProcessingOptions) GetIncludeAdvancedStats() bool {
	if x != nil {
		return x.IncludeAdvancedStats
	}
	return false
}

func (x *ProcessingOptions) GetForceRefresh() bool {
	if x != nil {
		return x.ForceRefresh
	}
	return false
}

func (x *ProcessingOptions) GetBatchSize() int32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

type ProcessingResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier   string                 `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Success      bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage *string                `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3,oneof" json:"error_message,omitempty"`
	ProcessedAt  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=processed_at,json=processedAt,proto3" json:"processed_at,omitempty"`
	Metadata     map[string]string      `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ProcessingResult) Reset() {
	*x = ProcessingResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessingResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessingResult) ProtoMessage() {}

func (x *ProcessingResult) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessingResult.ProtoReflect.Descriptor instead.
func (*ProcessingResult) Descriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{43}
}

func (x *ProcessingResult) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *ProcessingResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ProcessingResult) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

func (x *ProcessingResult) GetProcessedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ProcessedAt
	}
	return nil
}

func (x *ProcessingResult) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type ResponseMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GeneratedAt          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=generated_at,json=generatedAt,proto3" json:"generated_at,omitempty"`
	ProcessingTime       *durationpb.Duration   `protobuf:"bytes,2,opt,name=processing_time,json=processingTime,proto3" json:"processing_time,omitempty"`
	CacheStatus          string                 `protobuf:"bytes,3,opt,name=cache_status,json=cacheStatus,proto3" json:"cache_status,omitempty"`
	ApiVersion           string                 `protobuf:"bytes,4,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	DataFreshnessSeconds int32                  `protobuf:"varint,5,opt,name=data_freshness_seconds,json=dataFreshnessSeconds,proto3" json:"data_freshness_seconds,omitempty"`
}

func (x *ResponseMetadata) Reset() {
	*x = ResponseMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analytics_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseMetadata) ProtoMessage() {}

func (x *ResponseMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_analytics_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseMetadata.ProtoReflect.Descriptor instead.
func (*ResponseMetadata) Descriptor() ([]byte, []int) {
	return file_analytics_proto_rawDescGZIP(), []int{44}
}

func (x *ResponseMetadata) GetGeneratedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.GeneratedAt
	}
	return nil
}

func (x *ResponseMetadata) GetProcessingTime() *durationpb.Duration {
	if x != nil {
		return x.ProcessingTime
	}
	return nil
}

func (x *ResponseMetadata) GetCacheStatus() string {
	if x != nil {
		return x.CacheStatus
	}
	return ""
}

func (x *ResponseMetadata) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *ResponseMetadata) GetDataFreshnessSeconds() int32 {
	if x != nil {
		return x.DataFreshnessSeconds
	}
	return 0
}

var File_analytics_proto protoreflect.FileDescriptor

var file_analytics_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x13, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdb, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0xa3, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64,
	0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x09, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x12, 0x41, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x68, 0x65, 0x72,
	0x61, 0x6c, 0x64, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x90, 0x01, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0xa1,
	0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x09,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x09, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x12,
	0x41, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xa3, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69,
	0x6f, 0x6e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa7, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x09, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x68,
	0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x09, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x12,
	0x41, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x22, 0xb3, 0x01, 0x0a, 0x16, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x9d, 0x02, 0x0a, 0x0e, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x41, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x68, 0x65, 0x72,
	0x61, 0x6c, 0x64, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a,
	0x37, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7d, 0x0a, 0x1c, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x64, 0x73, 0x12, 0x40, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa3, 0x01, 0x0a, 0x1d, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x68, 0x65, 0x72,
	0x61, 0x6c, 0x64, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x68,
	0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa9, 0x03,
	0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x65, 0x72,
	0x61, 0x6c, 0x64, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x06, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x54, 0x72, 0x65, 0x6e, 0x64, 0x73, 0x52, 0x06, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x49,
	0x0a, 0x0d, 0x74, 0x6f, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6d,
	0x70, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0c, 0x74, 0x6f, 0x70,
	0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x08, 0x72, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x65,
	0x72, 0x61, 0x6c, 0x64, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0xfe, 0x02, 0x0a, 0x0b, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x76, 0x65,
	0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x19, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x77, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6b,
	0x64, 0x61, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x6b, 0x64, 0x61, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x63, 0x73, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x50,
	0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x6f, 0x6c, 0x64,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0d, 0x67, 0x6f, 0x6c, 0x64, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x12, 0x35, 0x0a, 0x17, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x14, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x50, 0x65,
	0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x6b,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x65,
	0x72, 0x61, 0x6c, 0x64, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xf4, 0x02, 0x0a, 0x0c, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x41, 0x0a, 0x0c, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0b, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x12, 0x43,
	0x0a, 0x0d, 0x77, 0x69, 0x6e, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x65, 0x6e,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x77, 0x69, 0x6e, 0x72, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x65, 0x6e, 0x64, 0x12, 0x3b, 0x0a, 0x09, 0x6b, 0x64, 0x61, 0x5f, 0x74, 0x72, 0x65, 0x6e, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x65,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6b, 0x64, 0x61, 0x54, 0x72, 0x65, 0x6e, 0x64,
	0x12, 0x4b, 0x0a, 0x11, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x74, 0x72, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x65,
	0x72, 0x61, 0x6c, 0x64, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x10, 0x70, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0f, 0x74, 0x72, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x22, 0x7c, 0x0a, 0x09, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x37,
	0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6c, 0x6f, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x5c, 0x0a, 0x0a, 0x54, 0x72, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x38, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe1, 0x01,
	0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a,
	0x0c, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x77, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x64, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6b, 0x64, 0x61, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x79,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x22, 0x86, 0x02, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x44, 0x0a, 0x0c, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x5f,
	0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x65, 0x72,
	0x61, 0x6c, 0x64, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x6f,
	0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x46, 0x0a, 0x0d, 0x63, 0x68,
	0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x52, 0x61,
	0x6e, 0x6b, 0x12, 0x46, 0x0a, 0x0d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x65, 0x72, 0x61,
	0x6c, 0x64, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x61, 0x6e, 0x6b, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x22, 0x75, 0x0a, 0x0c, 0x52, 0x61,
	0x6e, 0x6b, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x6c, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x73,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x22, 0xa9, 0x01, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x6c, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x61, 0x6b, 0x5f,
	0x72, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x65, 0x61, 0x6b,
	0x52, 0x61, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x69, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x77, 0x69, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x73, 0x73,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x6f, 0x73, 0x73, 0x65, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x73, 0x22, 0xbb, 0x03,
	0x0a, 0x0e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x07, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x65,
	0x72, 0x61, 0x6c, 0x64, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x3f, 0x0a, 0x09, 0x62, 0x6c,
	0x75, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x08, 0x62, 0x6c, 0x75, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x3d, 0x0a, 0x08, 0x72,
	0x65, 0x64, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x07, 0x72, 0x65, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x3b, 0x0a, 0x07, 0x6f, 0x75,
	0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x65,
	0x72, 0x61, 0x6c, 0x64, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x07,
	0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x22, 0xb8, 0x02, 0x0a, 0x0f,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x4d, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x44, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x74, 0x69,
	0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0xd4, 0x02, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6b,
	0x69, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6b, 0x69, 0x6c, 0x6c,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x63, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x65, 0x61, 0x72, 0x6e,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x6f, 0x6c, 0x64, 0x45, 0x61,
	0x72, 0x6e, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64,
	0x65, 0x61, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x72,
	0x75, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x52, 0x75, 0x6e, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x65, 0x22, 0xb6, 0x02,
	0x0a, 0x16, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x64, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6b,
	0x64, 0x61, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e,
	0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x73, 0x50, 0x65, 0x72,
	0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x64, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x6b, 0x69, 0x6c,
	0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6b, 0x69, 0x6c, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x61, 0x72, 0x6c,
	0x79, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0f, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x69, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6d,
	0x69, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x10,
	0x6c, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x6c, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x95, 0x01, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x3a,
	0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x0c, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x69, 0x6b, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x70, 0x69, 0x6b,
	0x65, 0x52, 0x0b, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x70, 0x69, 0x6b, 0x65, 0x73, 0x22, 0xfe,
	0x01, 0x0a, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x37, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x9f, 0x01, 0x0a, 0x0a, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x70, 0x69, 0x6b, 0x65, 0x12, 0x37,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x70, 0x69, 0x6b, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x70, 0x69,
	0x6b, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x22, 0xef, 0x01, 0x0a, 0x0d, 0x54, 0x65, 0x61, 0x6d, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x69, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x69, 0x64, 0x65,
	0x12, 0x34, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x65,
	0x72, 0x61, 0x6c, 0x64, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43,
	0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x73, 0x22, 0xd3, 0x01, 0x0a, 0x09, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4b, 0x69, 0x6c,
	0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x61, 0x74,
	0x68, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44,
	0x65, 0x61, 0x74, 0x68, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x76, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x61, 0x76, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xc6, 0x01, 0x0a, 0x0f, 0x54, 0x65,
	0x61, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x74,
	0x65, 0x61, 0x6d, 0x5f, 0x66, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x74, 0x65, 0x61, 0x6d, 0x46, 0x69, 0x67, 0x68,
	0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x69, 0x65, 0x67, 0x65,
	0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73,
	0x69, 0x65, 0x67, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x69,
	0x63, 0x6b, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0a, 0x70, 0x69, 0x63, 0x6b, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x22, 0x97, 0x01, 0x0a, 0x0e, 0x54, 0x65, 0x61, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x61, 0x72, 0x6f, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x62, 0x61, 0x72, 0x6f, 0x6e, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6c, 0x64,
	0x65, 0x72, 0x5f, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x65, 0x6c, 0x64, 0x65, 0x72, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x22, 0xc5, 0x01, 0x0a,
	0x0c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x61, 0x6d,
	0x12, 0x40, 0x0a, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x76, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76,
	0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x77, 0x61, 0x73, 0x5f, 0x73, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x77, 0x61, 0x73, 0x53, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x22, 0xba, 0x01, 0x0a, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65,
	0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x22, 0xac, 0x03, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e,
	0x12, 0x38, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x0b, 0x70, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64,
	0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68,
	0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x79, 0x52, 0x07, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x75,
	0x70, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c,
	0x64, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x75, 0x70, 0x52, 0x08,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x75, 0x70, 0x73, 0x12, 0x56, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x8b, 0x02, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x77, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x61, 0x76, 0x67, 0x5f, 0x6b, 0x64, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x06, 0x61, 0x76, 0x67, 0x4b, 0x64, 0x61, 0x12, 0x23, 0x0a, 0x0e, 0x61, 0x76, 0x67,
	0x5f, 0x63, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x61, 0x76, 0x67, 0x43, 0x73, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x12, 0x2b,
	0x0a, 0x12, 0x61, 0x76, 0x67, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x61, 0x76, 0x67, 0x44,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x10, 0x61,
	0x76, 0x67, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x61, 0x76, 0x67, 0x47, 0x6f, 0x6c, 0x64, 0x50, 0x65,
	0x72, 0x4d, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x76, 0x67, 0x5f, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e,
	0x61, 0x76, 0x67, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xca,
	0x02, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c,
	0x6c, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a,
	0x10, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x6d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69,
	0x63, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e,
	0x67, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x4d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a,
	0x11, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x69, 0x64,
	0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0d, 0x6d, 0x69, 0x64, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x6c, 0x61, 0x74,
	0x65, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x22, 0xbe, 0x01, 0x0a, 0x0f,
	0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x79, 0x12,
	0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x79, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x79, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x79, 0x54, 0x69, 0x65, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x22, 0xf1, 0x01, 0x0a,
	0x0f, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x75, 0x70,
	0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x70, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61,
	0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x70, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a,
	0x0c, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x77, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x61,
	0x76, 0x67, 0x5f, 0x63, 0x73, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x61, 0x76, 0x67, 0x43, 0x73, 0x44, 0x69, 0x66, 0x66, 0x12, 0x2a, 0x0a, 0x11, 0x6c,
	0x61, 0x6e, 0x65, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x6c, 0x61, 0x6e, 0x65, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x6d, 0x69, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4d, 0x69, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x73,
	0x22, 0xb0, 0x02, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4b, 0x0a, 0x0a,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68, 0x65, 0x72, 0x61,
	0x6c, 0x64, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x06, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x12, 0x3d, 0x0a, 0x05, 0x72,
	0x75, 0x6e, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x68, 0x65, 0x72,
	0x61, 0x6c, 0x64, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x75, 0x6e, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x08, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x68,
	0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x22, 0xa0, 0x01, 0x0a, 0x17, 0x50, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x79, 0x6c,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x31, 0x0a, 0x14, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x69, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x13, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6d, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x81, 0x01, 0x0a, 0x13, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x77, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x69, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x69, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb4, 0x01, 0x0a, 0x12, 0x52,
	0x75, 0x6e, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x74, 0x72, 0x65,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x54, 0x72, 0x65, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72,
	0x79, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x54, 0x72, 0x65, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6b,
	0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0f, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x22, 0xb7, 0x01, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2b,
	0x0a, 0x11, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x11,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x34, 0x0a, 0x16,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xd5, 0x02, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x3d, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x41, 0x74, 0x12, 0x4f,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a,
	0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x8f,
	0x02, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x42, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x69,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x66, 0x72, 0x65, 0x73, 0x68, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x64, 0x61, 0x74, 0x61,
	0x46, 0x72, 0x65, 0x73, 0x68, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x32, 0xe1, 0x04, 0x0a, 0x10, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x75, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x12, 0x2e, 0x2e, 0x68, 0x65,
	0x72, 0x61, 0x6c, 0x64, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x68, 0x65,
	0x72, 0x61, 0x6c, 0x64, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x12, 0x2d, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x7b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x12, 0x30, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c,
	0x64, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x68, 0x65, 0x72,
	0x61, 0x6c, 0x64, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a,
	0x0f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x12, 0x2b, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x30, 0x01, 0x12, 0x7e, 0x0a, 0x15, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x12, 0x31, 0x2e,
	0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x32, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x51, 0x5a, 0x4f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2d, 0x6c, 0x6f, 0x6c, 0x2f, 0x68, 0x65,
	0x72, 0x61, 0x6c, 0x64, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_analytics_proto_rawDescOnce sync.Once
	file_analytics_proto_rawDescData = file_analytics_proto_rawDesc
)

func file_analytics_proto_rawDescGZIP() []byte {
	file_analytics_proto_rawDescOnce.Do(func() {
		file_analytics_proto_rawDescData = protoimpl.X.CompressGZIP(file_analytics_proto_rawDescData)
	})
	return file_analytics_proto_rawDescData
}

var file_analytics_proto_msgTypes = make([]protoimpl.MessageInfo, 48)
var file_analytics_proto_goTypes = []interface{}{
	(*GetPlayerAnalyticsRequest)(nil),     // 0: herald.analytics.v1.GetPlayerAnalyticsRequest
	(*GetPlayerAnalyticsResponse)(nil),    // 1: herald.analytics.v1.GetPlayerAnalyticsResponse
	(*GetMatchAnalyticsRequest)(nil),      // 2: herald.analytics.v1.GetMatchAnalyticsRequest
	(*GetMatchAnalyticsResponse)(nil),     // 3: herald.analytics.v1.GetMatchAnalyticsResponse
	(*GetChampionAnalyticsRequest)(nil),   // 4: herald.analytics.v1.GetChampionAnalyticsRequest
	(*GetChampionAnalyticsResponse)(nil),  // 5: herald.analytics.v1.GetChampionAnalyticsResponse
	(*StreamAnalyticsRequest)(nil),        // 6: herald.analytics.v1.StreamAnalyticsRequest
	(*AnalyticsEvent)(nil),                // 7: herald.analytics.v1.AnalyticsEvent
	(*BatchProcessAnalyticsRequest)(nil),  // 8: herald.analytics.v1.BatchProcessAnalyticsRequest
	(*BatchProcessAnalyticsResponse)(nil), // 9: herald.analytics.v1.BatchProcessAnalyticsResponse
	(*PlayerAnalytics)(nil),               // 10: herald.analytics.v1.PlayerAnalytics
	(*PlayerStats)(nil),                   // 11: herald.analytics.v1.PlayerStats
	(*PlayerTrends)(nil),                  // 12: herald.analytics.v1.PlayerTrends
	(*TrendData)(nil),                     // 13: herald.analytics.v1.TrendData
	(*TrendPoint)(nil),                    // 14: herald.analytics.v1.TrendPoint
	(*ChampionSummary)(nil),               // 15: herald.analytics.v1.ChampionSummary
	(*PlayerRankings)(nil),                // 16: herald.analytics.v1.PlayerRankings
	(*RankPosition)(nil),                  // 17: herald.analytics.v1.RankPosition
	(*PlayerRankInfo)(nil),                // 18: herald.analytics.v1.PlayerRankInfo
	(*MatchAnalytics)(nil),                // 19: herald.analytics.v1.MatchAnalytics
	(*PlayerMatchData)(nil),               // 20: herald.analytics.v1.PlayerMatchData
	(*PlayerMatchStats)(nil),              // 21: herald.analytics.v1.PlayerMatchStats
	(*PlayerMatchPerformance)(nil),        // 22: herald.analytics.v1.PlayerMatchPerformance
	(*PlayerMatchTimeline)(nil),           // 23: herald.analytics.v1.PlayerMatchTimeline
	(*TimelineEvent)(nil),                 // 24: herald.analytics.v1.TimelineEvent
	(*PowerSpike)(nil),                    // 25: herald.analytics.v1.PowerSpike
	(*TeamAnalytics)(nil),                 // 26: herald.analytics.v1.TeamAnalytics
	(*TeamStats)(nil),                     // 27: herald.analytics.v1.TeamStats
	(*TeamComposition)(nil),               // 28: herald.analytics.v1.TeamComposition
	(*TeamObjectives)(nil),                // 29: herald.analytics.v1.TeamObjectives
	(*MatchOutcome)(nil),                  // 30: herald.analytics.v1.MatchOutcome
	(*MatchMeta)(nil),                     // 31: herald.analytics.v1.MatchMeta
	(*ChampionAnalytics)(nil),             // 32: herald.analytics.v1.ChampionAnalytics
	(*ChampionStats)(nil),                 // 33: herald.analytics.v1.ChampionStats
	(*ChampionPerformance)(nil),           // 34: herald.analytics.v1.ChampionPerformance
	(*ChampionMastery)(nil),               // 35: herald.analytics.v1.ChampionMastery
	(*ChampionMatchup)(nil),               // 36: herald.analytics.v1.ChampionMatchup
	(*ChampionRecommendations)(nil),       // 37: herald.analytics.v1.ChampionRecommendations
	(*PlayStyleRecommendation)(nil),       // 38: herald.analytics.v1.PlayStyleRecommendation
	(*BuildRecommendation)(nil),           // 39: herald.analytics.v1.BuildRecommendation
	(*RuneRecommendation)(nil),            // 40: herald.analytics.v1.RuneRecommendation
	(*TrainingRecommendation)(nil),        // 41: herald.analytics.v1.TrainingRecommendation
	(*ProcessingOptions)(nil),             // 42: herald.analytics.v1.ProcessingOptions
	(*ProcessingResult)(nil),              // 43: herald.analytics.v1.ProcessingResult
	(*ResponseMetadata)(nil),              // 44: herald.analytics.v1.ResponseMetadata
	nil,                                   // 45: herald.analytics.v1.AnalyticsEvent.DataEntry
	nil,                                   // 46: herald.analytics.v1.TimelineEvent.DataEntry
	nil,                                   // 47: herald.analytics.v1.ProcessingResult.MetadataEntry
	(*durationpb.Duration)(nil),           // 48: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),         // 49: google.protobuf.Timestamp
}
var file_analytics_proto_depIdxs = []int32{
	10, // 0: herald.analytics.v1.GetPlayerAnalyticsResponse.analytics:type_name -> herald.analytics.v1.PlayerAnalytics
	44, // 1: herald.analytics.v1.GetPlayerAnalyticsResponse.metadata:type_name -> herald.analytics.v1.ResponseMetadata
	19, // 2: herald.analytics.v1.GetMatchAnalyticsResponse.analytics:type_name -> herald.analytics.v1.MatchAnalytics
	44, // 3: herald.analytics.v1.GetMatchAnalyticsResponse.metadata:type_name -> herald.analytics.v1.ResponseMetadata
	32, // 4: herald.analytics.v1.GetChampionAnalyticsResponse.analytics:type_name -> herald.analytics.v1.ChampionAnalytics
	44, // 5: herald.analytics.v1.GetChampionAnalyticsResponse.metadata:type_name -> herald.analytics.v1.ResponseMetadata
	48, // 6: herald.analytics.v1.StreamAnalyticsRequest.update_interval:type_name -> google.protobuf.Duration
	49, // 7: herald.analytics.v1.AnalyticsEvent.timestamp:type_name -> google.protobuf.Timestamp
	45, // 8: herald.analytics.v1.AnalyticsEvent.data:type_name -> herald.analytics.v1.AnalyticsEvent.DataEntry
	42, // 9: herald.analytics.v1.BatchProcessAnalyticsRequest.options:type_name -> herald.analytics.v1.ProcessingOptions
	43, // 10: herald.analytics.v1.BatchProcessAnalyticsResponse.results:type_name -> herald.analytics.v1.ProcessingResult
	44, // 11: herald.analytics.v1.BatchProcessAnalyticsResponse.metadata:type_name -> herald.analytics.v1.ResponseMetadata
	11, // 12: herald.analytics.v1.PlayerAnalytics.stats:type_name -> herald.analytics.v1.PlayerStats
	12, // 13: herald.analytics.v1.PlayerAnalytics.trends:type_name -> herald.analytics.v1.PlayerTrends
	15, // 14: herald.analytics.v1.PlayerAnalytics.top_champions:type_name -> herald.analytics.v1.ChampionSummary
	16, // 15: herald.analytics.v1.PlayerAnalytics.rankings:type_name -> herald.analytics.v1.PlayerRankings
	49, // 16: herald.analytics.v1.PlayerAnalytics.last_updated:type_name -> google.protobuf.Timestamp
	18, // 17: herald.analytics.v1.PlayerStats.rank_info:type_name -> herald.analytics.v1.PlayerRankInfo
	13, // 18: herald.analytics.v1.PlayerTrends.rating_trend:type_name -> herald.analytics.v1.TrendData
	13, // 19: herald.analytics.v1.PlayerTrends.winrate_trend:type_name -> herald.analytics.v1.TrendData
	13, // 20: herald.analytics.v1.PlayerTrends.kda_trend:type_name -> herald.analytics.v1.TrendData
	13, // 21: herald.analytics.v1.PlayerTrends.performance_trend:type_name -> herald.analytics.v1.TrendData
	14, // 22: herald.analytics.v1.TrendData.points:type_name -> herald.analytics.v1.TrendPoint
	49, // 23: herald.analytics.v1.TrendPoint.timestamp:type_name -> google.protobuf.Timestamp
	17, // 24: herald.analytics.v1.PlayerRankings.overall_rank:type_name -> herald.analytics.v1.RankPosition
	17, // 25: herald.analytics.v1.PlayerRankings.champion_rank:type_name -> herald.analytics.v1.RankPosition
	17, // 26: herald.analytics.v1.PlayerRankings.position_rank:type_name -> herald.analytics.v1.RankPosition
	48, // 27: herald.analytics.v1.MatchAnalytics.match_duration:type_name -> google.protobuf.Duration
	20, // 28: herald.analytics.v1.MatchAnalytics.players:type_name -> herald.analytics.v1.PlayerMatchData
	26, // 29: herald.analytics.v1.MatchAnalytics.blue_team:type_name -> herald.analytics.v1.TeamAnalytics
	26, // 30: herald.analytics.v1.MatchAnalytics.red_team:type_name -> herald.analytics.v1.TeamAnalytics
	30, // 31: herald.analytics.v1.MatchAnalytics.outcome:type_name -> herald.analytics.v1.MatchOutcome
	31, // 32: herald.analytics.v1.MatchAnalytics.meta:type_name -> herald.analytics.v1.MatchMeta
	21, // 33: herald.analytics.v1.PlayerMatchData.stats:type_name -> herald.analytics.v1.PlayerMatchStats
	22, // 34: herald.analytics.v1.PlayerMatchData.performance:type_name -> herald.analytics.v1.PlayerMatchPerformance
	23, // 35: herald.analytics.v1.PlayerMatchData.timeline:type_name -> herald.analytics.v1.PlayerMatchTimeline
	24, // 36: herald.analytics.v1.PlayerMatchTimeline.events:type_name -> herald.analytics.v1.TimelineEvent
	25, // 37: herald.analytics.v1.PlayerMatchTimeline.power_spikes:type_name -> herald.analytics.v1.PowerSpike
	48, // 38: herald.analytics.v1.TimelineEvent.timestamp:type_name -> google.protobuf.Duration
	46, // 39: herald.analytics.v1.TimelineEvent.data:type_name -> herald.analytics.v1.TimelineEvent.DataEntry
	48, // 40: herald.analytics.v1.PowerSpike.timestamp:type_name -> google.protobuf.Duration
	27, // 41: herald.analytics.v1.TeamAnalytics.stats:type_name -> herald.analytics.v1.TeamStats
	28, // 42: herald.analytics.v1.TeamAnalytics.composition:type_name -> herald.analytics.v1.TeamComposition
	29, // 43: herald.analytics.v1.TeamAnalytics.objectives:type_name -> herald.analytics.v1.TeamObjectives
	48, // 44: herald.analytics.v1.MatchOutcome.match_duration:type_name -> google.protobuf.Duration
	49, // 45: herald.analytics.v1.MatchMeta.match_date:type_name -> google.protobuf.Timestamp
	33, // 46: herald.analytics.v1.ChampionAnalytics.stats:type_name -> herald.analytics.v1.ChampionStats
	34, // 47: herald.analytics.v1.ChampionAnalytics.performance:type_name -> herald.analytics.v1.ChampionPerformance
	35, // 48: herald.analytics.v1.ChampionAnalytics.mastery:type_name -> herald.analytics.v1.ChampionMastery
	36, // 49: herald.analytics.v1.ChampionAnalytics.matchups:type_name -> herald.analytics.v1.ChampionMatchup
	37, // 50: herald.analytics.v1.ChampionAnalytics.recommendations:type_name -> herald.analytics.v1.ChampionRecommendations
	38, // 51: herald.analytics.v1.ChampionRecommendations.play_style:type_name -> herald.analytics.v1.PlayStyleRecommendation
	39, // 52: herald.analytics.v1.ChampionRecommendations.builds:type_name -> herald.analytics.v1.BuildRecommendation
	40, // 53: herald.analytics.v1.ChampionRecommendations.runes:type_name -> herald.analytics.v1.RuneRecommendation
	41, // 54: herald.analytics.v1.ChampionRecommendations.training:type_name -> herald.analytics.v1.TrainingRecommendation
	49, // 55: herald.analytics.v1.ProcessingResult.processed_at:type_name -> google.protobuf.Timestamp
	47, // 56: herald.analytics.v1.ProcessingResult.metadata:type_name -> herald.analytics.v1.ProcessingResult.MetadataEntry
	49, // 57: herald.analytics.v1.ResponseMetadata.generated_at:type_name -> google.protobuf.Timestamp
	48, // 58: herald.analytics.v1.ResponseMetadata.processing_time:type_name -> google.protobuf.Duration
	0,  // 59: herald.analytics.v1.AnalyticsService.GetPlayerAnalytics:input_type -> herald.analytics.v1.GetPlayerAnalyticsRequest
	2,  // 60: herald.analytics.v1.AnalyticsService.GetMatchAnalytics:input_type -> herald.analytics.v1.GetMatchAnalyticsRequest
	4,  // 61: herald.analytics.v1.AnalyticsService.GetChampionAnalytics:input_type -> herald.analytics.v1.GetChampionAnalyticsRequest
	6,  // 62: herald.analytics.v1.AnalyticsService.StreamAnalytics:input_type -> herald.analytics.v1.StreamAnalyticsRequest
	8,  // 63: herald.analytics.v1.AnalyticsService.BatchProcessAnalytics:input_type -> herald.analytics.v1.BatchProcessAnalyticsRequest
	1,  // 64: herald.analytics.v1.AnalyticsService.GetPlayerAnalytics:output_type -> herald.analytics.v1.GetPlayerAnalyticsResponse
	3,  // 65: herald.analytics.v1.AnalyticsService.GetMatchAnalytics:output_type -> herald.analytics.v1.GetMatchAnalyticsResponse
	5,  // 66: herald.analytics.v1.AnalyticsService.GetChampionAnalytics:output_type -> herald.analytics.v1.GetChampionAnalyticsResponse
	7,  // 67: herald.analytics.v1.AnalyticsService.StreamAnalytics:output_type -> herald.analytics.v1.AnalyticsEvent
	9,  // 68: herald.analytics.v1.AnalyticsService.BatchProcessAnalytics:output_type -> herald.analytics.v1.BatchProcessAnalyticsResponse
	64, // [64:69] is the sub-list for method output_type
	59, // [59:64] is the sub-list for method input_type
	59, // [59:59] is the sub-list for extension type_name
	59, // [59:59] is the sub-list for extension extendee
	0,  // [0:59] is the sub-list for field type_name
}

func init() { file_analytics_proto_init() }
func file_analytics_proto_init() {
	if File_analytics_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_analytics_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlayerAnalyticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlayerAnalyticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMatchAnalyticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMatchAnalyticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChampionAnalyticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChampionAnalyticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamAnalyticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyticsEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchProcessAnalyticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchProcessAnalyticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerAnalytics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerTrends); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrendData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrendPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChampionSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerRankings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerRankInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchAnalytics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerMatchData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerMatchStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerMatchPerformance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerMatchTimeline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimelineEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PowerSpike); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamAnalytics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamComposition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamObjectives); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchOutcome); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChampionAnalytics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChampionStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChampionPerformance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChampionMastery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChampionMatchup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChampionRecommendations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayStyleRecommendation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildRecommendation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuneRecommendation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrainingRecommendation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessingOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessingResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analytics_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_analytics_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_analytics_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_analytics_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_analytics_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_analytics_proto_msgTypes[43].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_analytics_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   48,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_analytics_proto_goTypes,
		DependencyIndexes: file_analytics_proto_depIdxs,
		MessageInfos:      file_analytics_proto_msgTypes,
	}.Build()
	File_analytics_proto = out.File
	file_analytics_proto_rawDesc = nil
	file_analytics_proto_goTypes = nil
	file_analytics_proto_depIdxs = nil
}
