// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: riot.proto

package riotv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RiotService_GetSummoner_FullMethodName        = "/herald.riot.v1.RiotService/GetSummoner"
	RiotService_GetMatchHistory_FullMethodName    = "/herald.riot.v1.RiotService/GetMatchHistory"
	RiotService_GetMatchData_FullMethodName       = "/herald.riot.v1.RiotService/GetMatchData"
	RiotService_GetLiveMatch_FullMethodName       = "/herald.riot.v1.RiotService/GetLiveMatch"
	RiotService_GetChampionMastery_FullMethodName = "/herald.riot.v1.RiotService/GetChampionMastery"
	RiotService_GetRankedStats_FullMethodName     = "/herald.riot.v1.RiotService/GetRankedStats"
	RiotService_SyncPlayerData_FullMethodName     = "/herald.riot.v1.RiotService/SyncPlayerData"
	RiotService_GetRateLimit_FullMethodName       = "/herald.riot.v1.RiotService/GetRateLimit"
)

// RiotServiceClient is the client API for RiotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RiotServiceClient interface {
	// Get summoner information
	GetSummoner(ctx context.Context, in *GetSummonerRequest, opts ...grpc.CallOption) (*GetSummonerResponse, error)
	// Get match history for a summoner
	GetMatchHistory(ctx context.Context, in *GetMatchHistoryRequest, opts ...grpc.CallOption) (*GetMatchHistoryResponse, error)
	// Get detailed match data
	GetMatchData(ctx context.Context, in *GetMatchDataRequest, opts ...grpc.CallOption) (*GetMatchDataResponse, error)
	// Get live match information
	GetLiveMatch(ctx context.Context, in *GetLiveMatchRequest, opts ...grpc.CallOption) (*GetLiveMatchResponse, error)
	// Get champion mastery data
	GetChampionMastery(ctx context.Context, in *GetChampionMasteryRequest, opts ...grpc.CallOption) (*GetChampionMasteryResponse, error)
	// Get ranked information
	GetRankedStats(ctx context.Context, in *GetRankedStatsRequest, opts ...grpc.CallOption) (*GetRankedStatsResponse, error)
	// Synchronize player data
	SyncPlayerData(ctx context.Context, in *SyncPlayerDataRequest, opts ...grpc.CallOption) (*SyncPlayerDataResponse, error)
	// Get API rate limit status
	GetRateLimit(ctx context.Context, in *GetRateLimitRequest, opts ...grpc.CallOption) (*GetRateLimitResponse, error)
}

type riotServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRiotServiceClient(cc grpc.ClientConnInterface) RiotServiceClient {
	return &riotServiceClient{cc}
}

func (c *riotServiceClient) GetSummoner(ctx context.Context, in *GetSummonerRequest, opts ...grpc.CallOption) (*GetSummonerResponse, error) {
	out := new(GetSummonerResponse)
	err := c.cc.Invoke(ctx, RiotService_GetSummoner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riotServiceClient) GetMatchHistory(ctx context.Context, in *GetMatchHistoryRequest, opts ...grpc.CallOption) (*GetMatchHistoryResponse, error) {
	out := new(GetMatchHistoryResponse)
	err := c.cc.Invoke(ctx, RiotService_GetMatchHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riotServiceClient) GetMatchData(ctx context.Context, in *GetMatchDataRequest, opts ...grpc.CallOption) (*GetMatchDataResponse, error) {
	out := new(GetMatchDataResponse)
	err := c.cc.Invoke(ctx, RiotService_GetMatchData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riotServiceClient) GetLiveMatch(ctx context.Context, in *GetLiveMatchRequest, opts ...grpc.CallOption) (*GetLiveMatchResponse, error) {
	out := new(GetLiveMatchResponse)
	err := c.cc.Invoke(ctx, RiotService_GetLiveMatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riotServiceClient) GetChampionMastery(ctx context.Context, in *GetChampionMasteryRequest, opts ...grpc.CallOption) (*GetChampionMasteryResponse, error) {
	out := new(GetChampionMasteryResponse)
	err := c.cc.Invoke(ctx, RiotService_GetChampionMastery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riotServiceClient) GetRankedStats(ctx context.Context, in *GetRankedStatsRequest, opts ...grpc.CallOption) (*GetRankedStatsResponse, error) {
	out := new(GetRankedStatsResponse)
	err := c.cc.Invoke(ctx, RiotService_GetRankedStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riotServiceClient) SyncPlayerData(ctx context.Context, in *SyncPlayerDataRequest, opts ...grpc.CallOption) (*SyncPlayerDataResponse, error) {
	out := new(SyncPlayerDataResponse)
	err := c.cc.Invoke(ctx, RiotService_SyncPlayerData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riotServiceClient) GetRateLimit(ctx context.Context, in *GetRateLimitRequest, opts ...grpc.CallOption) (*GetRateLimitResponse, error) {
	out := new(GetRateLimitResponse)
	err := c.cc.Invoke(ctx, RiotService_GetRateLimit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RiotServiceServer is the server API for RiotService service.
// All implementations must embed UnimplementedRiotServiceServer
// for forward compatibility
type RiotServiceServer interface {
	// Get summoner information
	GetSummoner(context.Context, *GetSummonerRequest) (*GetSummonerResponse, error)
	// Get match history for a summoner
	GetMatchHistory(context.Context, *GetMatchHistoryRequest) (*GetMatchHistoryResponse, error)
	// Get detailed match data
	GetMatchData(context.Context, *GetMatchDataRequest) (*GetMatchDataResponse, error)
	// Get live match information
	GetLiveMatch(context.Context, *GetLiveMatchRequest) (*GetLiveMatchResponse, error)
	// Get champion mastery data
	GetChampionMastery(context.Context, *GetChampionMasteryRequest) (*GetChampionMasteryResponse, error)
	// Get ranked information
	GetRankedStats(context.Context, *GetRankedStatsRequest) (*GetRankedStatsResponse, error)
	// Synchronize player data
	SyncPlayerData(context.Context, *SyncPlayerDataRequest) (*SyncPlayerDataResponse, error)
	// Get API rate limit status
	GetRateLimit(context.Context, *GetRateLimitRequest) (*GetRateLimitResponse, error)
	mustEmbedUnimplementedRiotServiceServer()
}

// UnimplementedRiotServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRiotServiceServer struct {
}

func (UnimplementedRiotServiceServer) GetSummoner(context.Context, *GetSummonerRequest) (*GetSummonerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSummoner not implemented")
}
func (UnimplementedRiotServiceServer) GetMatchHistory(context.Context, *GetMatchHistoryRequest) (*GetMatchHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchHistory not implemented")
}
func (UnimplementedRiotServiceServer) GetMatchData(context.Context, *GetMatchDataRequest) (*GetMatchDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchData not implemented")
}
func (UnimplementedRiotServiceServer) GetLiveMatch(context.Context, *GetLiveMatchRequest) (*GetLiveMatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiveMatch not implemented")
}
func (UnimplementedRiotServiceServer) GetChampionMastery(context.Context, *GetChampionMasteryRequest) (*GetChampionMasteryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChampionMastery not implemented")
}
func (UnimplementedRiotServiceServer) GetRankedStats(context.Context, *GetRankedStatsRequest) (*GetRankedStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRankedStats not implemented")
}
func (UnimplementedRiotServiceServer) SyncPlayerData(context.Context, *SyncPlayerDataRequest) (*SyncPlayerDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncPlayerData not implemented")
}
func (UnimplementedRiotServiceServer) GetRateLimit(context.Context, *GetRateLimitRequest) (*GetRateLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRateLimit not implemented")
}
func (UnimplementedRiotServiceServer) mustEmbedUnimplementedRiotServiceServer() {}

// UnsafeRiotServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RiotServiceServer will
// result in compilation errors.
type UnsafeRiotServiceServer interface {
	mustEmbedUnimplementedRiotServiceServer()
}

func RegisterRiotServiceServer(s grpc.ServiceRegistrar, srv RiotServiceServer) {
	s.RegisterService(&RiotService_ServiceDesc, srv)
}

func _RiotService_GetSummoner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSummonerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiotServiceServer).GetSummoner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiotService_GetSummoner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiotServiceServer).GetSummoner(ctx, req.(*GetSummonerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiotService_GetMatchHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMatchHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiotServiceServer).GetMatchHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiotService_GetMatchHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiotServiceServer).GetMatchHistory(ctx, req.(*GetMatchHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiotService_GetMatchData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMatchDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiotServiceServer).GetMatchData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiotService_GetMatchData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiotServiceServer).GetMatchData(ctx, req.(*GetMatchDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiotService_GetLiveMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLiveMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiotServiceServer).GetLiveMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiotService_GetLiveMatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiotServiceServer).GetLiveMatch(ctx, req.(*GetLiveMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiotService_GetChampionMastery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChampionMasteryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiotServiceServer).GetChampionMastery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiotService_GetChampionMastery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiotServiceServer).GetChampionMastery(ctx, req.(*GetChampionMasteryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiotService_GetRankedStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRankedStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiotServiceServer).GetRankedStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiotService_GetRankedStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiotServiceServer).GetRankedStats(ctx, req.(*GetRankedStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiotService_SyncPlayerData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncPlayerDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiotServiceServer).SyncPlayerData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiotService_SyncPlayerData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiotServiceServer).SyncPlayerData(ctx, req.(*SyncPlayerDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiotService_GetRateLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRateLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiotServiceServer).GetRateLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RiotService_GetRateLimit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiotServiceServer).GetRateLimit(ctx, req.(*GetRateLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RiotService_ServiceDesc is the grpc.ServiceDesc for RiotService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RiotService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "herald.riot.v1.RiotService",
	HandlerType: (*RiotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSummoner",
			Handler:    _RiotService_GetSummoner_Handler,
		},
		{
			MethodName: "GetMatchHistory",
			Handler:    _RiotService_GetMatchHistory_Handler,
		},
		{
			MethodName: "GetMatchData",
			Handler:    _RiotService_GetMatchData_Handler,
		},
		{
			MethodName: "GetLiveMatch",
			Handler:    _RiotService_GetLiveMatch_Handler,
		},
		{
			MethodName: "GetChampionMastery",
			Handler:    _RiotService_GetChampionMastery_Handler,
		},
		{
			MethodName: "GetRankedStats",
			Handler:    _RiotService_GetRankedStats_Handler,
		},
		{
			MethodName: "SyncPlayerData",
			Handler:    _RiotService_SyncPlayerData_Handler,
		},
		{
			MethodName: "GetRateLimit",
			Handler:    _RiotService_GetRateLimit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "riot.proto",
}
