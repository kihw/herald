// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.4
// source: riot.proto

package riotv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetSummonerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier     string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`                               // Can be name, PUUID, or summoner ID
	IdentifierType string `protobuf:"bytes,2,opt,name=identifier_type,json=identifierType,proto3" json:"identifier_type,omitempty"` // "name", "puuid", "summoner_id"
	Region         string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *GetSummonerRequest) Reset() {
	*x = GetSummonerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSummonerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSummonerRequest) ProtoMessage() {}

func (x *GetSummonerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_riot_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSummonerRequest.ProtoReflect.Descriptor instead.
func (*GetSummonerRequest) Descriptor() ([]byte, []int) {
	return file_riot_proto_rawDescGZIP(), []int{0}
}

func (x *GetSummonerRequest) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *GetSummonerRequest) GetIdentifierType() string {
	if x != nil {
		return x.IdentifierType
	}
	return ""
}

func (x *GetSummonerRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

type GetSummonerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Summoner *Summoner         `protobuf:"bytes,1,opt,name=summoner,proto3" json:"summoner,omitempty"`
	Metadata *ResponseMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *GetSummonerResponse) Reset() {
	*x = GetSummonerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSummonerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSummonerResponse) ProtoMessage() {}

func (x *GetSummonerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_riot_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSummonerResponse.ProtoReflect.Descriptor instead.
func (*GetSummonerResponse) Descriptor() ([]byte, []int) {
	return file_riot_proto_rawDescGZIP(), []int{1}
}

func (x *GetSummonerResponse) GetSummoner() *Summoner {
	if x != nil {
		return x.Summoner
	}
	return nil
}

func (x *GetSummonerResponse) GetMetadata() *ResponseMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type GetMatchHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Puuid      string                 `protobuf:"bytes,1,opt,name=puuid,proto3" json:"puuid,omitempty"`
	Region     string                 `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	StartIndex *int32                 `protobuf:"varint,3,opt,name=start_index,json=startIndex,proto3,oneof" json:"start_index,omitempty"`
	Count      *int32                 `protobuf:"varint,4,opt,name=count,proto3,oneof" json:"count,omitempty"`
	QueueType  *string                `protobuf:"bytes,5,opt,name=queue_type,json=queueType,proto3,oneof" json:"queue_type,omitempty"`
	StartTime  *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3,oneof" json:"start_time,omitempty"`
	EndTime    *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
}

func (x *GetMatchHistoryRequest) Reset() {
	*x = GetMatchHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMatchHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchHistoryRequest) ProtoMessage() {}

func (x *GetMatchHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_riot_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchHistoryRequest.ProtoReflect.Descriptor instead.
func (*GetMatchHistoryRequest) Descriptor() ([]byte, []int) {
	return file_riot_proto_rawDescGZIP(), []int{2}
}

func (x *GetMatchHistoryRequest) GetPuuid() string {
	if x != nil {
		return x.Puuid
	}
	return ""
}

func (x *GetMatchHistoryRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *GetMatchHistoryRequest) GetStartIndex() int32 {
	if x != nil && x.StartIndex != nil {
		return *x.StartIndex
	}
	return 0
}

func (x *GetMatchHistoryRequest) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *GetMatchHistoryRequest) GetQueueType() string {
	if x != nil && x.QueueType != nil {
		return *x.QueueType
	}
	return ""
}

func (x *GetMatchHistoryRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *GetMatchHistoryRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type GetMatchHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchIds     []string          `protobuf:"bytes,1,rep,name=match_ids,json=matchIds,proto3" json:"match_ids,omitempty"`
	TotalMatches int32             `protobuf:"varint,2,opt,name=total_matches,json=totalMatches,proto3" json:"total_matches,omitempty"`
	Metadata     *ResponseMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *GetMatchHistoryResponse) Reset() {
	*x = GetMatchHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMatchHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchHistoryResponse) ProtoMessage() {}

func (x *GetMatchHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_riot_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchHistoryResponse.ProtoReflect.Descriptor instead.
func (*GetMatchHistoryResponse) Descriptor() ([]byte, []int) {
	return file_riot_proto_rawDescGZIP(), []int{3}
}

func (x *GetMatchHistoryResponse) GetMatchIds() []string {
	if x != nil {
		return x.MatchIds
	}
	return nil
}

func (x *GetMatchHistoryResponse) GetTotalMatches() int32 {
	if x != nil {
		return x.TotalMatches
	}
	return 0
}

func (x *GetMatchHistoryResponse) GetMetadata() *ResponseMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type GetMatchDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId         string `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	Region          string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	IncludeTimeline bool   `protobuf:"varint,3,opt,name=include_timeline,json=includeTimeline,proto3" json:"include_timeline,omitempty"`
}

func (x *GetMatchDataRequest) Reset() {
	*x = GetMatchDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMatchDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchDataRequest) ProtoMessage() {}

func (x *GetMatchDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_riot_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchDataRequest.ProtoReflect.Descriptor instead.
func (*GetMatchDataRequest) Descriptor() ([]byte, []int) {
	return file_riot_proto_rawDescGZIP(), []int{4}
}

func (x *GetMatchDataRequest) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *GetMatchDataRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *GetMatchDataRequest) GetIncludeTimeline() bool {
	if x != nil {
		return x.IncludeTimeline
	}
	return false
}

type GetMatchDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchData *RiotMatchData     `protobuf:"bytes,1,opt,name=match_data,json=matchData,proto3" json:"match_data,omitempty"`
	Timeline  *RiotMatchTimeline `protobuf:"bytes,2,opt,name=timeline,proto3,oneof" json:"timeline,omitempty"`
	Metadata  *ResponseMetadata  `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *GetMatchDataResponse) Reset() {
	*x = GetMatchDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMatchDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchDataResponse) ProtoMessage() {}

func (x *GetMatchDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_riot_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchDataResponse.ProtoReflect.Descriptor instead.
func (*GetMatchDataResponse) Descriptor() ([]byte, []int) {
	return file_riot_proto_rawDescGZIP(), []int{5}
}

func (x *GetMatchDataResponse) GetMatchData() *RiotMatchData {
	if x != nil {
		return x.MatchData
	}
	return nil
}

func (x *GetMatchDataResponse) GetTimeline() *RiotMatchTimeline {
	if x != nil {
		return x.Timeline
	}
	return nil
}

func (x *GetMatchDataResponse) GetMetadata() *ResponseMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type GetLiveMatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SummonerId string `protobuf:"bytes,1,opt,name=summoner_id,json=summonerId,proto3" json:"summoner_id,omitempty"`
	Region     string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *GetLiveMatchRequest) Reset() {
	*x = GetLiveMatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLiveMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLiveMatchRequest) ProtoMessage() {}

func (x *GetLiveMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_riot_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLiveMatchRequest.ProtoReflect.Descriptor instead.
func (*GetLiveMatchRequest) Descriptor() ([]byte, []int) {
	return file_riot_proto_rawDescGZIP(), []int{6}
}

func (x *GetLiveMatchRequest) GetSummonerId() string {
	if x != nil {
		return x.SummonerId
	}
	return ""
}

func (x *GetLiveMatchRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

type GetLiveMatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LiveGame *LiveGameInfo     `protobuf:"bytes,1,opt,name=live_game,json=liveGame,proto3,oneof" json:"live_game,omitempty"`
	IsInGame bool              `protobuf:"varint,2,opt,name=is_in_game,json=isInGame,proto3" json:"is_in_game,omitempty"`
	Metadata *ResponseMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *GetLiveMatchResponse) Reset() {
	*x = GetLiveMatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLiveMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLiveMatchResponse) ProtoMessage() {}

func (x *GetLiveMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_riot_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLiveMatchResponse.ProtoReflect.Descriptor instead.
func (*GetLiveMatchResponse) Descriptor() ([]byte, []int) {
	return file_riot_proto_rawDescGZIP(), []int{7}
}

func (x *GetLiveMatchResponse) GetLiveGame() *LiveGameInfo {
	if x != nil {
		return x.LiveGame
	}
	return nil
}

func (x *GetLiveMatchResponse) GetIsInGame() bool {
	if x != nil {
		return x.IsInGame
	}
	return false
}

func (x *GetLiveMatchResponse) GetMetadata() *ResponseMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type GetChampionMasteryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SummonerId string `protobuf:"bytes,1,opt,name=summoner_id,json=summonerId,proto3" json:"summoner_id,omitempty"`
	Region     string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	ChampionId *int32 `protobuf:"varint,3,opt,name=champion_id,json=championId,proto3,oneof" json:"champion_id,omitempty"` // If not provided, returns all masteries
}

func (x *GetChampionMasteryRequest) Reset() {
	*x = GetChampionMasteryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChampionMasteryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChampionMasteryRequest) ProtoMessage() {}

func (x *GetChampionMasteryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_riot_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChampionMasteryRequest.ProtoReflect.Descriptor instead.
func (*GetChampionMasteryRequest) Descriptor() ([]byte, []int) {
	return file_riot_proto_rawDescGZIP(), []int{8}
}

func (x *GetChampionMasteryRequest) GetSummonerId() string {
	if x != nil {
		return x.SummonerId
	}
	return ""
}

func (x *GetChampionMasteryRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *GetChampionMasteryRequest) GetChampionId() int32 {
	if x != nil && x.ChampionId != nil {
		return *x.ChampionId
	}
	return 0
}

type GetChampionMasteryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Masteries []*ChampionMastery `protobuf:"bytes,1,rep,name=masteries,proto3" json:"masteries,omitempty"`
	Metadata  *ResponseMetadata  `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *GetChampionMasteryResponse) Reset() {
	*x = GetChampionMasteryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChampionMasteryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChampionMasteryResponse) ProtoMessage() {}

func (x *GetChampionMasteryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_riot_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChampionMasteryResponse.ProtoReflect.Descriptor instead.
func (*GetChampionMasteryResponse) Descriptor() ([]byte, []int) {
	return file_riot_proto_rawDescGZIP(), []int{9}
}

func (x *GetChampionMasteryResponse) GetMasteries() []*ChampionMastery {
	if x != nil {
		return x.Masteries
	}
	return nil
}

func (x *GetChampionMasteryResponse) GetMetadata() *ResponseMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type GetRankedStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SummonerId string `protobuf:"bytes,1,opt,name=summoner_id,json=summonerId,proto3" json:"summoner_id,omitempty"`
	Region     string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *GetRankedStatsRequest) Reset() {
	*x = GetRankedStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRankedStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRankedStatsRequest) ProtoMessage() {}

func (x *GetRankedStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_riot_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRankedStatsRequest.ProtoReflect.Descriptor instead.
func (*GetRankedStatsRequest) Descriptor() ([]byte, []int) {
	return file_riot_proto_rawDescGZIP(), []int{10}
}

func (x *GetRankedStatsRequest) GetSummonerId() string {
	if x != nil {
		return x.SummonerId
	}
	return ""
}

func (x *GetRankedStatsRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

type GetRankedStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RankedEntries []*RankedEntry    `protobuf:"bytes,1,rep,name=ranked_entries,json=rankedEntries,proto3" json:"ranked_entries,omitempty"`
	Metadata      *ResponseMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *GetRankedStatsResponse) Reset() {
	*x = GetRankedStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRankedStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRankedStatsResponse) ProtoMessage() {}

func (x *GetRankedStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_riot_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRankedStatsResponse.ProtoReflect.Descriptor instead.
func (*GetRankedStatsResponse) Descriptor() ([]byte, []int) {
	return file_riot_proto_rawDescGZIP(), []int{11}
}

func (x *GetRankedStatsResponse) GetRankedEntries() []*RankedEntry {
	if x != nil {
		return x.RankedEntries
	}
	return nil
}

func (x *GetRankedStatsResponse) GetMetadata() *ResponseMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type SyncPlayerDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SummonerId string       `protobuf:"bytes,1,opt,name=summoner_id,json=summonerId,proto3" json:"summoner_id,omitempty"`
	Region     string       `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	Options    *SyncOptions `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *SyncPlayerDataRequest) Reset() {
	*x = SyncPlayerDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncPlayerDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncPlayerDataRequest) ProtoMessage() {}

func (x *SyncPlayerDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_riot_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncPlayerDataRequest.ProtoReflect.Descriptor instead.
func (*SyncPlayerDataRequest) Descriptor() ([]byte, []int) {
	return file_riot_proto_rawDescGZIP(), []int{12}
}

func (x *SyncPlayerDataRequest) GetSummonerId() string {
	if x != nil {
		return x.SummonerId
	}
	return ""
}

func (x *SyncPlayerDataRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *SyncPlayerDataRequest) GetOptions() *SyncOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type SyncPlayerDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result   *SyncResult       `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Stats    *SyncStats        `protobuf:"bytes,2,opt,name=stats,proto3" json:"stats,omitempty"`
	Metadata *ResponseMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *SyncPlayerDataResponse) Reset() {
	*x = SyncPlayerDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncPlayerDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncPlayerDataResponse) ProtoMessage() {}

func (x *SyncPlayerDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_riot_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncPlayerDataResponse.ProtoReflect.Descriptor instead.
func (*SyncPlayerDataResponse) Descriptor() ([]byte, []int) {
	return file_riot_proto_rawDescGZIP(), []int{13}
}

func (x *SyncPlayerDataResponse) GetResult() *SyncResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *SyncPlayerDataResponse) GetStats() *SyncStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *SyncPlayerDataResponse) GetMetadata() *ResponseMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type GetRateLimitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region     string  `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	ApiKeyType *string `protobuf:"bytes,2,opt,name=api_key_type,json=apiKeyType,proto3,oneof" json:"api_key_type,omitempty"`
}

func (x *GetRateLimitRequest) Reset() {
	*x = GetRateLimitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRateLimitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRateLimitRequest) ProtoMessage() {}

func (x *GetRateLimitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_riot_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRateLimitRequest.ProtoReflect.Descriptor instead.
func (*GetRateLimitRequest) Descriptor() ([]byte, []int) {
	return file_riot_proto_rawDescGZIP(), []int{14}
}

func (x *GetRateLimitRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *GetRateLimitRequest) GetApiKeyType() string {
	if x != nil && x.ApiKeyType != nil {
		return *x.ApiKeyType
	}
	return ""
}

type GetRateLimitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RateLimit *RateLimitInfo     `protobuf:"bytes,1,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
	Buckets   []*RateLimitBucket `protobuf:"bytes,2,rep,name=buckets,proto3" json:"buckets,omitempty"`
	Metadata  *ResponseMetadata  `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *GetRateLimitResponse) Reset() {
	*x = GetRateLimitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRateLimitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRateLimitResponse) ProtoMessage() {}

func (x *GetRateLimitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_riot_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRateLimitResponse.ProtoReflect.Descriptor instead.
func (*GetRateLimitResponse) Descriptor() ([]byte, []int) {
	return file_riot_proto_rawDescGZIP(), []int{15}
}

func (x *GetRateLimitResponse) GetRateLimit() *RateLimitInfo {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

func (x *GetRateLimitResponse) GetBuckets() []*RateLimitBucket {
	if x != nil {
		return x.Buckets
	}
	return nil
}

func (x *GetRateLimitResponse) GetMetadata() *ResponseMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type Summoner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AccountId     string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Puuid         string `protobuf:"bytes,3,opt,name=puuid,proto3" json:"puuid,omitempty"`
	Name          string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	ProfileIconId int32  `protobuf:"varint,5,opt,name=profile_icon_id,json=profileIconId,proto3" json:"profile_icon_id,omitempty"`
	RevisionDate  int64  `protobuf:"varint,6,opt,name=revision_date,json=revisionDate,proto3" json:"revision_date,omitempty"`
	SummonerLevel int32  `protobuf:"varint,7,opt,name=summoner_level,json=summonerLevel,proto3" json:"summoner_level,omitempty"`
	Region        string `protobuf:"bytes,8,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *Summoner) Reset() {
	*x = Summoner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Summoner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Summoner) ProtoMessage() {}

func (x *Summoner) ProtoReflect() protoreflect.Message {
	mi := &file_riot_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Summoner.ProtoReflect.Descriptor instead.
func (*Summoner) Descriptor() ([]byte, []int) {
	return file_riot_proto_rawDescGZIP(), []int{16}
}

func (x *Summoner) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Summoner) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Summoner) GetPuuid() string {
	if x != nil {
		return x.Puuid
	}
	return ""
}

func (x *Summoner) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Summoner) GetProfileIconId() int32 {
	if x != nil {
		return x.ProfileIconId
	}
	return 0
}

func (x *Summoner) GetRevisionDate() int64 {
	if x != nil {
		return x.RevisionDate
	}
	return 0
}

func (x *Summoner) GetSummonerLevel() int32 {
	if x != nil {
		return x.SummonerLevel
	}
	return 0
}

func (x *Summoner) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

type RiotMatchData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *MatchMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Info     *MatchInfo     `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *RiotMatchData) Reset() {
	*x = RiotMatchData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiotMatchData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiotMatchData) ProtoMessage() {}

func (x *RiotMatchData) ProtoReflect() protoreflect.Message {
	mi := &file_riot_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiotMatchData.ProtoReflect.Descriptor instead.
func (*RiotMatchData) Descriptor() ([]byte, []int) {
	return file_riot_proto_rawDescGZIP(), []int{17}
}

func (x *RiotMatchData) GetMetadata() *MatchMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *RiotMatchData) GetInfo() *MatchInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type MatchMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataVersion  string   `protobuf:"bytes,1,opt,name=data_version,json=dataVersion,proto3" json:"data_version,omitempty"`
	MatchId      string   `protobuf:"bytes,2,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	Participants []string `protobuf:"bytes,3,rep,name=participants,proto3" json:"participants,omitempty"` // PUUIDs
}

func (x *MatchMetadata) Reset() {
	*x = MatchMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchMetadata) ProtoMessage() {}

func (x *MatchMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_riot_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchMetadata.ProtoReflect.Descriptor instead.
func (*MatchMetadata) Descriptor() ([]byte, []int) {
	return file_riot_proto_rawDescGZIP(), []int{18}
}

func (x *MatchMetadata) GetDataVersion() string {
	if x != nil {
		return x.DataVersion
	}
	return ""
}

func (x *MatchMetadata) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *MatchMetadata) GetParticipants() []string {
	if x != nil {
		return x.Participants
	}
	return nil
}

type MatchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameCreation       int64              `protobuf:"varint,1,opt,name=game_creation,json=gameCreation,proto3" json:"game_creation,omitempty"`
	GameDuration       int64              `protobuf:"varint,2,opt,name=game_duration,json=gameDuration,proto3" json:"game_duration,omitempty"`
	GameEndTimestamp   int64              `protobuf:"varint,3,opt,name=game_end_timestamp,json=gameEndTimestamp,proto3" json:"game_end_timestamp,omitempty"`
	GameId             int64              `protobuf:"varint,4,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	GameMode           string             `protobuf:"bytes,5,opt,name=game_mode,json=gameMode,proto3" json:"game_mode,omitempty"`
	GameName           string             `protobuf:"bytes,6,opt,name=game_name,json=gameName,proto3" json:"game_name,omitempty"`
	GameStartTimestamp int64              `protobuf:"varint,7,opt,name=game_start_timestamp,json=gameStartTimestamp,proto3" json:"game_start_timestamp,omitempty"`
	GameType           string             `protobuf:"bytes,8,opt,name=game_type,json=gameType,proto3" json:"game_type,omitempty"`
	GameVersion        string             `protobuf:"bytes,9,opt,name=game_version,json=gameVersion,proto3" json:"game_version,omitempty"`
	MapId              int32              `protobuf:"varint,10,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	Participants       []*RiotParticipant `protobuf:"bytes,11,rep,name=participants,proto3" json:"participants,omitempty"`
	PlatformId         string             `protobuf:"bytes,12,opt,name=platform_id,json=platformId,proto3" json:"platform_id,omitempty"`
	QueueId            int32              `protobuf:"varint,13,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
	Teams              []*RiotTeam        `protobuf:"bytes,14,rep,name=teams,proto3" json:"teams,omitempty"`
	TournamentCode     string             `protobuf:"bytes,15,opt,name=tournament_code,json=tournamentCode,proto3" json:"tournament_code,omitempty"`
}

func (x *MatchInfo) Reset() {
	*x = MatchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchInfo) ProtoMessage() {}

func (x *MatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_riot_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchInfo.ProtoReflect.Descriptor instead.
func (*MatchInfo) Descriptor() ([]byte, []int) {
	return file_riot_proto_rawDescGZIP(), []int{19}
}

func (x *MatchInfo) GetGameCreation() int64 {
	if x != nil {
		return x.GameCreation
	}
	return 0
}

func (x *MatchInfo) GetGameDuration() int64 {
	if x != nil {
		return x.GameDuration
	}
	return 0
}

func (x *MatchInfo) GetGameEndTimestamp() int64 {
	if x != nil {
		return x.GameEndTimestamp
	}
	return 0
}

func (x *MatchInfo) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *MatchInfo) GetGameMode() string {
	if x != nil {
		return x.GameMode
	}
	return ""
}

func (x *MatchInfo) GetGameName() string {
	if x != nil {
		return x.GameName
	}
	return ""
}

func (x *MatchInfo) GetGameStartTimestamp() int64 {
	if x != nil {
		return x.GameStartTimestamp
	}
	return 0
}

func (x *MatchInfo) GetGameType() string {
	if x != nil {
		return x.GameType
	}
	return ""
}

func (x *MatchInfo) GetGameVersion() string {
	if x != nil {
		return x.GameVersion
	}
	return ""
}

func (x *MatchInfo) GetMapId() int32 {
	if x != nil {
		return x.MapId
	}
	return 0
}

func (x *MatchInfo) GetParticipants() []*RiotParticipant {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *MatchInfo) GetPlatformId() string {
	if x != nil {
		return x.PlatformId
	}
	return ""
}

func (x *MatchInfo) GetQueueId() int32 {
	if x != nil {
		return x.QueueId
	}
	return 0
}

func (x *MatchInfo) GetTeams() []*RiotTeam {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *MatchInfo) GetTournamentCode() string {
	if x != nil {
		return x.TournamentCode
	}
	return ""
}

type RiotParticipant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assists                        []int32    `protobuf:"varint,1,rep,packed,name=assists,proto3" json:"assists,omitempty"`
	BaronKills                     int32      `protobuf:"varint,2,opt,name=baron_kills,json=baronKills,proto3" json:"baron_kills,omitempty"`
	BountyLevel                    int32      `protobuf:"varint,3,opt,name=bounty_level,json=bountyLevel,proto3" json:"bounty_level,omitempty"`
	ChampExperience                int32      `protobuf:"varint,4,opt,name=champ_experience,json=champExperience,proto3" json:"champ_experience,omitempty"`
	ChampLevel                     int32      `protobuf:"varint,5,opt,name=champ_level,json=champLevel,proto3" json:"champ_level,omitempty"`
	ChampionId                     int32      `protobuf:"varint,6,opt,name=champion_id,json=championId,proto3" json:"champion_id,omitempty"`
	ChampionName                   string     `protobuf:"bytes,7,opt,name=champion_name,json=championName,proto3" json:"champion_name,omitempty"`
	ChampionTransform              int32      `protobuf:"varint,8,opt,name=champion_transform,json=championTransform,proto3" json:"champion_transform,omitempty"`
	ConsumablesPurchased           int32      `protobuf:"varint,9,opt,name=consumables_purchased,json=consumablesPurchased,proto3" json:"consumables_purchased,omitempty"`
	DamageDealtToBuildings         int32      `protobuf:"varint,10,opt,name=damage_dealt_to_buildings,json=damageDealtToBuildings,proto3" json:"damage_dealt_to_buildings,omitempty"`
	DamageDealtToObjectives        int32      `protobuf:"varint,11,opt,name=damage_dealt_to_objectives,json=damageDealtToObjectives,proto3" json:"damage_dealt_to_objectives,omitempty"`
	DamageDealtToTurrets           int32      `protobuf:"varint,12,opt,name=damage_dealt_to_turrets,json=damageDealtToTurrets,proto3" json:"damage_dealt_to_turrets,omitempty"`
	DamageSelfMitigated            int32      `protobuf:"varint,13,opt,name=damage_self_mitigated,json=damageSelfMitigated,proto3" json:"damage_self_mitigated,omitempty"`
	Deaths                         []int32    `protobuf:"varint,14,rep,packed,name=deaths,proto3" json:"deaths,omitempty"`
	DetectorWardsPlaced            int32      `protobuf:"varint,15,opt,name=detector_wards_placed,json=detectorWardsPlaced,proto3" json:"detector_wards_placed,omitempty"`
	DoubleKills                    int32      `protobuf:"varint,16,opt,name=double_kills,json=doubleKills,proto3" json:"double_kills,omitempty"`
	DragonKills                    int32      `protobuf:"varint,17,opt,name=dragon_kills,json=dragonKills,proto3" json:"dragon_kills,omitempty"`
	EligibleForProgression         bool       `protobuf:"varint,18,opt,name=eligible_for_progression,json=eligibleForProgression,proto3" json:"eligible_for_progression,omitempty"`
	FirstBloodAssist               int32      `protobuf:"varint,19,opt,name=first_blood_assist,json=firstBloodAssist,proto3" json:"first_blood_assist,omitempty"`
	FirstBloodKill                 bool       `protobuf:"varint,20,opt,name=first_blood_kill,json=firstBloodKill,proto3" json:"first_blood_kill,omitempty"`
	FirstTowerAssist               bool       `protobuf:"varint,21,opt,name=first_tower_assist,json=firstTowerAssist,proto3" json:"first_tower_assist,omitempty"`
	FirstTowerKill                 bool       `protobuf:"varint,22,opt,name=first_tower_kill,json=firstTowerKill,proto3" json:"first_tower_kill,omitempty"`
	GameEndedInEarlySurrender      bool       `protobuf:"varint,23,opt,name=game_ended_in_early_surrender,json=gameEndedInEarlySurrender,proto3" json:"game_ended_in_early_surrender,omitempty"`
	GameEndedInSurrender           bool       `protobuf:"varint,24,opt,name=game_ended_in_surrender,json=gameEndedInSurrender,proto3" json:"game_ended_in_surrender,omitempty"`
	GoldEarned                     int32      `protobuf:"varint,25,opt,name=gold_earned,json=goldEarned,proto3" json:"gold_earned,omitempty"`
	GoldSpent                      int32      `protobuf:"varint,26,opt,name=gold_spent,json=goldSpent,proto3" json:"gold_spent,omitempty"`
	IndividualPosition             string     `protobuf:"bytes,27,opt,name=individual_position,json=individualPosition,proto3" json:"individual_position,omitempty"`
	InhibitorKills                 int32      `protobuf:"varint,28,opt,name=inhibitor_kills,json=inhibitorKills,proto3" json:"inhibitor_kills,omitempty"`
	InhibitorTakedowns             int32      `protobuf:"varint,29,opt,name=inhibitor_takedowns,json=inhibitorTakedowns,proto3" json:"inhibitor_takedowns,omitempty"`
	InhibitorsLost                 int32      `protobuf:"varint,30,opt,name=inhibitors_lost,json=inhibitorsLost,proto3" json:"inhibitors_lost,omitempty"`
	Item0                          int32      `protobuf:"varint,31,opt,name=item0,proto3" json:"item0,omitempty"`
	Item1                          int32      `protobuf:"varint,32,opt,name=item1,proto3" json:"item1,omitempty"`
	Item2                          int32      `protobuf:"varint,33,opt,name=item2,proto3" json:"item2,omitempty"`
	Item3                          int32      `protobuf:"varint,34,opt,name=item3,proto3" json:"item3,omitempty"`
	Item4                          int32      `protobuf:"varint,35,opt,name=item4,proto3" json:"item4,omitempty"`
	Item5                          int32      `protobuf:"varint,36,opt,name=item5,proto3" json:"item5,omitempty"`
	Item6                          int32      `protobuf:"varint,37,opt,name=item6,proto3" json:"item6,omitempty"`
	ItemsPurchased                 int32      `protobuf:"varint,38,opt,name=items_purchased,json=itemsPurchased,proto3" json:"items_purchased,omitempty"`
	KillingSprees                  int32      `protobuf:"varint,39,opt,name=killing_sprees,json=killingSprees,proto3" json:"killing_sprees,omitempty"`
	Kills                          []int32    `protobuf:"varint,40,rep,packed,name=kills,proto3" json:"kills,omitempty"`
	Lane                           string     `protobuf:"bytes,41,opt,name=lane,proto3" json:"lane,omitempty"`
	LargestCriticalStrike          int32      `protobuf:"varint,42,opt,name=largest_critical_strike,json=largestCriticalStrike,proto3" json:"largest_critical_strike,omitempty"`
	LargestKillingSpree            int32      `protobuf:"varint,43,opt,name=largest_killing_spree,json=largestKillingSpree,proto3" json:"largest_killing_spree,omitempty"`
	LargestMultiKill               int32      `protobuf:"varint,44,opt,name=largest_multi_kill,json=largestMultiKill,proto3" json:"largest_multi_kill,omitempty"`
	LongestTimeSpentLiving         int32      `protobuf:"varint,45,opt,name=longest_time_spent_living,json=longestTimeSpentLiving,proto3" json:"longest_time_spent_living,omitempty"`
	MagicDamageDealt               int32      `protobuf:"varint,46,opt,name=magic_damage_dealt,json=magicDamageDealt,proto3" json:"magic_damage_dealt,omitempty"`
	MagicDamageDealtToChampions    int32      `protobuf:"varint,47,opt,name=magic_damage_dealt_to_champions,json=magicDamageDealtToChampions,proto3" json:"magic_damage_dealt_to_champions,omitempty"`
	MagicDamageTaken               int32      `protobuf:"varint,48,opt,name=magic_damage_taken,json=magicDamageTaken,proto3" json:"magic_damage_taken,omitempty"`
	NeutralMinionsKilled           int32      `protobuf:"varint,49,opt,name=neutral_minions_killed,json=neutralMinionsKilled,proto3" json:"neutral_minions_killed,omitempty"`
	NexusKills                     int32      `protobuf:"varint,50,opt,name=nexus_kills,json=nexusKills,proto3" json:"nexus_kills,omitempty"`
	NexusTakedowns                 int32      `protobuf:"varint,51,opt,name=nexus_takedowns,json=nexusTakedowns,proto3" json:"nexus_takedowns,omitempty"`
	NexusLost                      int32      `protobuf:"varint,52,opt,name=nexus_lost,json=nexusLost,proto3" json:"nexus_lost,omitempty"`
	ObjectivesStolen               int32      `protobuf:"varint,53,opt,name=objectives_stolen,json=objectivesStolen,proto3" json:"objectives_stolen,omitempty"`
	ObjectivesStolenAssists        int32      `protobuf:"varint,54,opt,name=objectives_stolen_assists,json=objectivesStolenAssists,proto3" json:"objectives_stolen_assists,omitempty"`
	ParticipantId                  int32      `protobuf:"varint,55,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`
	PentaKills                     int32      `protobuf:"varint,56,opt,name=penta_kills,json=pentaKills,proto3" json:"penta_kills,omitempty"`
	Perks                          *PerksData `protobuf:"bytes,57,opt,name=perks,proto3" json:"perks,omitempty"`
	PhysicalDamageDealt            int32      `protobuf:"varint,58,opt,name=physical_damage_dealt,json=physicalDamageDealt,proto3" json:"physical_damage_dealt,omitempty"`
	PhysicalDamageDealtToChampions int32      `protobuf:"varint,59,opt,name=physical_damage_dealt_to_champions,json=physicalDamageDealtToChampions,proto3" json:"physical_damage_dealt_to_champions,omitempty"`
	PhysicalDamageTaken            int32      `protobuf:"varint,60,opt,name=physical_damage_taken,json=physicalDamageTaken,proto3" json:"physical_damage_taken,omitempty"`
	Placement                      int32      `protobuf:"varint,61,opt,name=placement,proto3" json:"placement,omitempty"`
	PlayerAugment1                 int32      `protobuf:"varint,62,opt,name=player_augment1,json=playerAugment1,proto3" json:"player_augment1,omitempty"`
	PlayerAugment2                 int32      `protobuf:"varint,63,opt,name=player_augment2,json=playerAugment2,proto3" json:"player_augment2,omitempty"`
	PlayerAugment3                 int32      `protobuf:"varint,64,opt,name=player_augment3,json=playerAugment3,proto3" json:"player_augment3,omitempty"`
	PlayerAugment4                 int32      `protobuf:"varint,65,opt,name=player_augment4,json=playerAugment4,proto3" json:"player_augment4,omitempty"`
	PlayerSubteamId                int32      `protobuf:"varint,66,opt,name=player_subteam_id,json=playerSubteamId,proto3" json:"player_subteam_id,omitempty"`
	Puuid                          string     `protobuf:"bytes,67,opt,name=puuid,proto3" json:"puuid,omitempty"`
	QuadraKills                    int32      `protobuf:"varint,68,opt,name=quadra_kills,json=quadraKills,proto3" json:"quadra_kills,omitempty"`
	RiotIdName                     string     `protobuf:"bytes,69,opt,name=riot_id_name,json=riotIdName,proto3" json:"riot_id_name,omitempty"`
	RiotIdTagline                  string     `protobuf:"bytes,70,opt,name=riot_id_tagline,json=riotIdTagline,proto3" json:"riot_id_tagline,omitempty"`
	Role                           string     `protobuf:"bytes,71,opt,name=role,proto3" json:"role,omitempty"`
	SightWardsBoughtInGame         int32      `protobuf:"varint,72,opt,name=sight_wards_bought_in_game,json=sightWardsBoughtInGame,proto3" json:"sight_wards_bought_in_game,omitempty"`
	Spell1Casts                    int32      `protobuf:"varint,73,opt,name=spell1_casts,json=spell1Casts,proto3" json:"spell1_casts,omitempty"`
	Spell2Casts                    int32      `protobuf:"varint,74,opt,name=spell2_casts,json=spell2Casts,proto3" json:"spell2_casts,omitempty"`
	Spell3Casts                    int32      `protobuf:"varint,75,opt,name=spell3_casts,json=spell3Casts,proto3" json:"spell3_casts,omitempty"`
	Spell4Casts                    int32      `protobuf:"varint,76,opt,name=spell4_casts,json=spell4Casts,proto3" json:"spell4_casts,omitempty"`
	Summoner1Casts                 int32      `protobuf:"varint,77,opt,name=summoner1_casts,json=summoner1Casts,proto3" json:"summoner1_casts,omitempty"`
	Summoner1Id                    int32      `protobuf:"varint,78,opt,name=summoner1_id,json=summoner1Id,proto3" json:"summoner1_id,omitempty"`
	Summoner2Casts                 int32      `protobuf:"varint,79,opt,name=summoner2_casts,json=summoner2Casts,proto3" json:"summoner2_casts,omitempty"`
	Summoner2Id                    int32      `protobuf:"varint,80,opt,name=summoner2_id,json=summoner2Id,proto3" json:"summoner2_id,omitempty"`
	SummonerId                     string     `protobuf:"bytes,81,opt,name=summoner_id,json=summonerId,proto3" json:"summoner_id,omitempty"`
	SummonerLevel                  int32      `protobuf:"varint,82,opt,name=summoner_level,json=summonerLevel,proto3" json:"summoner_level,omitempty"`
	SummonerName                   string     `protobuf:"bytes,83,opt,name=summoner_name,json=summonerName,proto3" json:"summoner_name,omitempty"`
	TeamEarlySurrendered           bool       `protobuf:"varint,84,opt,name=team_early_surrendered,json=teamEarlySurrendered,proto3" json:"team_early_surrendered,omitempty"`
	TeamId                         int32      `protobuf:"varint,85,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	TeamPosition                   string     `protobuf:"bytes,86,opt,name=team_position,json=teamPosition,proto3" json:"team_position,omitempty"`
	TimeCCingOthers                int32      `protobuf:"varint,87,opt,name=time_c_cing_others,json=timeCCingOthers,proto3" json:"time_c_cing_others,omitempty"`
	TimePlayed                     int32      `protobuf:"varint,88,opt,name=time_played,json=timePlayed,proto3" json:"time_played,omitempty"`
	TotalDamageDealt               int32      `protobuf:"varint,89,opt,name=total_damage_dealt,json=totalDamageDealt,proto3" json:"total_damage_dealt,omitempty"`
	TotalDamageDealtToChampions    int32      `protobuf:"varint,90,opt,name=total_damage_dealt_to_champions,json=totalDamageDealtToChampions,proto3" json:"total_damage_dealt_to_champions,omitempty"`
	TotalDamageShieldedOnTeammates int32      `protobuf:"varint,91,opt,name=total_damage_shielded_on_teammates,json=totalDamageShieldedOnTeammates,proto3" json:"total_damage_shielded_on_teammates,omitempty"`
	TotalDamageTaken               int32      `protobuf:"varint,92,opt,name=total_damage_taken,json=totalDamageTaken,proto3" json:"total_damage_taken,omitempty"`
	TotalHeal                      int32      `protobuf:"varint,93,opt,name=total_heal,json=totalHeal,proto3" json:"total_heal,omitempty"`
	TotalHealsOnTeammates          int32      `protobuf:"varint,94,opt,name=total_heals_on_teammates,json=totalHealsOnTeammates,proto3" json:"total_heals_on_teammates,omitempty"`
	TotalMinionsKilled             int32      `protobuf:"varint,95,opt,name=total_minions_killed,json=totalMinionsKilled,proto3" json:"total_minions_killed,omitempty"`
	TotalTimeCcDealt               int32      `protobuf:"varint,96,opt,name=total_time_cc_dealt,json=totalTimeCcDealt,proto3" json:"total_time_cc_dealt,omitempty"`
	TotalTimeSpentDead             int32      `protobuf:"varint,97,opt,name=total_time_spent_dead,json=totalTimeSpentDead,proto3" json:"total_time_spent_dead,omitempty"`
	TotalUnitsHealed               int32      `protobuf:"varint,98,opt,name=total_units_healed,json=totalUnitsHealed,proto3" json:"total_units_healed,omitempty"`
	TripleKills                    int32      `protobuf:"varint,99,opt,name=triple_kills,json=tripleKills,proto3" json:"triple_kills,omitempty"`
	TrueDamageDealt                int32      `protobuf:"varint,100,opt,name=true_damage_dealt,json=trueDamageDealt,proto3" json:"true_damage_dealt,omitempty"`
	TrueDamageDealtToChampions     int32      `protobuf:"varint,101,opt,name=true_damage_dealt_to_champions,json=trueDamageDealtToChampions,proto3" json:"true_damage_dealt_to_champions,omitempty"`
	TrueDamageTaken                int32      `protobuf:"varint,102,opt,name=true_damage_taken,json=trueDamageTaken,proto3" json:"true_damage_taken,omitempty"`
	TurretKills                    int32      `protobuf:"varint,103,opt,name=turret_kills,json=turretKills,proto3" json:"turret_kills,omitempty"`
	TurretTakedowns                int32      `protobuf:"varint,104,opt,name=turret_takedowns,json=turretTakedowns,proto3" json:"turret_takedowns,omitempty"`
	TurretsLost                    int32      `protobuf:"varint,105,opt,name=turrets_lost,json=turretsLost,proto3" json:"turrets_lost,omitempty"`
	UnrealKills                    int32      `protobuf:"varint,106,opt,name=unreal_kills,json=unrealKills,proto3" json:"unreal_kills,omitempty"`
	VisionScore                    int32      `protobuf:"varint,107,opt,name=vision_score,json=visionScore,proto3" json:"vision_score,omitempty"`
	VisionWardsBoughtInGame        int32      `protobuf:"varint,108,opt,name=vision_wards_bought_in_game,json=visionWardsBoughtInGame,proto3" json:"vision_wards_bought_in_game,omitempty"`
	WardsKilled                    int32      `protobuf:"varint,109,opt,name=wards_killed,json=wardsKilled,proto3" json:"wards_killed,omitempty"`
	WardsPlaced                    int32      `protobuf:"varint,110,opt,name=wards_placed,json=wardsPlaced,proto3" json:"wards_placed,omitempty"`
	Win                            bool       `protobuf:"varint,111,opt,name=win,proto3" json:"win,omitempty"`
}

func (x *RiotParticipant) Reset() {
	*x = RiotParticipant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiotParticipant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiotParticipant) ProtoMessage() {}

func (x *RiotParticipant) ProtoReflect() protoreflect.Message {
	mi := &file_riot_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiotParticipant.ProtoReflect.Descriptor instead.
func (*RiotParticipant) Descriptor() ([]byte, []int) {
	return file_riot_proto_rawDescGZIP(), []int{20}
}

func (x *RiotParticipant) GetAssists() []int32 {
	if x != nil {
		return x.Assists
	}
	return nil
}

func (x *RiotParticipant) GetBaronKills() int32 {
	if x != nil {
		return x.BaronKills
	}
	return 0
}

func (x *RiotParticipant) GetBountyLevel() int32 {
	if x != nil {
		return x.BountyLevel
	}
	return 0
}

func (x *RiotParticipant) GetChampExperience() int32 {
	if x != nil {
		return x.ChampExperience
	}
	return 0
}

func (x *RiotParticipant) GetChampLevel() int32 {
	if x != nil {
		return x.ChampLevel
	}
	return 0
}

func (x *RiotParticipant) GetChampionId() int32 {
	if x != nil {
		return x.ChampionId
	}
	return 0
}

func (x *RiotParticipant) GetChampionName() string {
	if x != nil {
		return x.ChampionName
	}
	return ""
}

func (x *RiotParticipant) GetChampionTransform() int32 {
	if x != nil {
		return x.ChampionTransform
	}
	return 0
}

func (x *RiotParticipant) GetConsumablesPurchased() int32 {
	if x != nil {
		return x.ConsumablesPurchased
	}
	return 0
}

func (x *RiotParticipant) GetDamageDealtToBuildings() int32 {
	if x != nil {
		return x.DamageDealtToBuildings
	}
	return 0
}

func (x *RiotParticipant) GetDamageDealtToObjectives() int32 {
	if x != nil {
		return x.DamageDealtToObjectives
	}
	return 0
}

func (x *RiotParticipant) GetDamageDealtToTurrets() int32 {
	if x != nil {
		return x.DamageDealtToTurrets
	}
	return 0
}

func (x *RiotParticipant) GetDamageSelfMitigated() int32 {
	if x != nil {
		return x.DamageSelfMitigated
	}
	return 0
}

func (x *RiotParticipant) GetDeaths() []int32 {
	if x != nil {
		return x.Deaths
	}
	return nil
}

func (x *RiotParticipant) GetDetectorWardsPlaced() int32 {
	if x != nil {
		return x.DetectorWardsPlaced
	}
	return 0
}

func (x *RiotParticipant) GetDoubleKills() int32 {
	if x != nil {
		return x.DoubleKills
	}
	return 0
}

func (x *RiotParticipant) GetDragonKills() int32 {
	if x != nil {
		return x.DragonKills
	}
	return 0
}

func (x *RiotParticipant) GetEligibleForProgression() bool {
	if x != nil {
		return x.EligibleForProgression
	}
	return false
}

func (x *RiotParticipant) GetFirstBloodAssist() int32 {
	if x != nil {
		return x.FirstBloodAssist
	}
	return 0
}

func (x *RiotParticipant) GetFirstBloodKill() bool {
	if x != nil {
		return x.FirstBloodKill
	}
	return false
}

func (x *RiotParticipant) GetFirstTowerAssist() bool {
	if x != nil {
		return x.FirstTowerAssist
	}
	return false
}

func (x *RiotParticipant) GetFirstTowerKill() bool {
	if x != nil {
		return x.FirstTowerKill
	}
	return false
}

func (x *RiotParticipant) GetGameEndedInEarlySurrender() bool {
	if x != nil {
		return x.GameEndedInEarlySurrender
	}
	return false
}

func (x *RiotParticipant) GetGameEndedInSurrender() bool {
	if x != nil {
		return x.GameEndedInSurrender
	}
	return false
}

func (x *RiotParticipant) GetGoldEarned() int32 {
	if x != nil {
		return x.GoldEarned
	}
	return 0
}

func (x *RiotParticipant) GetGoldSpent() int32 {
	if x != nil {
		return x.GoldSpent
	}
	return 0
}

func (x *RiotParticipant) GetIndividualPosition() string {
	if x != nil {
		return x.IndividualPosition
	}
	return ""
}

func (x *RiotParticipant) GetInhibitorKills() int32 {
	if x != nil {
		return x.InhibitorKills
	}
	return 0
}

func (x *RiotParticipant) GetInhibitorTakedowns() int32 {
	if x != nil {
		return x.InhibitorTakedowns
	}
	return 0
}

func (x *RiotParticipant) GetInhibitorsLost() int32 {
	if x != nil {
		return x.InhibitorsLost
	}
	return 0
}

func (x *RiotParticipant) GetItem0() int32 {
	if x != nil {
		return x.Item0
	}
	return 0
}

func (x *RiotParticipant) GetItem1() int32 {
	if x != nil {
		return x.Item1
	}
	return 0
}

func (x *RiotParticipant) GetItem2() int32 {
	if x != nil {
		return x.Item2
	}
	return 0
}

func (x *RiotParticipant) GetItem3() int32 {
	if x != nil {
		return x.Item3
	}
	return 0
}

func (x *RiotParticipant) GetItem4() int32 {
	if x != nil {
		return x.Item4
	}
	return 0
}

func (x *RiotParticipant) GetItem5() int32 {
	if x != nil {
		return x.Item5
	}
	return 0
}

func (x *RiotParticipant) GetItem6() int32 {
	if x != nil {
		return x.Item6
	}
	return 0
}

func (x *RiotParticipant) GetItemsPurchased() int32 {
	if x != nil {
		return x.ItemsPurchased
	}
	return 0
}

func (x *RiotParticipant) GetKillingSprees() int32 {
	if x != nil {
		return x.KillingSprees
	}
	return 0
}

func (x *RiotParticipant) GetKills() []int32 {
	if x != nil {
		return x.Kills
	}
	return nil
}

func (x *RiotParticipant) GetLane() string {
	if x != nil {
		return x.Lane
	}
	return ""
}

func (x *RiotParticipant) GetLargestCriticalStrike() int32 {
	if x != nil {
		return x.LargestCriticalStrike
	}
	return 0
}

func (x *RiotParticipant) GetLargestKillingSpree() int32 {
	if x != nil {
		return x.LargestKillingSpree
	}
	return 0
}

func (x *RiotParticipant) GetLargestMultiKill() int32 {
	if x != nil {
		return x.LargestMultiKill
	}
	return 0
}

func (x *RiotParticipant) GetLongestTimeSpentLiving() int32 {
	if x != nil {
		return x.LongestTimeSpentLiving
	}
	return 0
}

func (x *RiotParticipant) GetMagicDamageDealt() int32 {
	if x != nil {
		return x.MagicDamageDealt
	}
	return 0
}

func (x *RiotParticipant) GetMagicDamageDealtToChampions() int32 {
	if x != nil {
		return x.MagicDamageDealtToChampions
	}
	return 0
}

func (x *RiotParticipant) GetMagicDamageTaken() int32 {
	if x != nil {
		return x.MagicDamageTaken
	}
	return 0
}

func (x *RiotParticipant) GetNeutralMinionsKilled() int32 {
	if x != nil {
		return x.NeutralMinionsKilled
	}
	return 0
}

func (x *RiotParticipant) GetNexusKills() int32 {
	if x != nil {
		return x.NexusKills
	}
	return 0
}

func (x *RiotParticipant) GetNexusTakedowns() int32 {
	if x != nil {
		return x.NexusTakedowns
	}
	return 0
}

func (x *RiotParticipant) GetNexusLost() int32 {
	if x != nil {
		return x.NexusLost
	}
	return 0
}

func (x *RiotParticipant) GetObjectivesStolen() int32 {
	if x != nil {
		return x.ObjectivesStolen
	}
	return 0
}

func (x *RiotParticipant) GetObjectivesStolenAssists() int32 {
	if x != nil {
		return x.ObjectivesStolenAssists
	}
	return 0
}

func (x *RiotParticipant) GetParticipantId() int32 {
	if x != nil {
		return x.ParticipantId
	}
	return 0
}

func (x *RiotParticipant) GetPentaKills() int32 {
	if x != nil {
		return x.PentaKills
	}
	return 0
}

func (x *RiotParticipant) GetPerks() *PerksData {
	if x != nil {
		return x.Perks
	}
	return nil
}

func (x *RiotParticipant) GetPhysicalDamageDealt() int32 {
	if x != nil {
		return x.PhysicalDamageDealt
	}
	return 0
}

func (x *RiotParticipant) GetPhysicalDamageDealtToChampions() int32 {
	if x != nil {
		return x.PhysicalDamageDealtToChampions
	}
	return 0
}

func (x *RiotParticipant) GetPhysicalDamageTaken() int32 {
	if x != nil {
		return x.PhysicalDamageTaken
	}
	return 0
}

func (x *RiotParticipant) GetPlacement() int32 {
	if x != nil {
		return x.Placement
	}
	return 0
}

func (x *RiotParticipant) GetPlayerAugment1() int32 {
	if x != nil {
		return x.PlayerAugment1
	}
	return 0
}

func (x *RiotParticipant) GetPlayerAugment2() int32 {
	if x != nil {
		return x.PlayerAugment2
	}
	return 0
}

func (x *RiotParticipant) GetPlayerAugment3() int32 {
	if x != nil {
		return x.PlayerAugment3
	}
	return 0
}

func (x *RiotParticipant) GetPlayerAugment4() int32 {
	if x != nil {
		return x.PlayerAugment4
	}
	return 0
}

func (x *RiotParticipant) GetPlayerSubteamId() int32 {
	if x != nil {
		return x.PlayerSubteamId
	}
	return 0
}

func (x *RiotParticipant) GetPuuid() string {
	if x != nil {
		return x.Puuid
	}
	return ""
}

func (x *RiotParticipant) GetQuadraKills() int32 {
	if x != nil {
		return x.QuadraKills
	}
	return 0
}

func (x *RiotParticipant) GetRiotIdName() string {
	if x != nil {
		return x.RiotIdName
	}
	return ""
}

func (x *RiotParticipant) GetRiotIdTagline() string {
	if x != nil {
		return x.RiotIdTagline
	}
	return ""
}

func (x *RiotParticipant) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *RiotParticipant) GetSightWardsBoughtInGame() int32 {
	if x != nil {
		return x.SightWardsBoughtInGame
	}
	return 0
}

func (x *RiotParticipant) GetSpell1Casts() int32 {
	if x != nil {
		return x.Spell1Casts
	}
	return 0
}

func (x *RiotParticipant) GetSpell2Casts() int32 {
	if x != nil {
		return x.Spell2Casts
	}
	return 0
}

func (x *RiotParticipant) GetSpell3Casts() int32 {
	if x != nil {
		return x.Spell3Casts
	}
	return 0
}

func (x *RiotParticipant) GetSpell4Casts() int32 {
	if x != nil {
		return x.Spell4Casts
	}
	return 0
}

func (x *RiotParticipant) GetSummoner1Casts() int32 {
	if x != nil {
		return x.Summoner1Casts
	}
	return 0
}

func (x *RiotParticipant) GetSummoner1Id() int32 {
	if x != nil {
		return x.Summoner1Id
	}
	return 0
}

func (x *RiotParticipant) GetSummoner2Casts() int32 {
	if x != nil {
		return x.Summoner2Casts
	}
	return 0
}

func (x *RiotParticipant) GetSummoner2Id() int32 {
	if x != nil {
		return x.Summoner2Id
	}
	return 0
}

func (x *RiotParticipant) GetSummonerId() string {
	if x != nil {
		return x.SummonerId
	}
	return ""
}

func (x *RiotParticipant) GetSummonerLevel() int32 {
	if x != nil {
		return x.SummonerLevel
	}
	return 0
}

func (x *RiotParticipant) GetSummonerName() string {
	if x != nil {
		return x.SummonerName
	}
	return ""
}

func (x *RiotParticipant) GetTeamEarlySurrendered() bool {
	if x != nil {
		return x.TeamEarlySurrendered
	}
	return false
}

func (x *RiotParticipant) GetTeamId() int32 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *RiotParticipant) GetTeamPosition() string {
	if x != nil {
		return x.TeamPosition
	}
	return ""
}

func (x *RiotParticipant) GetTimeCCingOthers() int32 {
	if x != nil {
		return x.TimeCCingOthers
	}
	return 0
}

func (x *RiotParticipant) GetTimePlayed() int32 {
	if x != nil {
		return x.TimePlayed
	}
	return 0
}

func (x *RiotParticipant) GetTotalDamageDealt() int32 {
	if x != nil {
		return x.TotalDamageDealt
	}
	return 0
}

func (x *RiotParticipant) GetTotalDamageDealtToChampions() int32 {
	if x != nil {
		return x.TotalDamageDealtToChampions
	}
	return 0
}

func (x *RiotParticipant) GetTotalDamageShieldedOnTeammates() int32 {
	if x != nil {
		return x.TotalDamageShieldedOnTeammates
	}
	return 0
}

func (x *RiotParticipant) GetTotalDamageTaken() int32 {
	if x != nil {
		return x.TotalDamageTaken
	}
	return 0
}

func (x *RiotParticipant) GetTotalHeal() int32 {
	if x != nil {
		return x.TotalHeal
	}
	return 0
}

func (x *RiotParticipant) GetTotalHealsOnTeammates() int32 {
	if x != nil {
		return x.TotalHealsOnTeammates
	}
	return 0
}

func (x *RiotParticipant) GetTotalMinionsKilled() int32 {
	if x != nil {
		return x.TotalMinionsKilled
	}
	return 0
}

func (x *RiotParticipant) GetTotalTimeCcDealt() int32 {
	if x != nil {
		return x.TotalTimeCcDealt
	}
	return 0
}

func (x *RiotParticipant) GetTotalTimeSpentDead() int32 {
	if x != nil {
		return x.TotalTimeSpentDead
	}
	return 0
}

func (x *RiotParticipant) GetTotalUnitsHealed() int32 {
	if x != nil {
		return x.TotalUnitsHealed
	}
	return 0
}

func (x *RiotParticipant) GetTripleKills() int32 {
	if x != nil {
		return x.TripleKills
	}
	return 0
}

func (x *RiotParticipant) GetTrueDamageDealt() int32 {
	if x != nil {
		return x.TrueDamageDealt
	}
	return 0
}

func (x *RiotParticipant) GetTrueDamageDealtToChampions() int32 {
	if x != nil {
		return x.TrueDamageDealtToChampions
	}
	return 0
}

func (x *RiotParticipant) GetTrueDamageTaken() int32 {
	if x != nil {
		return x.TrueDamageTaken
	}
	return 0
}

func (x *RiotParticipant) GetTurretKills() int32 {
	if x != nil {
		return x.TurretKills
	}
	return 0
}

func (x *RiotParticipant) GetTurretTakedowns() int32 {
	if x != nil {
		return x.TurretTakedowns
	}
	return 0
}

func (x *RiotParticipant) GetTurretsLost() int32 {
	if x != nil {
		return x.TurretsLost
	}
	return 0
}

func (x *RiotParticipant) GetUnrealKills() int32 {
	if x != nil {
		return x.UnrealKills
	}
	return 0
}

func (x *RiotParticipant) GetVisionScore() int32 {
	if x != nil {
		return x.VisionScore
	}
	return 0
}

func (x *RiotParticipant) GetVisionWardsBoughtInGame() int32 {
	if x != nil {
		return x.VisionWardsBoughtInGame
	}
	return 0
}

func (x *RiotParticipant) GetWardsKilled() int32 {
	if x != nil {
		return x.WardsKilled
	}
	return 0
}

func (x *RiotParticipant) GetWardsPlaced() int32 {
	if x != nil {
		return x.WardsPlaced
	}
	return 0
}

func (x *RiotParticipant) GetWin() bool {
	if x != nil {
		return x.Win
	}
	return false
}

type PerksData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatPerks *PerkStats   `protobuf:"bytes,1,opt,name=stat_perks,json=statPerks,proto3" json:"stat_perks,omitempty"`
	Styles    []*PerkStyle `protobuf:"bytes,2,rep,name=styles,proto3" json:"styles,omitempty"`
}

func (x *PerksData) Reset() {
	*x = PerksData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerksData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerksData) ProtoMessage() {}

func (x *PerksData) ProtoReflect() protoreflect.Message {
	mi := &file_riot_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerksData.ProtoReflect.Descriptor instead.
func (*PerksData) Descriptor() ([]byte, []int) {
	return file_riot_proto_rawDescGZIP(), []int{21}
}

func (x *PerksData) GetStatPerks() *PerkStats {
	if x != nil {
		return x.StatPerks
	}
	return nil
}

func (x *PerksData) GetStyles() []*PerkStyle {
	if x != nil {
		return x.Styles
	}
	return nil
}

type PerkStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Defense int32 `protobuf:"varint,1,opt,name=defense,proto3" json:"defense,omitempty"`
	Flex    int32 `protobuf:"varint,2,opt,name=flex,proto3" json:"flex,omitempty"`
	Offense int32 `protobuf:"varint,3,opt,name=offense,proto3" json:"offense,omitempty"`
}

func (x *PerkStats) Reset() {
	*x = PerkStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerkStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerkStats) ProtoMessage() {}

func (x *PerkStats) ProtoReflect() protoreflect.Message {
	mi := &file_riot_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerkStats.ProtoReflect.Descriptor instead.
func (*PerkStats) Descriptor() ([]byte, []int) {
	return file_riot_proto_rawDescGZIP(), []int{22}
}

func (x *PerkStats) GetDefense() int32 {
	if x != nil {
		return x.Defense
	}
	return 0
}

func (x *PerkStats) GetFlex() int32 {
	if x != nil {
		return x.Flex
	}
	return 0
}

func (x *PerkStats) GetOffense() int32 {
	if x != nil {
		return x.Offense
	}
	return 0
}

type PerkStyle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string           `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Selections  []*PerkSelection `protobuf:"bytes,2,rep,name=selections,proto3" json:"selections,omitempty"`
	Style       int32            `protobuf:"varint,3,opt,name=style,proto3" json:"style,omitempty"`
}

func (x *PerkStyle) Reset() {
	*x = PerkStyle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerkStyle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerkStyle) ProtoMessage() {}

func (x *PerkStyle) ProtoReflect() protoreflect.Message {
	mi := &file_riot_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerkStyle.ProtoReflect.Descriptor instead.
func (*PerkStyle) Descriptor() ([]byte, []int) {
	return file_riot_proto_rawDescGZIP(), []int{23}
}

func (x *PerkStyle) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PerkStyle) GetSelections() []*PerkSelection {
	if x != nil {
		return x.Selections
	}
	return nil
}

func (x *PerkStyle) GetStyle() int32 {
	if x != nil {
		return x.Style
	}
	return 0
}

type PerkSelection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Perk int32 `protobuf:"varint,1,opt,name=perk,proto3" json:"perk,omitempty"`
	Var1 int32 `protobuf:"varint,2,opt,name=var1,proto3" json:"var1,omitempty"`
	Var2 int32 `protobuf:"varint,3,opt,name=var2,proto3" json:"var2,omitempty"`
	Var3 int32 `protobuf:"varint,4,opt,name=var3,proto3" json:"var3,omitempty"`
}

func (x *PerkSelection) Reset() {
	*x = PerkSelection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerkSelection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerkSelection) ProtoMessage() {}

func (x *PerkSelection) ProtoReflect() protoreflect.Message {
	mi := &file_riot_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerkSelection.ProtoReflect.Descriptor instead.
func (*PerkSelection) Descriptor() ([]byte, []int) {
	return file_riot_proto_rawDescGZIP(), []int{24}
}

func (x *PerkSelection) GetPerk() int32 {
	if x != nil {
		return x.Perk
	}
	return 0
}

func (x *PerkSelection) GetVar1() int32 {
	if x != nil {
		return x.Var1
	}
	return 0
}

func (x *PerkSelection) GetVar2() int32 {
	if x != nil {
		return x.Var2
	}
	return 0
}

func (x *PerkSelection) GetVar3() int32 {
	if x != nil {
		return x.Var3
	}
	return 0
}

type RiotTeam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bans       []*BanData      `protobuf:"bytes,1,rep,name=bans,proto3" json:"bans,omitempty"`
	Objectives *RiotObjectives `protobuf:"bytes,2,opt,name=objectives,proto3" json:"objectives,omitempty"`
	TeamId     int32           `protobuf:"varint,3,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	Win        bool            `protobuf:"varint,4,opt,name=win,proto3" json:"win,omitempty"`
}

func (x *RiotTeam) Reset() {
	*x = RiotTeam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiotTeam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiotTeam) ProtoMessage() {}

func (x *RiotTeam) ProtoReflect() protoreflect.Message {
	mi := &file_riot_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiotTeam.ProtoReflect.Descriptor instead.
func (*RiotTeam) Descriptor() ([]byte, []int) {
	return file_riot_proto_rawDescGZIP(), []int{25}
}

func (x *RiotTeam) GetBans() []*BanData {
	if x != nil {
		return x.Bans
	}
	return nil
}

func (x *RiotTeam) GetObjectives() *RiotObjectives {
	if x != nil {
		return x.Objectives
	}
	return nil
}

func (x *RiotTeam) GetTeamId() int32 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *RiotTeam) GetWin() bool {
	if x != nil {
		return x.Win
	}
	return false
}

type BanData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChampionId int32 `protobuf:"varint,1,opt,name=champion_id,json=championId,proto3" json:"champion_id,omitempty"`
	PickTurn   int32 `protobuf:"varint,2,opt,name=pick_turn,json=pickTurn,proto3" json:"pick_turn,omitempty"`
}

func (x *BanData) Reset() {
	*x = BanData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BanData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BanData) ProtoMessage() {}

func (x *BanData) ProtoReflect() protoreflect.Message {
	mi := &file_riot_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BanData.ProtoReflect.Descriptor instead.
func (*BanData) Descriptor() ([]byte, []int) {
	return file_riot_proto_rawDescGZIP(), []int{26}
}

func (x *BanData) GetChampionId() int32 {
	if x != nil {
		return x.ChampionId
	}
	return 0
}

func (x *BanData) GetPickTurn() int32 {
	if x != nil {
		return x.PickTurn
	}
	return 0
}

type RiotObjectives struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Baron      *ObjectiveData `protobuf:"bytes,1,opt,name=baron,proto3" json:"baron,omitempty"`
	Champion   *ObjectiveData `protobuf:"bytes,2,opt,name=champion,proto3" json:"champion,omitempty"`
	Dragon     *ObjectiveData `protobuf:"bytes,3,opt,name=dragon,proto3" json:"dragon,omitempty"`
	Inhibitor  *ObjectiveData `protobuf:"bytes,4,opt,name=inhibitor,proto3" json:"inhibitor,omitempty"`
	RiftHerald *ObjectiveData `protobuf:"bytes,5,opt,name=rift_herald,json=riftHerald,proto3" json:"rift_herald,omitempty"`
	Tower      *ObjectiveData `protobuf:"bytes,6,opt,name=tower,proto3" json:"tower,omitempty"`
}

func (x *RiotObjectives) Reset() {
	*x = RiotObjectives{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiotObjectives) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiotObjectives) ProtoMessage() {}

func (x *RiotObjectives) ProtoReflect() protoreflect.Message {
	mi := &file_riot_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiotObjectives.ProtoReflect.Descriptor instead.
func (*RiotObjectives) Descriptor() ([]byte, []int) {
	return file_riot_proto_rawDescGZIP(), []int{27}
}

func (x *RiotObjectives) GetBaron() *ObjectiveData {
	if x != nil {
		return x.Baron
	}
	return nil
}

func (x *RiotObjectives) GetChampion() *ObjectiveData {
	if x != nil {
		return x.Champion
	}
	return nil
}

func (x *RiotObjectives) GetDragon() *ObjectiveData {
	if x != nil {
		return x.Dragon
	}
	return nil
}

func (x *RiotObjectives) GetInhibitor() *ObjectiveData {
	if x != nil {
		return x.Inhibitor
	}
	return nil
}

func (x *RiotObjectives) GetRiftHerald() *ObjectiveData {
	if x != nil {
		return x.RiftHerald
	}
	return nil
}

func (x *RiotObjectives) GetTower() *ObjectiveData {
	if x != nil {
		return x.Tower
	}
	return nil
}

type ObjectiveData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	First bool  `protobuf:"varint,1,opt,name=first,proto3" json:"first,omitempty"`
	Kills int32 `protobuf:"varint,2,opt,name=kills,proto3" json:"kills,omitempty"`
}

func (x *ObjectiveData) Reset() {
	*x = ObjectiveData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectiveData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectiveData) ProtoMessage() {}

func (x *ObjectiveData) ProtoReflect() protoreflect.Message {
	mi := &file_riot_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectiveData.ProtoReflect.Descriptor instead.
func (*ObjectiveData) Descriptor() ([]byte, []int) {
	return file_riot_proto_rawDescGZIP(), []int{28}
}

func (x *ObjectiveData) GetFirst() bool {
	if x != nil {
		return x.First
	}
	return false
}

func (x *ObjectiveData) GetKills() int32 {
	if x != nil {
		return x.Kills
	}
	return 0
}

type RiotMatchTimeline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *MatchTimelineMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Info     *MatchTimelineInfo     `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *RiotMatchTimeline) Reset() {
	*x = RiotMatchTimeline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RiotMatchTimeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RiotMatchTimeline) ProtoMessage() {}

func (x *RiotMatchTimeline) ProtoReflect() protoreflect.Message {
	mi := &file_riot_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RiotMatchTimeline.ProtoReflect.Descriptor instead.
func (*RiotMatchTimeline) Descriptor() ([]byte, []int) {
	return file_riot_proto_rawDescGZIP(), []int{29}
}

func (x *RiotMatchTimeline) GetMetadata() *MatchTimelineMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *RiotMatchTimeline) GetInfo() *MatchTimelineInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type MatchTimelineMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataVersion  string   `protobuf:"bytes,1,opt,name=data_version,json=dataVersion,proto3" json:"data_version,omitempty"`
	MatchId      string   `protobuf:"bytes,2,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	Participants []string `protobuf:"bytes,3,rep,name=participants,proto3" json:"participants,omitempty"`
}

func (x *MatchTimelineMetadata) Reset() {
	*x = MatchTimelineMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchTimelineMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchTimelineMetadata) ProtoMessage() {}

func (x *MatchTimelineMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_riot_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchTimelineMetadata.ProtoReflect.Descriptor instead.
func (*MatchTimelineMetadata) Descriptor() ([]byte, []int) {
	return file_riot_proto_rawDescGZIP(), []int{30}
}

func (x *MatchTimelineMetadata) GetDataVersion() string {
	if x != nil {
		return x.DataVersion
	}
	return ""
}

func (x *MatchTimelineMetadata) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *MatchTimelineMetadata) GetParticipants() []string {
	if x != nil {
		return x.Participants
	}
	return nil
}

type MatchTimelineInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FrameInterval int64            `protobuf:"varint,1,opt,name=frame_interval,json=frameInterval,proto3" json:"frame_interval,omitempty"`
	Frames        []*TimelineFrame `protobuf:"bytes,2,rep,name=frames,proto3" json:"frames,omitempty"`
	GameId        int64            `protobuf:"varint,3,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	Participants  []string         `protobuf:"bytes,4,rep,name=participants,proto3" json:"participants,omitempty"`
}

func (x *MatchTimelineInfo) Reset() {
	*x = MatchTimelineInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchTimelineInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchTimelineInfo) ProtoMessage() {}

func (x *MatchTimelineInfo) ProtoReflect() protoreflect.Message {
	mi := &file_riot_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchTimelineInfo.ProtoReflect.Descriptor instead.
func (*MatchTimelineInfo) Descriptor() ([]byte, []int) {
	return file_riot_proto_rawDescGZIP(), []int{31}
}

func (x *MatchTimelineInfo) GetFrameInterval() int64 {
	if x != nil {
		return x.FrameInterval
	}
	return 0
}

func (x *MatchTimelineInfo) GetFrames() []*TimelineFrame {
	if x != nil {
		return x.Frames
	}
	return nil
}

func (x *MatchTimelineInfo) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *MatchTimelineInfo) GetParticipants() []string {
	if x != nil {
		return x.Participants
	}
	return nil
}

type TimelineFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events            []*TimelineEvent            `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	ParticipantFrames []*TimelineParticipantFrame `protobuf:"bytes,2,rep,name=participant_frames,json=participantFrames,proto3" json:"participant_frames,omitempty"`
	Timestamp         int32                       `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *TimelineFrame) Reset() {
	*x = TimelineFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimelineFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimelineFrame) ProtoMessage() {}

func (x *TimelineFrame) ProtoReflect() protoreflect.Message {
	mi := &file_riot_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimelineFrame.ProtoReflect.Descriptor instead.
func (*TimelineFrame) Descriptor() ([]byte, []int) {
	return file_riot_proto_rawDescGZIP(), []int{32}
}

func (x *TimelineFrame) GetEvents() []*TimelineEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *TimelineFrame) GetParticipantFrames() []*TimelineParticipantFrame {
	if x != nil {
		return x.ParticipantFrames
	}
	return nil
}

func (x *TimelineFrame) GetTimestamp() int32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type TimelineEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp int32             `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Type      string            `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	EventData map[string]string `protobuf:"bytes,3,rep,name=event_data,json=eventData,proto3" json:"event_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TimelineEvent) Reset() {
	*x = TimelineEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimelineEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimelineEvent) ProtoMessage() {}

func (x *TimelineEvent) ProtoReflect() protoreflect.Message {
	mi := &file_riot_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimelineEvent.ProtoReflect.Descriptor instead.
func (*TimelineEvent) Descriptor() ([]byte, []int) {
	return file_riot_proto_rawDescGZIP(), []int{33}
}

func (x *TimelineEvent) GetTimestamp() int32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *TimelineEvent) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TimelineEvent) GetEventData() map[string]string {
	if x != nil {
		return x.EventData
	}
	return nil
}

type TimelineParticipantFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChampionStats            int32             `protobuf:"varint,1,opt,name=champion_stats,json=championStats,proto3" json:"champion_stats,omitempty"`
	CurrentGold              int32             `protobuf:"varint,2,opt,name=current_gold,json=currentGold,proto3" json:"current_gold,omitempty"`
	DamageStats              int32             `protobuf:"varint,3,opt,name=damage_stats,json=damageStats,proto3" json:"damage_stats,omitempty"`
	GoldPerSecond            int32             `protobuf:"varint,4,opt,name=gold_per_second,json=goldPerSecond,proto3" json:"gold_per_second,omitempty"`
	JungleMinionsKilled      int32             `protobuf:"varint,5,opt,name=jungle_minions_killed,json=jungleMinionsKilled,proto3" json:"jungle_minions_killed,omitempty"`
	Level                    int32             `protobuf:"varint,6,opt,name=level,proto3" json:"level,omitempty"`
	MinionsKilled            int32             `protobuf:"varint,7,opt,name=minions_killed,json=minionsKilled,proto3" json:"minions_killed,omitempty"`
	ParticipantId            int32             `protobuf:"varint,8,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`
	Position                 *TimelinePosition `protobuf:"bytes,9,opt,name=position,proto3" json:"position,omitempty"`
	TimeEnemySpentControlled int32             `protobuf:"varint,10,opt,name=time_enemy_spent_controlled,json=timeEnemySpentControlled,proto3" json:"time_enemy_spent_controlled,omitempty"`
	TotalGold                int32             `protobuf:"varint,11,opt,name=total_gold,json=totalGold,proto3" json:"total_gold,omitempty"`
	Xp                       int32             `protobuf:"varint,12,opt,name=xp,proto3" json:"xp,omitempty"`
}

func (x *TimelineParticipantFrame) Reset() {
	*x = TimelineParticipantFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimelineParticipantFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimelineParticipantFrame) ProtoMessage() {}

func (x *TimelineParticipantFrame) ProtoReflect() protoreflect.Message {
	mi := &file_riot_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimelineParticipantFrame.ProtoReflect.Descriptor instead.
func (*TimelineParticipantFrame) Descriptor() ([]byte, []int) {
	return file_riot_proto_rawDescGZIP(), []int{34}
}

func (x *TimelineParticipantFrame) GetChampionStats() int32 {
	if x != nil {
		return x.ChampionStats
	}
	return 0
}

func (x *TimelineParticipantFrame) GetCurrentGold() int32 {
	if x != nil {
		return x.CurrentGold
	}
	return 0
}

func (x *TimelineParticipantFrame) GetDamageStats() int32 {
	if x != nil {
		return x.DamageStats
	}
	return 0
}

func (x *TimelineParticipantFrame) GetGoldPerSecond() int32 {
	if x != nil {
		return x.GoldPerSecond
	}
	return 0
}

func (x *TimelineParticipantFrame) GetJungleMinionsKilled() int32 {
	if x != nil {
		return x.JungleMinionsKilled
	}
	return 0
}

func (x *TimelineParticipantFrame) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *TimelineParticipantFrame) GetMinionsKilled() int32 {
	if x != nil {
		return x.MinionsKilled
	}
	return 0
}

func (x *TimelineParticipantFrame) GetParticipantId() int32 {
	if x != nil {
		return x.ParticipantId
	}
	return 0
}

func (x *TimelineParticipantFrame) GetPosition() *TimelinePosition {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *TimelineParticipantFrame) GetTimeEnemySpentControlled() int32 {
	if x != nil {
		return x.TimeEnemySpentControlled
	}
	return 0
}

func (x *TimelineParticipantFrame) GetTotalGold() int32 {
	if x != nil {
		return x.TotalGold
	}
	return 0
}

func (x *TimelineParticipantFrame) GetXp() int32 {
	if x != nil {
		return x.Xp
	}
	return 0
}

type TimelinePosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X int32 `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y int32 `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *TimelinePosition) Reset() {
	*x = TimelinePosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimelinePosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimelinePosition) ProtoMessage() {}

func (x *TimelinePosition) ProtoReflect() protoreflect.Message {
	mi := &file_riot_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimelinePosition.ProtoReflect.Descriptor instead.
func (*TimelinePosition) Descriptor() ([]byte, []int) {
	return file_riot_proto_rawDescGZIP(), []int{35}
}

func (x *TimelinePosition) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *TimelinePosition) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

type LiveGameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BannedChampions   []*BannedChampion      `protobuf:"bytes,1,rep,name=banned_champions,json=bannedChampions,proto3" json:"banned_champions,omitempty"`
	GameId            int64                  `protobuf:"varint,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	GameLength        int64                  `protobuf:"varint,3,opt,name=game_length,json=gameLength,proto3" json:"game_length,omitempty"`
	GameMode          string                 `protobuf:"bytes,4,opt,name=game_mode,json=gameMode,proto3" json:"game_mode,omitempty"`
	GameQueueConfigId int64                  `protobuf:"varint,5,opt,name=game_queue_config_id,json=gameQueueConfigId,proto3" json:"game_queue_config_id,omitempty"`
	GameStartTime     int64                  `protobuf:"varint,6,opt,name=game_start_time,json=gameStartTime,proto3" json:"game_start_time,omitempty"`
	GameType          string                 `protobuf:"bytes,7,opt,name=game_type,json=gameType,proto3" json:"game_type,omitempty"`
	MapId             int64                  `protobuf:"varint,8,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	Observers         *LiveGameObserver      `protobuf:"bytes,9,opt,name=observers,proto3" json:"observers,omitempty"`
	Participants      []*LiveGameParticipant `protobuf:"bytes,10,rep,name=participants,proto3" json:"participants,omitempty"`
	PlatformId        string                 `protobuf:"bytes,11,opt,name=platform_id,json=platformId,proto3" json:"platform_id,omitempty"`
}

func (x *LiveGameInfo) Reset() {
	*x = LiveGameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveGameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveGameInfo) ProtoMessage() {}

func (x *LiveGameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_riot_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveGameInfo.ProtoReflect.Descriptor instead.
func (*LiveGameInfo) Descriptor() ([]byte, []int) {
	return file_riot_proto_rawDescGZIP(), []int{36}
}

func (x *LiveGameInfo) GetBannedChampions() []*BannedChampion {
	if x != nil {
		return x.BannedChampions
	}
	return nil
}

func (x *LiveGameInfo) GetGameId() int64 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *LiveGameInfo) GetGameLength() int64 {
	if x != nil {
		return x.GameLength
	}
	return 0
}

func (x *LiveGameInfo) GetGameMode() string {
	if x != nil {
		return x.GameMode
	}
	return ""
}

func (x *LiveGameInfo) GetGameQueueConfigId() int64 {
	if x != nil {
		return x.GameQueueConfigId
	}
	return 0
}

func (x *LiveGameInfo) GetGameStartTime() int64 {
	if x != nil {
		return x.GameStartTime
	}
	return 0
}

func (x *LiveGameInfo) GetGameType() string {
	if x != nil {
		return x.GameType
	}
	return ""
}

func (x *LiveGameInfo) GetMapId() int64 {
	if x != nil {
		return x.MapId
	}
	return 0
}

func (x *LiveGameInfo) GetObservers() *LiveGameObserver {
	if x != nil {
		return x.Observers
	}
	return nil
}

func (x *LiveGameInfo) GetParticipants() []*LiveGameParticipant {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *LiveGameInfo) GetPlatformId() string {
	if x != nil {
		return x.PlatformId
	}
	return ""
}

type BannedChampion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChampionId int32 `protobuf:"varint,1,opt,name=champion_id,json=championId,proto3" json:"champion_id,omitempty"`
	PickTurn   int32 `protobuf:"varint,2,opt,name=pick_turn,json=pickTurn,proto3" json:"pick_turn,omitempty"`
	TeamId     int32 `protobuf:"varint,3,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
}

func (x *BannedChampion) Reset() {
	*x = BannedChampion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BannedChampion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BannedChampion) ProtoMessage() {}

func (x *BannedChampion) ProtoReflect() protoreflect.Message {
	mi := &file_riot_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BannedChampion.ProtoReflect.Descriptor instead.
func (*BannedChampion) Descriptor() ([]byte, []int) {
	return file_riot_proto_rawDescGZIP(), []int{37}
}

func (x *BannedChampion) GetChampionId() int32 {
	if x != nil {
		return x.ChampionId
	}
	return 0
}

func (x *BannedChampion) GetPickTurn() int32 {
	if x != nil {
		return x.PickTurn
	}
	return 0
}

func (x *BannedChampion) GetTeamId() int32 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

type LiveGameObserver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptionKey string `protobuf:"bytes,1,opt,name=encryption_key,json=encryptionKey,proto3" json:"encryption_key,omitempty"`
}

func (x *LiveGameObserver) Reset() {
	*x = LiveGameObserver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveGameObserver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveGameObserver) ProtoMessage() {}

func (x *LiveGameObserver) ProtoReflect() protoreflect.Message {
	mi := &file_riot_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveGameObserver.ProtoReflect.Descriptor instead.
func (*LiveGameObserver) Descriptor() ([]byte, []int) {
	return file_riot_proto_rawDescGZIP(), []int{38}
}

func (x *LiveGameObserver) GetEncryptionKey() string {
	if x != nil {
		return x.EncryptionKey
	}
	return ""
}

type LiveGameParticipant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bot                  bool                   `protobuf:"varint,1,opt,name=bot,proto3" json:"bot,omitempty"`
	ChampionId           int32                  `protobuf:"varint,2,opt,name=champion_id,json=championId,proto3" json:"champion_id,omitempty"`
	CustomizationObjects *LiveGameCustomization `protobuf:"bytes,3,opt,name=customization_objects,json=customizationObjects,proto3" json:"customization_objects,omitempty"`
	GameRunes            []*LiveGameRune        `protobuf:"bytes,4,rep,name=game_runes,json=gameRunes,proto3" json:"game_runes,omitempty"`
	ProfileIconId        int32                  `protobuf:"varint,5,opt,name=profile_icon_id,json=profileIconId,proto3" json:"profile_icon_id,omitempty"`
	Spell1Id             int32                  `protobuf:"varint,6,opt,name=spell1_id,json=spell1Id,proto3" json:"spell1_id,omitempty"`
	Spell2Id             int32                  `protobuf:"varint,7,opt,name=spell2_id,json=spell2Id,proto3" json:"spell2_id,omitempty"`
	SummonerId           string                 `protobuf:"bytes,8,opt,name=summoner_id,json=summonerId,proto3" json:"summoner_id,omitempty"`
	SummonerName         string                 `protobuf:"bytes,9,opt,name=summoner_name,json=summonerName,proto3" json:"summoner_name,omitempty"`
	TeamId               int32                  `protobuf:"varint,10,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
}

func (x *LiveGameParticipant) Reset() {
	*x = LiveGameParticipant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveGameParticipant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveGameParticipant) ProtoMessage() {}

func (x *LiveGameParticipant) ProtoReflect() protoreflect.Message {
	mi := &file_riot_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveGameParticipant.ProtoReflect.Descriptor instead.
func (*LiveGameParticipant) Descriptor() ([]byte, []int) {
	return file_riot_proto_rawDescGZIP(), []int{39}
}

func (x *LiveGameParticipant) GetBot() bool {
	if x != nil {
		return x.Bot
	}
	return false
}

func (x *LiveGameParticipant) GetChampionId() int32 {
	if x != nil {
		return x.ChampionId
	}
	return 0
}

func (x *LiveGameParticipant) GetCustomizationObjects() *LiveGameCustomization {
	if x != nil {
		return x.CustomizationObjects
	}
	return nil
}

func (x *LiveGameParticipant) GetGameRunes() []*LiveGameRune {
	if x != nil {
		return x.GameRunes
	}
	return nil
}

func (x *LiveGameParticipant) GetProfileIconId() int32 {
	if x != nil {
		return x.ProfileIconId
	}
	return 0
}

func (x *LiveGameParticipant) GetSpell1Id() int32 {
	if x != nil {
		return x.Spell1Id
	}
	return 0
}

func (x *LiveGameParticipant) GetSpell2Id() int32 {
	if x != nil {
		return x.Spell2Id
	}
	return 0
}

func (x *LiveGameParticipant) GetSummonerId() string {
	if x != nil {
		return x.SummonerId
	}
	return ""
}

func (x *LiveGameParticipant) GetSummonerName() string {
	if x != nil {
		return x.SummonerName
	}
	return ""
}

func (x *LiveGameParticipant) GetTeamId() int32 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

type LiveGameCustomization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category string `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	Content  string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *LiveGameCustomization) Reset() {
	*x = LiveGameCustomization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveGameCustomization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveGameCustomization) ProtoMessage() {}

func (x *LiveGameCustomization) ProtoReflect() protoreflect.Message {
	mi := &file_riot_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveGameCustomization.ProtoReflect.Descriptor instead.
func (*LiveGameCustomization) Descriptor() ([]byte, []int) {
	return file_riot_proto_rawDescGZIP(), []int{40}
}

func (x *LiveGameCustomization) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *LiveGameCustomization) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type LiveGameRune struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count  int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	RuneId int32 `protobuf:"varint,2,opt,name=rune_id,json=runeId,proto3" json:"rune_id,omitempty"`
}

func (x *LiveGameRune) Reset() {
	*x = LiveGameRune{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveGameRune) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveGameRune) ProtoMessage() {}

func (x *LiveGameRune) ProtoReflect() protoreflect.Message {
	mi := &file_riot_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveGameRune.ProtoReflect.Descriptor instead.
func (*LiveGameRune) Descriptor() ([]byte, []int) {
	return file_riot_proto_rawDescGZIP(), []int{41}
}

func (x *LiveGameRune) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *LiveGameRune) GetRuneId() int32 {
	if x != nil {
		return x.RuneId
	}
	return 0
}

type ChampionMastery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChampionId                   int32  `protobuf:"varint,1,opt,name=champion_id,json=championId,proto3" json:"champion_id,omitempty"`
	ChampionLevel                int32  `protobuf:"varint,2,opt,name=champion_level,json=championLevel,proto3" json:"champion_level,omitempty"`
	ChampionPoints               int32  `protobuf:"varint,3,opt,name=champion_points,json=championPoints,proto3" json:"champion_points,omitempty"`
	ChampionPointsSinceLastLevel int64  `protobuf:"varint,4,opt,name=champion_points_since_last_level,json=championPointsSinceLastLevel,proto3" json:"champion_points_since_last_level,omitempty"`
	ChampionPointsUntilNextLevel int64  `protobuf:"varint,5,opt,name=champion_points_until_next_level,json=championPointsUntilNextLevel,proto3" json:"champion_points_until_next_level,omitempty"`
	ChestGranted                 bool   `protobuf:"varint,6,opt,name=chest_granted,json=chestGranted,proto3" json:"chest_granted,omitempty"`
	LastPlayTime                 int64  `protobuf:"varint,7,opt,name=last_play_time,json=lastPlayTime,proto3" json:"last_play_time,omitempty"`
	SummonerId                   string `protobuf:"bytes,8,opt,name=summoner_id,json=summonerId,proto3" json:"summoner_id,omitempty"`
	TokensEarned                 int32  `protobuf:"varint,9,opt,name=tokens_earned,json=tokensEarned,proto3" json:"tokens_earned,omitempty"`
}

func (x *ChampionMastery) Reset() {
	*x = ChampionMastery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChampionMastery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChampionMastery) ProtoMessage() {}

func (x *ChampionMastery) ProtoReflect() protoreflect.Message {
	mi := &file_riot_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChampionMastery.ProtoReflect.Descriptor instead.
func (*ChampionMastery) Descriptor() ([]byte, []int) {
	return file_riot_proto_rawDescGZIP(), []int{42}
}

func (x *ChampionMastery) GetChampionId() int32 {
	if x != nil {
		return x.ChampionId
	}
	return 0
}

func (x *ChampionMastery) GetChampionLevel() int32 {
	if x != nil {
		return x.ChampionLevel
	}
	return 0
}

func (x *ChampionMastery) GetChampionPoints() int32 {
	if x != nil {
		return x.ChampionPoints
	}
	return 0
}

func (x *ChampionMastery) GetChampionPointsSinceLastLevel() int64 {
	if x != nil {
		return x.ChampionPointsSinceLastLevel
	}
	return 0
}

func (x *ChampionMastery) GetChampionPointsUntilNextLevel() int64 {
	if x != nil {
		return x.ChampionPointsUntilNextLevel
	}
	return 0
}

func (x *ChampionMastery) GetChestGranted() bool {
	if x != nil {
		return x.ChestGranted
	}
	return false
}

func (x *ChampionMastery) GetLastPlayTime() int64 {
	if x != nil {
		return x.LastPlayTime
	}
	return 0
}

func (x *ChampionMastery) GetSummonerId() string {
	if x != nil {
		return x.SummonerId
	}
	return ""
}

func (x *ChampionMastery) GetTokensEarned() int32 {
	if x != nil {
		return x.TokensEarned
	}
	return 0
}

type RankedEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LeagueId     string         `protobuf:"bytes,1,opt,name=league_id,json=leagueId,proto3" json:"league_id,omitempty"`
	SummonerId   string         `protobuf:"bytes,2,opt,name=summoner_id,json=summonerId,proto3" json:"summoner_id,omitempty"`
	SummonerName string         `protobuf:"bytes,3,opt,name=summoner_name,json=summonerName,proto3" json:"summoner_name,omitempty"`
	QueueType    string         `protobuf:"bytes,4,opt,name=queue_type,json=queueType,proto3" json:"queue_type,omitempty"`
	Tier         string         `protobuf:"bytes,5,opt,name=tier,proto3" json:"tier,omitempty"`
	Rank         string         `protobuf:"bytes,6,opt,name=rank,proto3" json:"rank,omitempty"`
	LeaguePoints int32          `protobuf:"varint,7,opt,name=league_points,json=leaguePoints,proto3" json:"league_points,omitempty"`
	Wins         int32          `protobuf:"varint,8,opt,name=wins,proto3" json:"wins,omitempty"`
	Losses       int32          `protobuf:"varint,9,opt,name=losses,proto3" json:"losses,omitempty"`
	HotStreak    bool           `protobuf:"varint,10,opt,name=hot_streak,json=hotStreak,proto3" json:"hot_streak,omitempty"`
	Veteran      bool           `protobuf:"varint,11,opt,name=veteran,proto3" json:"veteran,omitempty"`
	FreshBlood   bool           `protobuf:"varint,12,opt,name=fresh_blood,json=freshBlood,proto3" json:"fresh_blood,omitempty"`
	Inactive     bool           `protobuf:"varint,13,opt,name=inactive,proto3" json:"inactive,omitempty"`
	MiniSeries   *MiniSeriesDTO `protobuf:"bytes,14,opt,name=mini_series,json=miniSeries,proto3" json:"mini_series,omitempty"`
}

func (x *RankedEntry) Reset() {
	*x = RankedEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RankedEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RankedEntry) ProtoMessage() {}

func (x *RankedEntry) ProtoReflect() protoreflect.Message {
	mi := &file_riot_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RankedEntry.ProtoReflect.Descriptor instead.
func (*RankedEntry) Descriptor() ([]byte, []int) {
	return file_riot_proto_rawDescGZIP(), []int{43}
}

func (x *RankedEntry) GetLeagueId() string {
	if x != nil {
		return x.LeagueId
	}
	return ""
}

func (x *RankedEntry) GetSummonerId() string {
	if x != nil {
		return x.SummonerId
	}
	return ""
}

func (x *RankedEntry) GetSummonerName() string {
	if x != nil {
		return x.SummonerName
	}
	return ""
}

func (x *RankedEntry) GetQueueType() string {
	if x != nil {
		return x.QueueType
	}
	return ""
}

func (x *RankedEntry) GetTier() string {
	if x != nil {
		return x.Tier
	}
	return ""
}

func (x *RankedEntry) GetRank() string {
	if x != nil {
		return x.Rank
	}
	return ""
}

func (x *RankedEntry) GetLeaguePoints() int32 {
	if x != nil {
		return x.LeaguePoints
	}
	return 0
}

func (x *RankedEntry) GetWins() int32 {
	if x != nil {
		return x.Wins
	}
	return 0
}

func (x *RankedEntry) GetLosses() int32 {
	if x != nil {
		return x.Losses
	}
	return 0
}

func (x *RankedEntry) GetHotStreak() bool {
	if x != nil {
		return x.HotStreak
	}
	return false
}

func (x *RankedEntry) GetVeteran() bool {
	if x != nil {
		return x.Veteran
	}
	return false
}

func (x *RankedEntry) GetFreshBlood() bool {
	if x != nil {
		return x.FreshBlood
	}
	return false
}

func (x *RankedEntry) GetInactive() bool {
	if x != nil {
		return x.Inactive
	}
	return false
}

func (x *RankedEntry) GetMiniSeries() *MiniSeriesDTO {
	if x != nil {
		return x.MiniSeries
	}
	return nil
}

type MiniSeriesDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Losses   int32  `protobuf:"varint,1,opt,name=losses,proto3" json:"losses,omitempty"`
	Progress string `protobuf:"bytes,2,opt,name=progress,proto3" json:"progress,omitempty"`
	Target   int32  `protobuf:"varint,3,opt,name=target,proto3" json:"target,omitempty"`
	Wins     int32  `protobuf:"varint,4,opt,name=wins,proto3" json:"wins,omitempty"`
}

func (x *MiniSeriesDTO) Reset() {
	*x = MiniSeriesDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiniSeriesDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiniSeriesDTO) ProtoMessage() {}

func (x *MiniSeriesDTO) ProtoReflect() protoreflect.Message {
	mi := &file_riot_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiniSeriesDTO.ProtoReflect.Descriptor instead.
func (*MiniSeriesDTO) Descriptor() ([]byte, []int) {
	return file_riot_proto_rawDescGZIP(), []int{44}
}

func (x *MiniSeriesDTO) GetLosses() int32 {
	if x != nil {
		return x.Losses
	}
	return 0
}

func (x *MiniSeriesDTO) GetProgress() string {
	if x != nil {
		return x.Progress
	}
	return ""
}

func (x *MiniSeriesDTO) GetTarget() int32 {
	if x != nil {
		return x.Target
	}
	return 0
}

func (x *MiniSeriesDTO) GetWins() int32 {
	if x != nil {
		return x.Wins
	}
	return 0
}

type SyncOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdateSummonerInfo  bool  `protobuf:"varint,1,opt,name=update_summoner_info,json=updateSummonerInfo,proto3" json:"update_summoner_info,omitempty"`
	SyncMatchHistory    bool  `protobuf:"varint,2,opt,name=sync_match_history,json=syncMatchHistory,proto3" json:"sync_match_history,omitempty"`
	SyncRankedStats     bool  `protobuf:"varint,3,opt,name=sync_ranked_stats,json=syncRankedStats,proto3" json:"sync_ranked_stats,omitempty"`
	SyncChampionMastery bool  `protobuf:"varint,4,opt,name=sync_champion_mastery,json=syncChampionMastery,proto3" json:"sync_champion_mastery,omitempty"`
	MatchHistoryLimit   int32 `protobuf:"varint,5,opt,name=match_history_limit,json=matchHistoryLimit,proto3" json:"match_history_limit,omitempty"`
	ForceRefresh        bool  `protobuf:"varint,6,opt,name=force_refresh,json=forceRefresh,proto3" json:"force_refresh,omitempty"`
}

func (x *SyncOptions) Reset() {
	*x = SyncOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncOptions) ProtoMessage() {}

func (x *SyncOptions) ProtoReflect() protoreflect.Message {
	mi := &file_riot_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncOptions.ProtoReflect.Descriptor instead.
func (*SyncOptions) Descriptor() ([]byte, []int) {
	return file_riot_proto_rawDescGZIP(), []int{45}
}

func (x *SyncOptions) GetUpdateSummonerInfo() bool {
	if x != nil {
		return x.UpdateSummonerInfo
	}
	return false
}

func (x *SyncOptions) GetSyncMatchHistory() bool {
	if x != nil {
		return x.SyncMatchHistory
	}
	return false
}

func (x *SyncOptions) GetSyncRankedStats() bool {
	if x != nil {
		return x.SyncRankedStats
	}
	return false
}

func (x *SyncOptions) GetSyncChampionMastery() bool {
	if x != nil {
		return x.SyncChampionMastery
	}
	return false
}

func (x *SyncOptions) GetMatchHistoryLimit() int32 {
	if x != nil {
		return x.MatchHistoryLimit
	}
	return 0
}

func (x *SyncOptions) GetForceRefresh() bool {
	if x != nil {
		return x.ForceRefresh
	}
	return false
}

type SyncResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success  bool       `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Status   string     `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Warnings []string   `protobuf:"bytes,3,rep,name=warnings,proto3" json:"warnings,omitempty"`
	Errors   []string   `protobuf:"bytes,4,rep,name=errors,proto3" json:"errors,omitempty"`
	Stats    *SyncStats `protobuf:"bytes,5,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *SyncResult) Reset() {
	*x = SyncResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncResult) ProtoMessage() {}

func (x *SyncResult) ProtoReflect() protoreflect.Message {
	mi := &file_riot_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncResult.ProtoReflect.Descriptor instead.
func (*SyncResult) Descriptor() ([]byte, []int) {
	return file_riot_proto_rawDescGZIP(), []int{46}
}

func (x *SyncResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SyncResult) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SyncResult) GetWarnings() []string {
	if x != nil {
		return x.Warnings
	}
	return nil
}

func (x *SyncResult) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *SyncResult) GetStats() *SyncStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type SyncStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchesSynced        int32                  `protobuf:"varint,1,opt,name=matches_synced,json=matchesSynced,proto3" json:"matches_synced,omitempty"`
	MasteriesUpdated     int32                  `protobuf:"varint,2,opt,name=masteries_updated,json=masteriesUpdated,proto3" json:"masteries_updated,omitempty"`
	RankedEntriesUpdated int32                  `protobuf:"varint,3,opt,name=ranked_entries_updated,json=rankedEntriesUpdated,proto3" json:"ranked_entries_updated,omitempty"`
	SyncDuration         *durationpb.Duration   `protobuf:"bytes,4,opt,name=sync_duration,json=syncDuration,proto3" json:"sync_duration,omitempty"`
	LastSync             *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=last_sync,json=lastSync,proto3" json:"last_sync,omitempty"`
	HitRateLimit         bool                   `protobuf:"varint,6,opt,name=hit_rate_limit,json=hitRateLimit,proto3" json:"hit_rate_limit,omitempty"`
}

func (x *SyncStats) Reset() {
	*x = SyncStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncStats) ProtoMessage() {}

func (x *SyncStats) ProtoReflect() protoreflect.Message {
	mi := &file_riot_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncStats.ProtoReflect.Descriptor instead.
func (*SyncStats) Descriptor() ([]byte, []int) {
	return file_riot_proto_rawDescGZIP(), []int{47}
}

func (x *SyncStats) GetMatchesSynced() int32 {
	if x != nil {
		return x.MatchesSynced
	}
	return 0
}

func (x *SyncStats) GetMasteriesUpdated() int32 {
	if x != nil {
		return x.MasteriesUpdated
	}
	return 0
}

func (x *SyncStats) GetRankedEntriesUpdated() int32 {
	if x != nil {
		return x.RankedEntriesUpdated
	}
	return 0
}

func (x *SyncStats) GetSyncDuration() *durationpb.Duration {
	if x != nil {
		return x.SyncDuration
	}
	return nil
}

func (x *SyncStats) GetLastSync() *timestamppb.Timestamp {
	if x != nil {
		return x.LastSync
	}
	return nil
}

func (x *SyncStats) GetHitRateLimit() bool {
	if x != nil {
		return x.HitRateLimit
	}
	return false
}

type RateLimitInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region            string                 `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	ApiType           string                 `protobuf:"bytes,2,opt,name=api_type,json=apiType,proto3" json:"api_type,omitempty"`
	IsLimited         bool                   `protobuf:"varint,3,opt,name=is_limited,json=isLimited,proto3" json:"is_limited,omitempty"`
	ResetTime         *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=reset_time,json=resetTime,proto3" json:"reset_time,omitempty"`
	RemainingRequests int32                  `protobuf:"varint,5,opt,name=remaining_requests,json=remainingRequests,proto3" json:"remaining_requests,omitempty"`
	TotalRequests     int32                  `protobuf:"varint,6,opt,name=total_requests,json=totalRequests,proto3" json:"total_requests,omitempty"`
}

func (x *RateLimitInfo) Reset() {
	*x = RateLimitInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimitInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimitInfo) ProtoMessage() {}

func (x *RateLimitInfo) ProtoReflect() protoreflect.Message {
	mi := &file_riot_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimitInfo.ProtoReflect.Descriptor instead.
func (*RateLimitInfo) Descriptor() ([]byte, []int) {
	return file_riot_proto_rawDescGZIP(), []int{48}
}

func (x *RateLimitInfo) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *RateLimitInfo) GetApiType() string {
	if x != nil {
		return x.ApiType
	}
	return ""
}

func (x *RateLimitInfo) GetIsLimited() bool {
	if x != nil {
		return x.IsLimited
	}
	return false
}

func (x *RateLimitInfo) GetResetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ResetTime
	}
	return nil
}

func (x *RateLimitInfo) GetRemainingRequests() int32 {
	if x != nil {
		return x.RemainingRequests
	}
	return 0
}

func (x *RateLimitInfo) GetTotalRequests() int32 {
	if x != nil {
		return x.TotalRequests
	}
	return 0
}

type RateLimitBucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketType string                 `protobuf:"bytes,1,opt,name=bucket_type,json=bucketType,proto3" json:"bucket_type,omitempty"`
	Limit      int32                  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Remaining  int32                  `protobuf:"varint,3,opt,name=remaining,proto3" json:"remaining,omitempty"`
	ResetTime  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=reset_time,json=resetTime,proto3" json:"reset_time,omitempty"`
	Window     *durationpb.Duration   `protobuf:"bytes,5,opt,name=window,proto3" json:"window,omitempty"`
}

func (x *RateLimitBucket) Reset() {
	*x = RateLimitBucket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimitBucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimitBucket) ProtoMessage() {}

func (x *RateLimitBucket) ProtoReflect() protoreflect.Message {
	mi := &file_riot_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimitBucket.ProtoReflect.Descriptor instead.
func (*RateLimitBucket) Descriptor() ([]byte, []int) {
	return file_riot_proto_rawDescGZIP(), []int{49}
}

func (x *RateLimitBucket) GetBucketType() string {
	if x != nil {
		return x.BucketType
	}
	return ""
}

func (x *RateLimitBucket) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *RateLimitBucket) GetRemaining() int32 {
	if x != nil {
		return x.Remaining
	}
	return 0
}

func (x *RateLimitBucket) GetResetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ResetTime
	}
	return nil
}

func (x *RateLimitBucket) GetWindow() *durationpb.Duration {
	if x != nil {
		return x.Window
	}
	return nil
}

// Common response metadata
type ResponseMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp    *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ResponseTime *durationpb.Duration   `protobuf:"bytes,2,opt,name=response_time,json=responseTime,proto3" json:"response_time,omitempty"`
	Source       string                 `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	FromCache    bool                   `protobuf:"varint,4,opt,name=from_cache,json=fromCache,proto3" json:"from_cache,omitempty"`
	ApiVersion   string                 `protobuf:"bytes,5,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	RateLimit    *RateLimitInfo         `protobuf:"bytes,6,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`
}

func (x *ResponseMetadata) Reset() {
	*x = ResponseMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_riot_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseMetadata) ProtoMessage() {}

func (x *ResponseMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_riot_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseMetadata.ProtoReflect.Descriptor instead.
func (*ResponseMetadata) Descriptor() ([]byte, []int) {
	return file_riot_proto_rawDescGZIP(), []int{50}
}

func (x *ResponseMetadata) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ResponseMetadata) GetResponseTime() *durationpb.Duration {
	if x != nil {
		return x.ResponseTime
	}
	return nil
}

func (x *ResponseMetadata) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *ResponseMetadata) GetFromCache() bool {
	if x != nil {
		return x.FromCache
	}
	return false
}

func (x *ResponseMetadata) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *ResponseMetadata) GetRateLimit() *RateLimitInfo {
	if x != nil {
		return x.RateLimit
	}
	return nil
}

var File_riot_proto protoreflect.FileDescriptor

var file_riot_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x68, 0x65,
	0x72, 0x61, 0x6c, 0x64, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x75, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x22, 0x89, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d,
	0x6f, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x08,
	0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x08, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e,
	0x65, 0x72, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x72, 0x69,
	0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xec, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3e,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x03,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x04, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0x99, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x3c, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x73, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x22, 0xe3, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x69, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x65, 0x72, 0x61,
	0x6c, 0x64, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x6f, 0x74, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x4e, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x76,
	0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0xc0, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4c, 0x69,
	0x76, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3e, 0x0a, 0x09, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x72, 0x69, 0x6f, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x00, 0x52, 0x08, 0x6c, 0x69, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1c, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x6c, 0x69, 0x76, 0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x75, 0x6d, 0x6d, 0x6f,
	0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75,
	0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x24, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x68, 0x61, 0x6d, 0x70,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c,
	0x64, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69,
	0x6f, 0x6e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e,
	0x72, 0x69, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x50, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x22, 0x9a, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x42, 0x0a, 0x0e, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64,
	0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x72,
	0x69, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x87, 0x01, 0x0a, 0x15, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x72,
	0x69, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xbb, 0x01, 0x0a, 0x16,
	0x53, 0x79, 0x6e, 0x63, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e,
	0x72, 0x69, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x65, 0x72, 0x61,
	0x6c, 0x64, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x65, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0c, 0x61, 0x70, 0x69, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0a, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x22, 0xcd, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x72, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x39, 0x0a, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c,
	0x64, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x72, 0x69,
	0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xef, 0x01, 0x0a, 0x08, 0x53, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x75, 0x75,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x75, 0x6d,
	0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x22, 0x79, 0x0a, 0x0d, 0x52, 0x69, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x72,
	0x69, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2d,
	0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68,
	0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x71, 0x0a,
	0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x22, 0xb9, 0x04, 0x0a, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23,
	0x0a, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x67, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x67, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x6d,
	0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x70,
	0x49, 0x64, 0x12, 0x43, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c,
	0x64, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x6f, 0x74, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x72, 0x69, 0x6f, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x6f, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x05, 0x74, 0x65,
	0x61, 0x6d, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x6f,
	0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x99, 0x24, 0x0a,
	0x0f, 0x52, 0x69, 0x6f, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61,
	0x72, 0x6f, 0x6e, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x62, 0x61, 0x72, 0x6f, 0x6e, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x62,
	0x6f, 0x75, 0x6e, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x62, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x29,
	0x0a, 0x10, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61,
	0x6d, 0x70, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x63, 0x68, 0x61, 0x6d, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68,
	0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2d, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x63, 0x68,
	0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x12,
	0x33, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x70,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64,
	0x65, 0x61, 0x6c, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44,
	0x65, 0x61, 0x6c, 0x74, 0x54, 0x6f, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x3b, 0x0a, 0x1a, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x74, 0x5f,
	0x74, 0x6f, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x17, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74,
	0x54, 0x6f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x17,
	0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x74, 0x5f, 0x74, 0x6f, 0x5f,
	0x74, 0x75, 0x72, 0x72, 0x65, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x64,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x54, 0x6f, 0x54, 0x75, 0x72, 0x72,
	0x65, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65,
	0x6c, 0x66, 0x5f, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x13, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6c, 0x66, 0x4d, 0x69,
	0x74, 0x69, 0x67, 0x61, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68,
	0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x12,
	0x32, 0x0a, 0x15, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13,
	0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x57, 0x61, 0x72, 0x64, 0x73, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x6b, 0x69,
	0x6c, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e,
	0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x72,
	0x61, 0x67, 0x6f, 0x6e, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x65, 0x6c, 0x69,
	0x67, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x65, 0x6c, 0x69,
	0x67, 0x69, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f,
	0x6f, 0x64, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x41, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x6f, 0x64,
	0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x4b, 0x69, 0x6c, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73,
	0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x54, 0x6f,
	0x77, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x4b,
	0x69, 0x6c, 0x6c, 0x12, 0x40, 0x0a, 0x1d, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x5f, 0x73, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x67, 0x61, 0x6d, 0x65,
	0x45, 0x6e, 0x64, 0x65, 0x64, 0x49, 0x6e, 0x45, 0x61, 0x72, 0x6c, 0x79, 0x53, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x17, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x67, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x65,
	0x64, 0x49, 0x6e, 0x53, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b,
	0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x67, 0x6f, 0x6c, 0x64, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x67, 0x6f, 0x6c, 0x64, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x13,
	0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x6e, 0x64, 0x69, 0x76,
	0x69, 0x64, 0x75, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a,
	0x0f, 0x69, 0x6e, 0x68, 0x69, 0x62, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x6e, 0x68, 0x69, 0x62, 0x69, 0x74, 0x6f,
	0x72, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x69, 0x6e, 0x68, 0x69, 0x62, 0x69,
	0x74, 0x6f, 0x72, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x12, 0x69, 0x6e, 0x68, 0x69, 0x62, 0x69, 0x74, 0x6f, 0x72, 0x54, 0x61,
	0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x68, 0x69, 0x62,
	0x69, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x6c, 0x6f, 0x73, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x69, 0x6e, 0x68, 0x69, 0x62, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x4c, 0x6f, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x30, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x30, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x31, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x31, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x32, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x33, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x33, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x34, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x34, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x35, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x35, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x36, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x36, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6b, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x70, 0x72, 0x65, 0x65, 0x73, 0x18, 0x27, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6b, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x72, 0x65, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x69,
	0x6c, 0x6c, 0x73, 0x18, 0x28, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6c, 0x61, 0x6e, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x5f,
	0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x18,
	0x2a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x43, 0x72,
	0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x12, 0x32, 0x0a, 0x15,
	0x6c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x70, 0x72, 0x65, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6c, 0x61, 0x72,
	0x67, 0x65, 0x73, 0x74, 0x4b, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x72, 0x65, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6c, 0x61,
	0x72, 0x67, 0x65, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4b, 0x69, 0x6c, 0x6c, 0x12, 0x39,
	0x0a, 0x19, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x70, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x18, 0x2d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x16, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x70,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x67,
	0x69, 0x63, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x74, 0x18,
	0x2e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x44, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x12, 0x44, 0x0a, 0x1f, 0x6d, 0x61, 0x67, 0x69, 0x63,
	0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x74, 0x5f, 0x74, 0x6f,
	0x5f, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x1b, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61,
	0x6c, 0x74, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a,
	0x12, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61,
	0x6b, 0x65, 0x6e, 0x18, 0x30, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6d, 0x61, 0x67, 0x69, 0x63,
	0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x6e,
	0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6b,
	0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x31, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6e, 0x65, 0x75,
	0x74, 0x72, 0x61, 0x6c, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x4b, 0x69, 0x6c, 0x6c, 0x65,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x75, 0x73, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x75, 0x73, 0x4b, 0x69, 0x6c,
	0x6c, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x75, 0x73, 0x5f, 0x74, 0x61, 0x6b, 0x65,
	0x64, 0x6f, 0x77, 0x6e, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6e, 0x65, 0x78,
	0x75, 0x73, 0x54, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6e,
	0x65, 0x78, 0x75, 0x73, 0x5f, 0x6c, 0x6f, 0x73, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x6e, 0x65, 0x78, 0x75, 0x73, 0x4c, 0x6f, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x6f, 0x6c, 0x65, 0x6e, 0x18,
	0x35, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x73, 0x53, 0x74, 0x6f, 0x6c, 0x65, 0x6e, 0x12, 0x3a, 0x0a, 0x19, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x6f, 0x6c, 0x65, 0x6e, 0x5f, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x73, 0x18, 0x36, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x53, 0x74, 0x6f, 0x6c, 0x65, 0x6e, 0x41, 0x73, 0x73, 0x69,
	0x73, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x37, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x65,
	0x6e, 0x74, 0x61, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x38, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x70, 0x65, 0x6e, 0x74, 0x61, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x2f, 0x0a, 0x05, 0x70,
	0x65, 0x72, 0x6b, 0x73, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x65, 0x72,
	0x61, 0x6c, 0x64, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x6b,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x70, 0x65, 0x72, 0x6b, 0x73, 0x12, 0x32, 0x0a, 0x15,
	0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x64, 0x65, 0x61, 0x6c, 0x74, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x70, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74,
	0x12, 0x4a, 0x0a, 0x22, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x68, 0x61,
	0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1e, 0x70, 0x68,
	0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c,
	0x74, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x15,
	0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x70, 0x68, 0x79,
	0x73, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x3d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x31, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41,
	0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x31, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x61, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x32,
	0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x75, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x33, 0x18, 0x40, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x41, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x33, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x61, 0x75, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x34, 0x18, 0x41, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x75, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x34, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x62,
	0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x42, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x75, 0x62, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x75, 0x75, 0x69, 0x64, 0x18, 0x43, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x75, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x61, 0x64, 0x72, 0x61, 0x5f, 0x6b,
	0x69, 0x6c, 0x6c, 0x73, 0x18, 0x44, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x71, 0x75, 0x61, 0x64,
	0x72, 0x61, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x72, 0x69, 0x6f, 0x74, 0x5f,
	0x69, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x45, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x69, 0x6f, 0x74, 0x49, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x69, 0x6f,
	0x74, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x46, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x72, 0x69, 0x6f, 0x74, 0x49, 0x64, 0x54, 0x61, 0x67, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x47, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x1a, 0x73, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x5f, 0x62, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x18, 0x48, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x73, 0x69, 0x67, 0x68, 0x74,
	0x57, 0x61, 0x72, 0x64, 0x73, 0x42, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x47, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x31, 0x5f, 0x63, 0x61, 0x73, 0x74,
	0x73, 0x18, 0x49, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x31, 0x43,
	0x61, 0x73, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x32, 0x5f, 0x63,
	0x61, 0x73, 0x74, 0x73, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x6c,
	0x6c, 0x32, 0x43, 0x61, 0x73, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x6c, 0x6c,
	0x33, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x73, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73,
	0x70, 0x65, 0x6c, 0x6c, 0x33, 0x43, 0x61, 0x73, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x70,
	0x65, 0x6c, 0x6c, 0x34, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x73, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x34, 0x43, 0x61, 0x73, 0x74, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x31, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x73,
	0x18, 0x4d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72,
	0x31, 0x43, 0x61, 0x73, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e,
	0x65, 0x72, 0x31, 0x5f, 0x69, 0x64, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x75,
	0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x31, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x6d,
	0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x32, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x73, 0x18, 0x4f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x32, 0x43, 0x61, 0x73,
	0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x32, 0x5f,
	0x69, 0x64, 0x18, 0x50, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e,
	0x65, 0x72, 0x32, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x51, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x6d, 0x6d,
	0x6f, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e,
	0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x52, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x53,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x65, 0x61, 0x72, 0x6c, 0x79,
	0x5f, 0x73, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x64, 0x18, 0x54, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x14, 0x74, 0x65, 0x61, 0x6d, 0x45, 0x61, 0x72, 0x6c, 0x79, 0x53, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x55, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x56, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x61, 0x6d, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63,
	0x5f, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x73, 0x18, 0x57, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x43, 0x69, 0x6e, 0x67, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x64, 0x18, 0x58, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x74, 0x18, 0x59, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61,
	0x6c, 0x74, 0x12, 0x44, 0x0a, 0x1f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x6d,
	0x70, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x54, 0x6f, 0x43,
	0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4a, 0x0a, 0x22, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65,
	0x64, 0x5f, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x73, 0x18, 0x5b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x1e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x4f, 0x6e, 0x54, 0x65, 0x61, 0x6d, 0x6d,
	0x61, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x6b,
	0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x6c,
	0x18, 0x5d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x65, 0x61,
	0x6c, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x73,
	0x5f, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x73, 0x18, 0x5e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x73, 0x4f,
	0x6e, 0x54, 0x65, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6b, 0x69, 0x6c, 0x6c,
	0x65, 0x64, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d,
	0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x13,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x63, 0x5f, 0x64, 0x65,
	0x61, 0x6c, 0x74, 0x18, 0x60, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x43, 0x63, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x5f,
	0x64, 0x65, 0x61, 0x64, 0x18, 0x61, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x61, 0x64, 0x12, 0x2c,
	0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x5f, 0x68, 0x65,
	0x61, 0x6c, 0x65, 0x64, 0x18, 0x62, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x63, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x74, 0x72, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64,
	0x65, 0x61, 0x6c, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x72, 0x75, 0x65,
	0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x12, 0x42, 0x0a, 0x1e, 0x74,
	0x72, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x74,
	0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x65, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x1a, 0x74, 0x72, 0x75, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44,
	0x65, 0x61, 0x6c, 0x74, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x74, 0x72, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x61, 0x6b, 0x65, 0x6e, 0x18, 0x66, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x72, 0x75, 0x65,
	0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x75, 0x72, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x67, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x74, 0x75, 0x72, 0x72, 0x65, 0x74, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x74, 0x75, 0x72, 0x72, 0x65, 0x74, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77,
	0x6e, 0x73, 0x18, 0x68, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x75, 0x72, 0x72, 0x65, 0x74,
	0x54, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x75, 0x72,
	0x72, 0x65, 0x74, 0x73, 0x5f, 0x6c, 0x6f, 0x73, 0x74, 0x18, 0x69, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x74, 0x75, 0x72, 0x72, 0x65, 0x74, 0x73, 0x4c, 0x6f, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x6a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x6b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x3c, 0x0a, 0x1b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x5f, 0x62, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x67, 0x61, 0x6d,
	0x65, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x57,
	0x61, 0x72, 0x64, 0x73, 0x42, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64,
	0x18, 0x6d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x64, 0x73, 0x4b, 0x69, 0x6c,
	0x6c, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x64, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x77, 0x69, 0x6e, 0x18, 0x6f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x03, 0x77, 0x69, 0x6e, 0x22, 0x78, 0x0a, 0x09, 0x50, 0x65, 0x72, 0x6b,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x70, 0x65,
	0x72, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x65, 0x72, 0x61,
	0x6c, 0x64, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x50, 0x65, 0x72, 0x6b, 0x73, 0x12,
	0x31, 0x0a, 0x06, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x65, 0x72, 0x6b, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x06, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x73, 0x22, 0x53, 0x0a, 0x09, 0x50, 0x65, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x6c, 0x65, 0x78, 0x12, 0x18, 0x0a,
	0x07, 0x6f, 0x66, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x6f, 0x66, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x09, 0x50, 0x65, 0x72, 0x6b,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x65,
	0x72, 0x61, 0x6c, 0x64, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72,
	0x6b, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x22, 0x5f, 0x0a, 0x0d,
	0x50, 0x65, 0x72, 0x6b, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x65, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x65, 0x72,
	0x6b, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x61, 0x72, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x76, 0x61, 0x72, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x61, 0x72, 0x32, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x76, 0x61, 0x72, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x61, 0x72,
	0x33, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x76, 0x61, 0x72, 0x33, 0x22, 0xa2, 0x01,
	0x0a, 0x08, 0x52, 0x69, 0x6f, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x2b, 0x0a, 0x04, 0x62, 0x61,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c,
	0x64, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x62, 0x61, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x65,
	0x72, 0x61, 0x6c, 0x64, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x6f,
	0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x52, 0x0a, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x77, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x77,
	0x69, 0x6e, 0x22, 0x47, 0x0a, 0x07, 0x42, 0x61, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x69, 0x63, 0x6b, 0x54, 0x75, 0x72, 0x6e, 0x22, 0xe9, 0x02, 0x0a, 0x0e,
	0x52, 0x69, 0x6f, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x33,
	0x0a, 0x05, 0x62, 0x61, 0x72, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x62, 0x61,
	0x72, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x72,
	0x69, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x12, 0x35,
	0x0a, 0x06, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x64,
	0x72, 0x61, 0x67, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x09, 0x69, 0x6e, 0x68, 0x69, 0x62, 0x69, 0x74,
	0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c,
	0x64, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x69, 0x6e, 0x68, 0x69, 0x62, 0x69, 0x74,
	0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x0b, 0x72, 0x69, 0x66, 0x74, 0x5f, 0x68, 0x65, 0x72, 0x61, 0x6c,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64,
	0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x72, 0x69, 0x66, 0x74, 0x48, 0x65, 0x72, 0x61,
	0x6c, 0x64, 0x12, 0x33, 0x0a, 0x05, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x05, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x22, 0x3b, 0x0a, 0x0d, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6b,
	0x69, 0x6c, 0x6c, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x11, 0x52, 0x69, 0x6f, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x68,
	0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x65,
	0x72, 0x61, 0x6c, 0x64, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x22, 0x79, 0x0a, 0x15, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x22,
	0xae, 0x01, 0x0a, 0x11, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x35, 0x0a, 0x06,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68,
	0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x06, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x22, 0xbd, 0x01, 0x0a, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x72, 0x69, 0x6f, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x57, 0x0a, 0x12, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x72,
	0x69, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52,
	0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x22, 0xcc, 0x01, 0x0a, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c,
	0x64, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x1a, 0x3c, 0x0a, 0x0e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xf3, 0x03, 0x0a, 0x18, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x67,
	0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x6f, 0x6c,
	0x64, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x67, 0x6f, 0x6c, 0x64, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x12, 0x32, 0x0a, 0x15, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x13, 0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x4b,
	0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x6d,
	0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x4b, 0x69, 0x6c, 0x6c,
	0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x65,
	0x72, 0x61, 0x6c, 0x64, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x1b, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x65, 0x6e, 0x65, 0x6d, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x74, 0x69,
	0x6d, 0x65, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x67, 0x6f, 0x6c, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x78, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x78, 0x70, 0x22, 0x2e, 0x0a, 0x10, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x01, 0x79, 0x22, 0xe7, 0x03, 0x0a, 0x0c, 0x4c, 0x69, 0x76, 0x65, 0x47, 0x61,
	0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x49, 0x0a, 0x10, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64,
	0x5f, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e,
	0x52, 0x0f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x67, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x67, 0x61, 0x6d, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x67, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15,
	0x0a, 0x06, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x09, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c,
	0x64, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x47, 0x61,
	0x6d, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x09, 0x6f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x47, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x65,
	0x72, 0x61, 0x6c, 0x64, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76,
	0x65, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x22,
	0x67, 0x0a, 0x0e, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x69, 0x63, 0x6b, 0x54, 0x75, 0x72, 0x6e, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x39, 0x0a, 0x10, 0x4c, 0x69, 0x76, 0x65,
	0x47, 0x61, 0x6d, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x4b, 0x65, 0x79, 0x22, 0xa2, 0x03, 0x0a, 0x13, 0x4c, 0x69, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x62,
	0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x62, 0x6f, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x5a,
	0x0a, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x72, 0x75, 0x6e, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x76, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x75, 0x6e, 0x65, 0x52, 0x09, 0x67, 0x61,
	0x6d, 0x65, 0x52, 0x75, 0x6e, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x31, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x31, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x70, 0x65, 0x6c, 0x6c, 0x32, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x32, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x75, 0x6d,
	0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75,
	0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x15, 0x4c, 0x69, 0x76, 0x65,
	0x47, 0x61, 0x6d, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x3d, 0x0a, 0x0c, 0x4c, 0x69, 0x76, 0x65, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x75, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x72, 0x75, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x72, 0x75, 0x6e, 0x65, 0x49, 0x64, 0x22, 0xa3, 0x03, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6d, 0x70,
	0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68,
	0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x68, 0x61,
	0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x20, 0x63,
	0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x73,
	0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x46, 0x0a, 0x20, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x63,
	0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x55, 0x6e, 0x74,
	0x69, 0x6c, 0x4e, 0x65, 0x78, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x68, 0x65, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x63, 0x68, 0x65, 0x73, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64,
	0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x6d,
	0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x22, 0xbe, 0x03, 0x0a,
	0x0b, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09,
	0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x75, 0x6d,
	0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75,
	0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6c,
	0x65, 0x61, 0x67, 0x75, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x77,
	0x69, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x77, 0x69, 0x6e, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6c, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x6f, 0x74, 0x5f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x6f, 0x74,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x74, 0x65, 0x72, 0x61,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x65, 0x74, 0x65, 0x72, 0x61, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x72, 0x65, 0x73, 0x68, 0x42, 0x6c, 0x6f, 0x6f,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3e, 0x0a,
	0x0b, 0x6d, 0x69, 0x6e, 0x69, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x72, 0x69, 0x6f, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x44, 0x54,
	0x4f, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x69, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22, 0x6f, 0x0a,
	0x0d, 0x4d, 0x69, 0x6e, 0x69, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x44, 0x54, 0x4f, 0x12, 0x16,
	0x0a, 0x06, 0x6c, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6c, 0x6f, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x69,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x77, 0x69, 0x6e, 0x73, 0x22, 0xa2,
	0x02, 0x0a, 0x0b, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30,
	0x0a, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65,
	0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x2c, 0x0a, 0x12, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x79,
	0x6e, 0x63, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2a,
	0x0a, 0x11, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x79, 0x6e, 0x63, 0x52,
	0x61, 0x6e, 0x6b, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x73, 0x79, 0x6e, 0x63, 0x43,
	0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x79, 0x12, 0x2e,
	0x0a, 0x13, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x22, 0xa3, 0x01, 0x0a, 0x0a, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64,
	0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0xb4, 0x02, 0x0a, 0x09, 0x53, 0x79,
	0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x12, 0x2b,
	0x0a, 0x11, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x72,
	0x61, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x72, 0x61, 0x6e,
	0x6b, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x37, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x69,
	0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x68, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0xf2, 0x01, 0x0a, 0x0d, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70,
	0x69, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70,
	0x69, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x72, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2d, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x72, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0xd4, 0x01, 0x0a, 0x0f, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x39,
	0x0a, 0x0a, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x22, 0xa2, 0x02, 0x0a,
	0x10, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3e, 0x0a, 0x0d, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64,
	0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x32, 0x89, 0x06, 0x0a, 0x0b, 0x52, 0x69, 0x6f, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x56, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72,
	0x12, 0x22, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x72, 0x69,
	0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x26, 0x2e, 0x68,
	0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x72, 0x69,
	0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x2e,
	0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x72, 0x69, 0x6f, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4c,
	0x69, 0x76, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x23, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c,
	0x64, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x76,
	0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69,
	0x6f, 0x6e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x79, 0x12, 0x29, 0x2e, 0x68, 0x65, 0x72, 0x61,
	0x6c, 0x64, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x72, 0x69,
	0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f,
	0x6e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x25, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x72, 0x69, 0x6f, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x68, 0x65, 0x72, 0x61,
	0x6c, 0x64, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61,
	0x6e, 0x6b, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5f, 0x0a, 0x0e, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x25, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x72, 0x69, 0x6f,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x68, 0x65, 0x72,
	0x61, 0x6c, 0x64, 0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x59, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x23, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x72, 0x69, 0x6f, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64,
	0x2e, 0x72, 0x69, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x47, 0x5a,
	0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x65, 0x72, 0x61,
	0x6c, 0x64, 0x2d, 0x6c, 0x6f, 0x6c, 0x2f, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2f, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x67,
	0x72, 0x70, 0x63, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x72, 0x69, 0x6f, 0x74, 0x2f, 0x76, 0x31, 0x3b,
	0x72, 0x69, 0x6f, 0x74, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_riot_proto_rawDescOnce sync.Once
	file_riot_proto_rawDescData = file_riot_proto_rawDesc
)

func file_riot_proto_rawDescGZIP() []byte {
	file_riot_proto_rawDescOnce.Do(func() {
		file_riot_proto_rawDescData = protoimpl.X.CompressGZIP(file_riot_proto_rawDescData)
	})
	return file_riot_proto_rawDescData
}

var file_riot_proto_msgTypes = make([]protoimpl.MessageInfo, 52)
var file_riot_proto_goTypes = []interface{}{
	(*GetSummonerRequest)(nil),         // 0: herald.riot.v1.GetSummonerRequest
	(*GetSummonerResponse)(nil),        // 1: herald.riot.v1.GetSummonerResponse
	(*GetMatchHistoryRequest)(nil),     // 2: herald.riot.v1.GetMatchHistoryRequest
	(*GetMatchHistoryResponse)(nil),    // 3: herald.riot.v1.GetMatchHistoryResponse
	(*GetMatchDataRequest)(nil),        // 4: herald.riot.v1.GetMatchDataRequest
	(*GetMatchDataResponse)(nil),       // 5: herald.riot.v1.GetMatchDataResponse
	(*GetLiveMatchRequest)(nil),        // 6: herald.riot.v1.GetLiveMatchRequest
	(*GetLiveMatchResponse)(nil),       // 7: herald.riot.v1.GetLiveMatchResponse
	(*GetChampionMasteryRequest)(nil),  // 8: herald.riot.v1.GetChampionMasteryRequest
	(*GetChampionMasteryResponse)(nil), // 9: herald.riot.v1.GetChampionMasteryResponse
	(*GetRankedStatsRequest)(nil),      // 10: herald.riot.v1.GetRankedStatsRequest
	(*GetRankedStatsResponse)(nil),     // 11: herald.riot.v1.GetRankedStatsResponse
	(*SyncPlayerDataRequest)(nil),      // 12: herald.riot.v1.SyncPlayerDataRequest
	(*SyncPlayerDataResponse)(nil),     // 13: herald.riot.v1.SyncPlayerDataResponse
	(*GetRateLimitRequest)(nil),        // 14: herald.riot.v1.GetRateLimitRequest
	(*GetRateLimitResponse)(nil),       // 15: herald.riot.v1.GetRateLimitResponse
	(*Summoner)(nil),                   // 16: herald.riot.v1.Summoner
	(*RiotMatchData)(nil),              // 17: herald.riot.v1.RiotMatchData
	(*MatchMetadata)(nil),              // 18: herald.riot.v1.MatchMetadata
	(*MatchInfo)(nil),                  // 19: herald.riot.v1.MatchInfo
	(*RiotParticipant)(nil),            // 20: herald.riot.v1.RiotParticipant
	(*PerksData)(nil),                  // 21: herald.riot.v1.PerksData
	(*PerkStats)(nil),                  // 22: herald.riot.v1.PerkStats
	(*PerkStyle)(nil),                  // 23: herald.riot.v1.PerkStyle
	(*PerkSelection)(nil),              // 24: herald.riot.v1.PerkSelection
	(*RiotTeam)(nil),                   // 25: herald.riot.v1.RiotTeam
	(*BanData)(nil),                    // 26: herald.riot.v1.BanData
	(*RiotObjectives)(nil),             // 27: herald.riot.v1.RiotObjectives
	(*ObjectiveData)(nil),              // 28: herald.riot.v1.ObjectiveData
	(*RiotMatchTimeline)(nil),          // 29: herald.riot.v1.RiotMatchTimeline
	(*MatchTimelineMetadata)(nil),      // 30: herald.riot.v1.MatchTimelineMetadata
	(*MatchTimelineInfo)(nil),          // 31: herald.riot.v1.MatchTimelineInfo
	(*TimelineFrame)(nil),              // 32: herald.riot.v1.TimelineFrame
	(*TimelineEvent)(nil),              // 33: herald.riot.v1.TimelineEvent
	(*TimelineParticipantFrame)(nil),   // 34: herald.riot.v1.TimelineParticipantFrame
	(*TimelinePosition)(nil),           // 35: herald.riot.v1.TimelinePosition
	(*LiveGameInfo)(nil),               // 36: herald.riot.v1.LiveGameInfo
	(*BannedChampion)(nil),             // 37: herald.riot.v1.BannedChampion
	(*LiveGameObserver)(nil),           // 38: herald.riot.v1.LiveGameObserver
	(*LiveGameParticipant)(nil),        // 39: herald.riot.v1.LiveGameParticipant
	(*LiveGameCustomization)(nil),      // 40: herald.riot.v1.LiveGameCustomization
	(*LiveGameRune)(nil),               // 41: herald.riot.v1.LiveGameRune
	(*ChampionMastery)(nil),            // 42: herald.riot.v1.ChampionMastery
	(*RankedEntry)(nil),                // 43: herald.riot.v1.RankedEntry
	(*MiniSeriesDTO)(nil),              // 44: herald.riot.v1.MiniSeriesDTO
	(*SyncOptions)(nil),                // 45: herald.riot.v1.SyncOptions
	(*SyncResult)(nil),                 // 46: herald.riot.v1.SyncResult
	(*SyncStats)(nil),                  // 47: herald.riot.v1.SyncStats
	(*RateLimitInfo)(nil),              // 48: herald.riot.v1.RateLimitInfo
	(*RateLimitBucket)(nil),            // 49: herald.riot.v1.RateLimitBucket
	(*ResponseMetadata)(nil),           // 50: herald.riot.v1.ResponseMetadata
	nil,                                // 51: herald.riot.v1.TimelineEvent.EventDataEntry
	(*timestamppb.Timestamp)(nil),      // 52: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),        // 53: google.protobuf.Duration
}
var file_riot_proto_depIdxs = []int32{
	16, // 0: herald.riot.v1.GetSummonerResponse.summoner:type_name -> herald.riot.v1.Summoner
	50, // 1: herald.riot.v1.GetSummonerResponse.metadata:type_name -> herald.riot.v1.ResponseMetadata
	52, // 2: herald.riot.v1.GetMatchHistoryRequest.start_time:type_name -> google.protobuf.Timestamp
	52, // 3: herald.riot.v1.GetMatchHistoryRequest.end_time:type_name -> google.protobuf.Timestamp
	50, // 4: herald.riot.v1.GetMatchHistoryResponse.metadata:type_name -> herald.riot.v1.ResponseMetadata
	17, // 5: herald.riot.v1.GetMatchDataResponse.match_data:type_name -> herald.riot.v1.RiotMatchData
	29, // 6: herald.riot.v1.GetMatchDataResponse.timeline:type_name -> herald.riot.v1.RiotMatchTimeline
	50, // 7: herald.riot.v1.GetMatchDataResponse.metadata:type_name -> herald.riot.v1.ResponseMetadata
	36, // 8: herald.riot.v1.GetLiveMatchResponse.live_game:type_name -> herald.riot.v1.LiveGameInfo
	50, // 9: herald.riot.v1.GetLiveMatchResponse.metadata:type_name -> herald.riot.v1.ResponseMetadata
	42, // 10: herald.riot.v1.GetChampionMasteryResponse.masteries:type_name -> herald.riot.v1.ChampionMastery
	50, // 11: herald.riot.v1.GetChampionMasteryResponse.metadata:type_name -> herald.riot.v1.ResponseMetadata
	43, // 12: herald.riot.v1.GetRankedStatsResponse.ranked_entries:type_name -> herald.riot.v1.RankedEntry
	50, // 13: herald.riot.v1.GetRankedStatsResponse.metadata:type_name -> herald.riot.v1.ResponseMetadata
	45, // 14: herald.riot.v1.SyncPlayerDataRequest.options:type_name -> herald.riot.v1.SyncOptions
	46, // 15: herald.riot.v1.SyncPlayerDataResponse.result:type_name -> herald.riot.v1.SyncResult
	47, // 16: herald.riot.v1.SyncPlayerDataResponse.stats:type_name -> herald.riot.v1.SyncStats
	50, // 17: herald.riot.v1.SyncPlayerDataResponse.metadata:type_name -> herald.riot.v1.ResponseMetadata
	48, // 18: herald.riot.v1.GetRateLimitResponse.rate_limit:type_name -> herald.riot.v1.RateLimitInfo
	49, // 19: herald.riot.v1.GetRateLimitResponse.buckets:type_name -> herald.riot.v1.RateLimitBucket
	50, // 20: herald.riot.v1.GetRateLimitResponse.metadata:type_name -> herald.riot.v1.ResponseMetadata
	18, // 21: herald.riot.v1.RiotMatchData.metadata:type_name -> herald.riot.v1.MatchMetadata
	19, // 22: herald.riot.v1.RiotMatchData.info:type_name -> herald.riot.v1.MatchInfo
	20, // 23: herald.riot.v1.MatchInfo.participants:type_name -> herald.riot.v1.RiotParticipant
	25, // 24: herald.riot.v1.MatchInfo.teams:type_name -> herald.riot.v1.RiotTeam
	21, // 25: herald.riot.v1.RiotParticipant.perks:type_name -> herald.riot.v1.PerksData
	22, // 26: herald.riot.v1.PerksData.stat_perks:type_name -> herald.riot.v1.PerkStats
	23, // 27: herald.riot.v1.PerksData.styles:type_name -> herald.riot.v1.PerkStyle
	24, // 28: herald.riot.v1.PerkStyle.selections:type_name -> herald.riot.v1.PerkSelection
	26, // 29: herald.riot.v1.RiotTeam.bans:type_name -> herald.riot.v1.BanData
	27, // 30: herald.riot.v1.RiotTeam.objectives:type_name -> herald.riot.v1.RiotObjectives
	28, // 31: herald.riot.v1.RiotObjectives.baron:type_name -> herald.riot.v1.ObjectiveData
	28, // 32: herald.riot.v1.RiotObjectives.champion:type_name -> herald.riot.v1.ObjectiveData
	28, // 33: herald.riot.v1.RiotObjectives.dragon:type_name -> herald.riot.v1.ObjectiveData
	28, // 34: herald.riot.v1.RiotObjectives.inhibitor:type_name -> herald.riot.v1.ObjectiveData
	28, // 35: herald.riot.v1.RiotObjectives.rift_herald:type_name -> herald.riot.v1.ObjectiveData
	28, // 36: herald.riot.v1.RiotObjectives.tower:type_name -> herald.riot.v1.ObjectiveData
	30, // 37: herald.riot.v1.RiotMatchTimeline.metadata:type_name -> herald.riot.v1.MatchTimelineMetadata
	31, // 38: herald.riot.v1.RiotMatchTimeline.info:type_name -> herald.riot.v1.MatchTimelineInfo
	32, // 39: herald.riot.v1.MatchTimelineInfo.frames:type_name -> herald.riot.v1.TimelineFrame
	33, // 40: herald.riot.v1.TimelineFrame.events:type_name -> herald.riot.v1.TimelineEvent
	34, // 41: herald.riot.v1.TimelineFrame.participant_frames:type_name -> herald.riot.v1.TimelineParticipantFrame
	51, // 42: herald.riot.v1.TimelineEvent.event_data:type_name -> herald.riot.v1.TimelineEvent.EventDataEntry
	35, // 43: herald.riot.v1.TimelineParticipantFrame.position:type_name -> herald.riot.v1.TimelinePosition
	37, // 44: herald.riot.v1.LiveGameInfo.banned_champions:type_name -> herald.riot.v1.BannedChampion
	38, // 45: herald.riot.v1.LiveGameInfo.observers:type_name -> herald.riot.v1.LiveGameObserver
	39, // 46: herald.riot.v1.LiveGameInfo.participants:type_name -> herald.riot.v1.LiveGameParticipant
	40, // 47: herald.riot.v1.LiveGameParticipant.customization_objects:type_name -> herald.riot.v1.LiveGameCustomization
	41, // 48: herald.riot.v1.LiveGameParticipant.game_runes:type_name -> herald.riot.v1.LiveGameRune
	44, // 49: herald.riot.v1.RankedEntry.mini_series:type_name -> herald.riot.v1.MiniSeriesDTO
	47, // 50: herald.riot.v1.SyncResult.stats:type_name -> herald.riot.v1.SyncStats
	53, // 51: herald.riot.v1.SyncStats.sync_duration:type_name -> google.protobuf.Duration
	52, // 52: herald.riot.v1.SyncStats.last_sync:type_name -> google.protobuf.Timestamp
	52, // 53: herald.riot.v1.RateLimitInfo.reset_time:type_name -> google.protobuf.Timestamp
	52, // 54: herald.riot.v1.RateLimitBucket.reset_time:type_name -> google.protobuf.Timestamp
	53, // 55: herald.riot.v1.RateLimitBucket.window:type_name -> google.protobuf.Duration
	52, // 56: herald.riot.v1.ResponseMetadata.timestamp:type_name -> google.protobuf.Timestamp
	53, // 57: herald.riot.v1.ResponseMetadata.response_time:type_name -> google.protobuf.Duration
	48, // 58: herald.riot.v1.ResponseMetadata.rate_limit:type_name -> herald.riot.v1.RateLimitInfo
	0,  // 59: herald.riot.v1.RiotService.GetSummoner:input_type -> herald.riot.v1.GetSummonerRequest
	2,  // 60: herald.riot.v1.RiotService.GetMatchHistory:input_type -> herald.riot.v1.GetMatchHistoryRequest
	4,  // 61: herald.riot.v1.RiotService.GetMatchData:input_type -> herald.riot.v1.GetMatchDataRequest
	6,  // 62: herald.riot.v1.RiotService.GetLiveMatch:input_type -> herald.riot.v1.GetLiveMatchRequest
	8,  // 63: herald.riot.v1.RiotService.GetChampionMastery:input_type -> herald.riot.v1.GetChampionMasteryRequest
	10, // 64: herald.riot.v1.RiotService.GetRankedStats:input_type -> herald.riot.v1.GetRankedStatsRequest
	12, // 65: herald.riot.v1.RiotService.SyncPlayerData:input_type -> herald.riot.v1.SyncPlayerDataRequest
	14, // 66: herald.riot.v1.RiotService.GetRateLimit:input_type -> herald.riot.v1.GetRateLimitRequest
	1,  // 67: herald.riot.v1.RiotService.GetSummoner:output_type -> herald.riot.v1.GetSummonerResponse
	3,  // 68: herald.riot.v1.RiotService.GetMatchHistory:output_type -> herald.riot.v1.GetMatchHistoryResponse
	5,  // 69: herald.riot.v1.RiotService.GetMatchData:output_type -> herald.riot.v1.GetMatchDataResponse
	7,  // 70: herald.riot.v1.RiotService.GetLiveMatch:output_type -> herald.riot.v1.GetLiveMatchResponse
	9,  // 71: herald.riot.v1.RiotService.GetChampionMastery:output_type -> herald.riot.v1.GetChampionMasteryResponse
	11, // 72: herald.riot.v1.RiotService.GetRankedStats:output_type -> herald.riot.v1.GetRankedStatsResponse
	13, // 73: herald.riot.v1.RiotService.SyncPlayerData:output_type -> herald.riot.v1.SyncPlayerDataResponse
	15, // 74: herald.riot.v1.RiotService.GetRateLimit:output_type -> herald.riot.v1.GetRateLimitResponse
	67, // [67:75] is the sub-list for method output_type
	59, // [59:67] is the sub-list for method input_type
	59, // [59:59] is the sub-list for extension type_name
	59, // [59:59] is the sub-list for extension extendee
	0,  // [0:59] is the sub-list for field type_name
}

func init() { file_riot_proto_init() }
func file_riot_proto_init() {
	if File_riot_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_riot_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSummonerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSummonerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMatchHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMatchHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMatchDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMatchDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLiveMatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLiveMatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChampionMasteryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChampionMasteryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRankedStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRankedStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncPlayerDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncPlayerDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRateLimitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRateLimitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Summoner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RiotMatchData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RiotParticipant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerksData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerkStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerkStyle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerkSelection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RiotTeam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BanData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RiotObjectives); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectiveData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RiotMatchTimeline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchTimelineMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchTimelineInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimelineFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimelineEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimelineParticipantFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimelinePosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveGameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BannedChampion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveGameObserver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveGameParticipant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveGameCustomization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveGameRune); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChampionMastery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RankedEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiniSeriesDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimitInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimitBucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_riot_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_riot_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_riot_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_riot_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_riot_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_riot_proto_msgTypes[14].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_riot_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   52,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_riot_proto_goTypes,
		DependencyIndexes: file_riot_proto_depIdxs,
		MessageInfos:      file_riot_proto_msgTypes,
	}.Build()
	File_riot_proto = out.File
	file_riot_proto_rawDesc = nil
	file_riot_proto_goTypes = nil
	file_riot_proto_depIdxs = nil
}
