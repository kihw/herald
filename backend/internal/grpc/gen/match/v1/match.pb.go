// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.4
// source: match.proto

package matchv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProcessMatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId        string            `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	Region         string            `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	Config         *ProcessingConfig `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
	ForceReprocess bool              `protobuf:"varint,4,opt,name=force_reprocess,json=forceReprocess,proto3" json:"force_reprocess,omitempty"`
}

func (x *ProcessMatchRequest) Reset() {
	*x = ProcessMatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessMatchRequest) ProtoMessage() {}

func (x *ProcessMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessMatchRequest.ProtoReflect.Descriptor instead.
func (*ProcessMatchRequest) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{0}
}

func (x *ProcessMatchRequest) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *ProcessMatchRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ProcessMatchRequest) GetConfig() *ProcessingConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *ProcessMatchRequest) GetForceReprocess() bool {
	if x != nil {
		return x.ForceReprocess
	}
	return false
}

type ProcessMatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchData       *MatchData       `protobuf:"bytes,1,opt,name=match_data,json=matchData,proto3" json:"match_data,omitempty"`
	ProcessingStats *ProcessingStats `protobuf:"bytes,2,opt,name=processing_stats,json=processingStats,proto3" json:"processing_stats,omitempty"`
	Warnings        []string         `protobuf:"bytes,3,rep,name=warnings,proto3" json:"warnings,omitempty"`
}

func (x *ProcessMatchResponse) Reset() {
	*x = ProcessMatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessMatchResponse) ProtoMessage() {}

func (x *ProcessMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessMatchResponse.ProtoReflect.Descriptor instead.
func (*ProcessMatchResponse) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{1}
}

func (x *ProcessMatchResponse) GetMatchData() *MatchData {
	if x != nil {
		return x.MatchData
	}
	return nil
}

func (x *ProcessMatchResponse) GetProcessingStats() *ProcessingStats {
	if x != nil {
		return x.ProcessingStats
	}
	return nil
}

func (x *ProcessMatchResponse) GetWarnings() []string {
	if x != nil {
		return x.Warnings
	}
	return nil
}

type BatchProcessMatchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchIds        []string          `protobuf:"bytes,1,rep,name=match_ids,json=matchIds,proto3" json:"match_ids,omitempty"`
	Region          string            `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	Config          *ProcessingConfig `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
	ParallelWorkers int32             `protobuf:"varint,4,opt,name=parallel_workers,json=parallelWorkers,proto3" json:"parallel_workers,omitempty"`
}

func (x *BatchProcessMatchesRequest) Reset() {
	*x = BatchProcessMatchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchProcessMatchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchProcessMatchesRequest) ProtoMessage() {}

func (x *BatchProcessMatchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchProcessMatchesRequest.ProtoReflect.Descriptor instead.
func (*BatchProcessMatchesRequest) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{2}
}

func (x *BatchProcessMatchesRequest) GetMatchIds() []string {
	if x != nil {
		return x.MatchIds
	}
	return nil
}

func (x *BatchProcessMatchesRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *BatchProcessMatchesRequest) GetConfig() *ProcessingConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *BatchProcessMatchesRequest) GetParallelWorkers() int32 {
	if x != nil {
		return x.ParallelWorkers
	}
	return 0
}

type BatchProcessMatchesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*MatchProcessResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	Stats   *BatchProcessingStats `protobuf:"bytes,2,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *BatchProcessMatchesResponse) Reset() {
	*x = BatchProcessMatchesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchProcessMatchesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchProcessMatchesResponse) ProtoMessage() {}

func (x *BatchProcessMatchesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchProcessMatchesResponse.ProtoReflect.Descriptor instead.
func (*BatchProcessMatchesResponse) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{3}
}

func (x *BatchProcessMatchesResponse) GetResults() []*MatchProcessResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *BatchProcessMatchesResponse) GetStats() *BatchProcessingStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type GetMatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId         string  `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	Region          *string `protobuf:"bytes,2,opt,name=region,proto3,oneof" json:"region,omitempty"`
	IncludeTimeline bool    `protobuf:"varint,3,opt,name=include_timeline,json=includeTimeline,proto3" json:"include_timeline,omitempty"`
}

func (x *GetMatchRequest) Reset() {
	*x = GetMatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchRequest) ProtoMessage() {}

func (x *GetMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchRequest.ProtoReflect.Descriptor instead.
func (*GetMatchRequest) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{4}
}

func (x *GetMatchRequest) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *GetMatchRequest) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

func (x *GetMatchRequest) GetIncludeTimeline() bool {
	if x != nil {
		return x.IncludeTimeline
	}
	return false
}

type GetMatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchData *MatchData     `protobuf:"bytes,1,opt,name=match_data,json=matchData,proto3" json:"match_data,omitempty"`
	Timeline  *MatchTimeline `protobuf:"bytes,2,opt,name=timeline,proto3,oneof" json:"timeline,omitempty"`
}

func (x *GetMatchResponse) Reset() {
	*x = GetMatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchResponse) ProtoMessage() {}

func (x *GetMatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchResponse.ProtoReflect.Descriptor instead.
func (*GetMatchResponse) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{5}
}

func (x *GetMatchResponse) GetMatchData() *MatchData {
	if x != nil {
		return x.MatchData
	}
	return nil
}

func (x *GetMatchResponse) GetTimeline() *MatchTimeline {
	if x != nil {
		return x.Timeline
	}
	return nil
}

type SearchMatchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Criteria  *MatchSearchCriteria `protobuf:"bytes,1,opt,name=criteria,proto3" json:"criteria,omitempty"`
	PageSize  int32                `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string               `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *SearchMatchesRequest) Reset() {
	*x = SearchMatchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchMatchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchMatchesRequest) ProtoMessage() {}

func (x *SearchMatchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchMatchesRequest.ProtoReflect.Descriptor instead.
func (*SearchMatchesRequest) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{6}
}

func (x *SearchMatchesRequest) GetCriteria() *MatchSearchCriteria {
	if x != nil {
		return x.Criteria
	}
	return nil
}

func (x *SearchMatchesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SearchMatchesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type SearchMatchesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matches       []*MatchSummary `protobuf:"bytes,1,rep,name=matches,proto3" json:"matches,omitempty"`
	NextPageToken string          `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	TotalCount    int32           `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *SearchMatchesResponse) Reset() {
	*x = SearchMatchesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchMatchesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchMatchesResponse) ProtoMessage() {}

func (x *SearchMatchesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchMatchesResponse.ProtoReflect.Descriptor instead.
func (*SearchMatchesResponse) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{7}
}

func (x *SearchMatchesResponse) GetMatches() []*MatchSummary {
	if x != nil {
		return x.Matches
	}
	return nil
}

func (x *SearchMatchesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *SearchMatchesResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type StreamLiveMatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId    string   `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	Region     string   `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	EventTypes []string `protobuf:"bytes,3,rep,name=event_types,json=eventTypes,proto3" json:"event_types,omitempty"`
}

func (x *StreamLiveMatchRequest) Reset() {
	*x = StreamLiveMatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamLiveMatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamLiveMatchRequest) ProtoMessage() {}

func (x *StreamLiveMatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamLiveMatchRequest.ProtoReflect.Descriptor instead.
func (*StreamLiveMatchRequest) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{8}
}

func (x *StreamLiveMatchRequest) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *StreamLiveMatchRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *StreamLiveMatchRequest) GetEventTypes() []string {
	if x != nil {
		return x.EventTypes
	}
	return nil
}

type LiveMatchUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId    string                 `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	Timestamp  *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	UpdateType string                 `protobuf:"bytes,3,opt,name=update_type,json=updateType,proto3" json:"update_type,omitempty"`
	Data       *LiveMatchData         `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *LiveMatchUpdate) Reset() {
	*x = LiveMatchUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveMatchUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveMatchUpdate) ProtoMessage() {}

func (x *LiveMatchUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveMatchUpdate.ProtoReflect.Descriptor instead.
func (*LiveMatchUpdate) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{9}
}

func (x *LiveMatchUpdate) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *LiveMatchUpdate) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *LiveMatchUpdate) GetUpdateType() string {
	if x != nil {
		return x.UpdateType
	}
	return ""
}

func (x *LiveMatchUpdate) GetData() *LiveMatchData {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetMatchTimelineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId   string               `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	StartTime *durationpb.Duration `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3,oneof" json:"start_time,omitempty"`
	EndTime   *durationpb.Duration `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
}

func (x *GetMatchTimelineRequest) Reset() {
	*x = GetMatchTimelineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMatchTimelineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchTimelineRequest) ProtoMessage() {}

func (x *GetMatchTimelineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchTimelineRequest.ProtoReflect.Descriptor instead.
func (*GetMatchTimelineRequest) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{10}
}

func (x *GetMatchTimelineRequest) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *GetMatchTimelineRequest) GetStartTime() *durationpb.Duration {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *GetMatchTimelineRequest) GetEndTime() *durationpb.Duration {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type GetMatchTimelineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timeline *MatchTimeline `protobuf:"bytes,1,opt,name=timeline,proto3" json:"timeline,omitempty"`
	Events   []*MatchEvent  `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *GetMatchTimelineResponse) Reset() {
	*x = GetMatchTimelineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMatchTimelineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMatchTimelineResponse) ProtoMessage() {}

func (x *GetMatchTimelineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMatchTimelineResponse.ProtoReflect.Descriptor instead.
func (*GetMatchTimelineResponse) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{11}
}

func (x *GetMatchTimelineResponse) GetTimeline() *MatchTimeline {
	if x != nil {
		return x.Timeline
	}
	return nil
}

func (x *GetMatchTimelineResponse) GetEvents() []*MatchEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type MatchData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId      string                 `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	Info         *MatchInfo             `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	Participants []*Participant         `protobuf:"bytes,3,rep,name=participants,proto3" json:"participants,omitempty"`
	Teams        []*Team                `protobuf:"bytes,4,rep,name=teams,proto3" json:"teams,omitempty"`
	Analysis     *MatchAnalysis         `protobuf:"bytes,5,opt,name=analysis,proto3" json:"analysis,omitempty"`
	ProcessedAt  *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=processed_at,json=processedAt,proto3" json:"processed_at,omitempty"`
}

func (x *MatchData) Reset() {
	*x = MatchData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchData) ProtoMessage() {}

func (x *MatchData) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchData.ProtoReflect.Descriptor instead.
func (*MatchData) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{12}
}

func (x *MatchData) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *MatchData) GetInfo() *MatchInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *MatchData) GetParticipants() []*Participant {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *MatchData) GetTeams() []*Team {
	if x != nil {
		return x.Teams
	}
	return nil
}

func (x *MatchData) GetAnalysis() *MatchAnalysis {
	if x != nil {
		return x.Analysis
	}
	return nil
}

func (x *MatchData) GetProcessedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ProcessedAt
	}
	return nil
}

type MatchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameMode           string                 `protobuf:"bytes,1,opt,name=game_mode,json=gameMode,proto3" json:"game_mode,omitempty"`
	GameType           string                 `protobuf:"bytes,2,opt,name=game_type,json=gameType,proto3" json:"game_type,omitempty"`
	GameDuration       *durationpb.Duration   `protobuf:"bytes,3,opt,name=game_duration,json=gameDuration,proto3" json:"game_duration,omitempty"`
	MapId              string                 `protobuf:"bytes,4,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	PatchVersion       string                 `protobuf:"bytes,5,opt,name=patch_version,json=patchVersion,proto3" json:"patch_version,omitempty"`
	QueueId            string                 `protobuf:"bytes,6,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
	Region             string                 `protobuf:"bytes,7,opt,name=region,proto3" json:"region,omitempty"`
	GameStartTimestamp *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=game_start_timestamp,json=gameStartTimestamp,proto3" json:"game_start_timestamp,omitempty"`
	Season             string                 `protobuf:"bytes,9,opt,name=season,proto3" json:"season,omitempty"`
}

func (x *MatchInfo) Reset() {
	*x = MatchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchInfo) ProtoMessage() {}

func (x *MatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchInfo.ProtoReflect.Descriptor instead.
func (*MatchInfo) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{13}
}

func (x *MatchInfo) GetGameMode() string {
	if x != nil {
		return x.GameMode
	}
	return ""
}

func (x *MatchInfo) GetGameType() string {
	if x != nil {
		return x.GameType
	}
	return ""
}

func (x *MatchInfo) GetGameDuration() *durationpb.Duration {
	if x != nil {
		return x.GameDuration
	}
	return nil
}

func (x *MatchInfo) GetMapId() string {
	if x != nil {
		return x.MapId
	}
	return ""
}

func (x *MatchInfo) GetPatchVersion() string {
	if x != nil {
		return x.PatchVersion
	}
	return ""
}

func (x *MatchInfo) GetQueueId() string {
	if x != nil {
		return x.QueueId
	}
	return ""
}

func (x *MatchInfo) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *MatchInfo) GetGameStartTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.GameStartTimestamp
	}
	return nil
}

func (x *MatchInfo) GetSeason() string {
	if x != nil {
		return x.Season
	}
	return ""
}

type Participant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Puuid         string `protobuf:"bytes,1,opt,name=puuid,proto3" json:"puuid,omitempty"`
	SummonerId    string `protobuf:"bytes,2,opt,name=summoner_id,json=summonerId,proto3" json:"summoner_id,omitempty"`
	SummonerName  string `protobuf:"bytes,3,opt,name=summoner_name,json=summonerName,proto3" json:"summoner_name,omitempty"`
	ParticipantId int32  `protobuf:"varint,4,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`
	TeamId        int32  `protobuf:"varint,5,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	// Champion Information
	ChampionName  string `protobuf:"bytes,6,opt,name=champion_name,json=championName,proto3" json:"champion_name,omitempty"`
	ChampionId    int32  `protobuf:"varint,7,opt,name=champion_id,json=championId,proto3" json:"champion_id,omitempty"`
	ChampionLevel int32  `protobuf:"varint,8,opt,name=champion_level,json=championLevel,proto3" json:"champion_level,omitempty"`
	// Position and Role
	Position string `protobuf:"bytes,9,opt,name=position,proto3" json:"position,omitempty"`
	Role     string `protobuf:"bytes,10,opt,name=role,proto3" json:"role,omitempty"`
	Lane     string `protobuf:"bytes,11,opt,name=lane,proto3" json:"lane,omitempty"`
	// Game Stats
	Stats *ParticipantStats `protobuf:"bytes,12,opt,name=stats,proto3" json:"stats,omitempty"`
	// Items and Build
	Items []int32 `protobuf:"varint,13,rep,packed,name=items,proto3" json:"items,omitempty"`
	Item0 int32   `protobuf:"varint,14,opt,name=item0,proto3" json:"item0,omitempty"`
	Item1 int32   `protobuf:"varint,15,opt,name=item1,proto3" json:"item1,omitempty"`
	Item2 int32   `protobuf:"varint,16,opt,name=item2,proto3" json:"item2,omitempty"`
	Item3 int32   `protobuf:"varint,17,opt,name=item3,proto3" json:"item3,omitempty"`
	Item4 int32   `protobuf:"varint,18,opt,name=item4,proto3" json:"item4,omitempty"`
	Item5 int32   `protobuf:"varint,19,opt,name=item5,proto3" json:"item5,omitempty"`
	Item6 int32   `protobuf:"varint,20,opt,name=item6,proto3" json:"item6,omitempty"`
	// Runes and Summoner Spells
	Runes          *RuneSelection `protobuf:"bytes,21,opt,name=runes,proto3" json:"runes,omitempty"`
	SummonerSpell1 int32          `protobuf:"varint,22,opt,name=summoner_spell1,json=summonerSpell1,proto3" json:"summoner_spell1,omitempty"`
	SummonerSpell2 int32          `protobuf:"varint,23,opt,name=summoner_spell2,json=summonerSpell2,proto3" json:"summoner_spell2,omitempty"`
	// Performance Metrics
	Performance *ParticipantPerformance `protobuf:"bytes,24,opt,name=performance,proto3" json:"performance,omitempty"`
}

func (x *Participant) Reset() {
	*x = Participant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Participant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Participant) ProtoMessage() {}

func (x *Participant) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Participant.ProtoReflect.Descriptor instead.
func (*Participant) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{14}
}

func (x *Participant) GetPuuid() string {
	if x != nil {
		return x.Puuid
	}
	return ""
}

func (x *Participant) GetSummonerId() string {
	if x != nil {
		return x.SummonerId
	}
	return ""
}

func (x *Participant) GetSummonerName() string {
	if x != nil {
		return x.SummonerName
	}
	return ""
}

func (x *Participant) GetParticipantId() int32 {
	if x != nil {
		return x.ParticipantId
	}
	return 0
}

func (x *Participant) GetTeamId() int32 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *Participant) GetChampionName() string {
	if x != nil {
		return x.ChampionName
	}
	return ""
}

func (x *Participant) GetChampionId() int32 {
	if x != nil {
		return x.ChampionId
	}
	return 0
}

func (x *Participant) GetChampionLevel() int32 {
	if x != nil {
		return x.ChampionLevel
	}
	return 0
}

func (x *Participant) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Participant) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *Participant) GetLane() string {
	if x != nil {
		return x.Lane
	}
	return ""
}

func (x *Participant) GetStats() *ParticipantStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *Participant) GetItems() []int32 {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *Participant) GetItem0() int32 {
	if x != nil {
		return x.Item0
	}
	return 0
}

func (x *Participant) GetItem1() int32 {
	if x != nil {
		return x.Item1
	}
	return 0
}

func (x *Participant) GetItem2() int32 {
	if x != nil {
		return x.Item2
	}
	return 0
}

func (x *Participant) GetItem3() int32 {
	if x != nil {
		return x.Item3
	}
	return 0
}

func (x *Participant) GetItem4() int32 {
	if x != nil {
		return x.Item4
	}
	return 0
}

func (x *Participant) GetItem5() int32 {
	if x != nil {
		return x.Item5
	}
	return 0
}

func (x *Participant) GetItem6() int32 {
	if x != nil {
		return x.Item6
	}
	return 0
}

func (x *Participant) GetRunes() *RuneSelection {
	if x != nil {
		return x.Runes
	}
	return nil
}

func (x *Participant) GetSummonerSpell1() int32 {
	if x != nil {
		return x.SummonerSpell1
	}
	return 0
}

func (x *Participant) GetSummonerSpell2() int32 {
	if x != nil {
		return x.SummonerSpell2
	}
	return 0
}

func (x *Participant) GetPerformance() *ParticipantPerformance {
	if x != nil {
		return x.Performance
	}
	return nil
}

type ParticipantStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// KDA
	Kills   int32   `protobuf:"varint,1,opt,name=kills,proto3" json:"kills,omitempty"`
	Deaths  int32   `protobuf:"varint,2,opt,name=deaths,proto3" json:"deaths,omitempty"`
	Assists int32   `protobuf:"varint,3,opt,name=assists,proto3" json:"assists,omitempty"`
	Kda     float64 `protobuf:"fixed64,4,opt,name=kda,proto3" json:"kda,omitempty"`
	// CS and Gold
	TotalMinionsKilled   int32 `protobuf:"varint,5,opt,name=total_minions_killed,json=totalMinionsKilled,proto3" json:"total_minions_killed,omitempty"`
	NeutralMinionsKilled int32 `protobuf:"varint,6,opt,name=neutral_minions_killed,json=neutralMinionsKilled,proto3" json:"neutral_minions_killed,omitempty"`
	CsPerMinute          int32 `protobuf:"varint,7,opt,name=cs_per_minute,json=csPerMinute,proto3" json:"cs_per_minute,omitempty"`
	GoldEarned           int32 `protobuf:"varint,8,opt,name=gold_earned,json=goldEarned,proto3" json:"gold_earned,omitempty"`
	GoldSpent            int32 `protobuf:"varint,9,opt,name=gold_spent,json=goldSpent,proto3" json:"gold_spent,omitempty"`
	// Damage
	TotalDamageDealt            int64 `protobuf:"varint,10,opt,name=total_damage_dealt,json=totalDamageDealt,proto3" json:"total_damage_dealt,omitempty"`
	TotalDamageDealtToChampions int64 `protobuf:"varint,11,opt,name=total_damage_dealt_to_champions,json=totalDamageDealtToChampions,proto3" json:"total_damage_dealt_to_champions,omitempty"`
	TotalDamageTaken            int64 `protobuf:"varint,12,opt,name=total_damage_taken,json=totalDamageTaken,proto3" json:"total_damage_taken,omitempty"`
	MagicDamageDealt            int64 `protobuf:"varint,13,opt,name=magic_damage_dealt,json=magicDamageDealt,proto3" json:"magic_damage_dealt,omitempty"`
	PhysicalDamageDealt         int64 `protobuf:"varint,14,opt,name=physical_damage_dealt,json=physicalDamageDealt,proto3" json:"physical_damage_dealt,omitempty"`
	TrueDamageDealt             int64 `protobuf:"varint,15,opt,name=true_damage_dealt,json=trueDamageDealt,proto3" json:"true_damage_dealt,omitempty"`
	// Healing and Shielding
	TotalHeal           int64 `protobuf:"varint,16,opt,name=total_heal,json=totalHeal,proto3" json:"total_heal,omitempty"`
	TotalDamageShielded int64 `protobuf:"varint,17,opt,name=total_damage_shielded,json=totalDamageShielded,proto3" json:"total_damage_shielded,omitempty"`
	// Vision
	VisionScore           int32 `protobuf:"varint,18,opt,name=vision_score,json=visionScore,proto3" json:"vision_score,omitempty"`
	WardsPlaced           int32 `protobuf:"varint,19,opt,name=wards_placed,json=wardsPlaced,proto3" json:"wards_placed,omitempty"`
	WardsKilled           int32 `protobuf:"varint,20,opt,name=wards_killed,json=wardsKilled,proto3" json:"wards_killed,omitempty"`
	ControlWardsPurchased int32 `protobuf:"varint,21,opt,name=control_wards_purchased,json=controlWardsPurchased,proto3" json:"control_wards_purchased,omitempty"`
	// Objectives
	TurretsKilled    int32 `protobuf:"varint,22,opt,name=turrets_killed,json=turretsKilled,proto3" json:"turrets_killed,omitempty"`
	InhibitorsKilled int32 `protobuf:"varint,23,opt,name=inhibitors_killed,json=inhibitorsKilled,proto3" json:"inhibitors_killed,omitempty"`
	DragonKills      int32 `protobuf:"varint,24,opt,name=dragon_kills,json=dragonKills,proto3" json:"dragon_kills,omitempty"`
	BaronKills       int32 `protobuf:"varint,25,opt,name=baron_kills,json=baronKills,proto3" json:"baron_kills,omitempty"`
	// Other
	LargestKillingSpree int32 `protobuf:"varint,26,opt,name=largest_killing_spree,json=largestKillingSpree,proto3" json:"largest_killing_spree,omitempty"`
	LargestMultiKill    int32 `protobuf:"varint,27,opt,name=largest_multi_kill,json=largestMultiKill,proto3" json:"largest_multi_kill,omitempty"`
	FirstBloodKill      bool  `protobuf:"varint,28,opt,name=first_blood_kill,json=firstBloodKill,proto3" json:"first_blood_kill,omitempty"`
	FirstTowerKill      bool  `protobuf:"varint,29,opt,name=first_tower_kill,json=firstTowerKill,proto3" json:"first_tower_kill,omitempty"`
	// Combat Stats
	DamagePerMinute   float64 `protobuf:"fixed64,30,opt,name=damage_per_minute,json=damagePerMinute,proto3" json:"damage_per_minute,omitempty"`
	DamageShare       float64 `protobuf:"fixed64,31,opt,name=damage_share,json=damageShare,proto3" json:"damage_share,omitempty"`
	KillParticipation float64 `protobuf:"fixed64,32,opt,name=kill_participation,json=killParticipation,proto3" json:"kill_participation,omitempty"`
}

func (x *ParticipantStats) Reset() {
	*x = ParticipantStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantStats) ProtoMessage() {}

func (x *ParticipantStats) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantStats.ProtoReflect.Descriptor instead.
func (*ParticipantStats) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{15}
}

func (x *ParticipantStats) GetKills() int32 {
	if x != nil {
		return x.Kills
	}
	return 0
}

func (x *ParticipantStats) GetDeaths() int32 {
	if x != nil {
		return x.Deaths
	}
	return 0
}

func (x *ParticipantStats) GetAssists() int32 {
	if x != nil {
		return x.Assists
	}
	return 0
}

func (x *ParticipantStats) GetKda() float64 {
	if x != nil {
		return x.Kda
	}
	return 0
}

func (x *ParticipantStats) GetTotalMinionsKilled() int32 {
	if x != nil {
		return x.TotalMinionsKilled
	}
	return 0
}

func (x *ParticipantStats) GetNeutralMinionsKilled() int32 {
	if x != nil {
		return x.NeutralMinionsKilled
	}
	return 0
}

func (x *ParticipantStats) GetCsPerMinute() int32 {
	if x != nil {
		return x.CsPerMinute
	}
	return 0
}

func (x *ParticipantStats) GetGoldEarned() int32 {
	if x != nil {
		return x.GoldEarned
	}
	return 0
}

func (x *ParticipantStats) GetGoldSpent() int32 {
	if x != nil {
		return x.GoldSpent
	}
	return 0
}

func (x *ParticipantStats) GetTotalDamageDealt() int64 {
	if x != nil {
		return x.TotalDamageDealt
	}
	return 0
}

func (x *ParticipantStats) GetTotalDamageDealtToChampions() int64 {
	if x != nil {
		return x.TotalDamageDealtToChampions
	}
	return 0
}

func (x *ParticipantStats) GetTotalDamageTaken() int64 {
	if x != nil {
		return x.TotalDamageTaken
	}
	return 0
}

func (x *ParticipantStats) GetMagicDamageDealt() int64 {
	if x != nil {
		return x.MagicDamageDealt
	}
	return 0
}

func (x *ParticipantStats) GetPhysicalDamageDealt() int64 {
	if x != nil {
		return x.PhysicalDamageDealt
	}
	return 0
}

func (x *ParticipantStats) GetTrueDamageDealt() int64 {
	if x != nil {
		return x.TrueDamageDealt
	}
	return 0
}

func (x *ParticipantStats) GetTotalHeal() int64 {
	if x != nil {
		return x.TotalHeal
	}
	return 0
}

func (x *ParticipantStats) GetTotalDamageShielded() int64 {
	if x != nil {
		return x.TotalDamageShielded
	}
	return 0
}

func (x *ParticipantStats) GetVisionScore() int32 {
	if x != nil {
		return x.VisionScore
	}
	return 0
}

func (x *ParticipantStats) GetWardsPlaced() int32 {
	if x != nil {
		return x.WardsPlaced
	}
	return 0
}

func (x *ParticipantStats) GetWardsKilled() int32 {
	if x != nil {
		return x.WardsKilled
	}
	return 0
}

func (x *ParticipantStats) GetControlWardsPurchased() int32 {
	if x != nil {
		return x.ControlWardsPurchased
	}
	return 0
}

func (x *ParticipantStats) GetTurretsKilled() int32 {
	if x != nil {
		return x.TurretsKilled
	}
	return 0
}

func (x *ParticipantStats) GetInhibitorsKilled() int32 {
	if x != nil {
		return x.InhibitorsKilled
	}
	return 0
}

func (x *ParticipantStats) GetDragonKills() int32 {
	if x != nil {
		return x.DragonKills
	}
	return 0
}

func (x *ParticipantStats) GetBaronKills() int32 {
	if x != nil {
		return x.BaronKills
	}
	return 0
}

func (x *ParticipantStats) GetLargestKillingSpree() int32 {
	if x != nil {
		return x.LargestKillingSpree
	}
	return 0
}

func (x *ParticipantStats) GetLargestMultiKill() int32 {
	if x != nil {
		return x.LargestMultiKill
	}
	return 0
}

func (x *ParticipantStats) GetFirstBloodKill() bool {
	if x != nil {
		return x.FirstBloodKill
	}
	return false
}

func (x *ParticipantStats) GetFirstTowerKill() bool {
	if x != nil {
		return x.FirstTowerKill
	}
	return false
}

func (x *ParticipantStats) GetDamagePerMinute() float64 {
	if x != nil {
		return x.DamagePerMinute
	}
	return 0
}

func (x *ParticipantStats) GetDamageShare() float64 {
	if x != nil {
		return x.DamageShare
	}
	return 0
}

func (x *ParticipantStats) GetKillParticipation() float64 {
	if x != nil {
		return x.KillParticipation
	}
	return 0
}

type RuneSelection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrimaryStyle   int32   `protobuf:"varint,1,opt,name=primary_style,json=primaryStyle,proto3" json:"primary_style,omitempty"`
	SecondaryStyle int32   `protobuf:"varint,2,opt,name=secondary_style,json=secondaryStyle,proto3" json:"secondary_style,omitempty"`
	Perks          []int32 `protobuf:"varint,3,rep,packed,name=perks,proto3" json:"perks,omitempty"`
	StatPerks      []int32 `protobuf:"varint,4,rep,packed,name=stat_perks,json=statPerks,proto3" json:"stat_perks,omitempty"`
}

func (x *RuneSelection) Reset() {
	*x = RuneSelection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuneSelection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuneSelection) ProtoMessage() {}

func (x *RuneSelection) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuneSelection.ProtoReflect.Descriptor instead.
func (*RuneSelection) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{16}
}

func (x *RuneSelection) GetPrimaryStyle() int32 {
	if x != nil {
		return x.PrimaryStyle
	}
	return 0
}

func (x *RuneSelection) GetSecondaryStyle() int32 {
	if x != nil {
		return x.SecondaryStyle
	}
	return 0
}

func (x *RuneSelection) GetPerks() []int32 {
	if x != nil {
		return x.Perks
	}
	return nil
}

func (x *RuneSelection) GetStatPerks() []int32 {
	if x != nil {
		return x.StatPerks
	}
	return nil
}

type ParticipantPerformance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OverallRating        float64 `protobuf:"fixed64,1,opt,name=overall_rating,json=overallRating,proto3" json:"overall_rating,omitempty"`
	EarlyGameRating      float64 `protobuf:"fixed64,2,opt,name=early_game_rating,json=earlyGameRating,proto3" json:"early_game_rating,omitempty"`
	MidGameRating        float64 `protobuf:"fixed64,3,opt,name=mid_game_rating,json=midGameRating,proto3" json:"mid_game_rating,omitempty"`
	LateGameRating       float64 `protobuf:"fixed64,4,opt,name=late_game_rating,json=lateGameRating,proto3" json:"late_game_rating,omitempty"`
	LaningRating         float64 `protobuf:"fixed64,5,opt,name=laning_rating,json=laningRating,proto3" json:"laning_rating,omitempty"`
	TeamFightingRating   float64 `protobuf:"fixed64,6,opt,name=team_fighting_rating,json=teamFightingRating,proto3" json:"team_fighting_rating,omitempty"`
	PositioningRating    float64 `protobuf:"fixed64,7,opt,name=positioning_rating,json=positioningRating,proto3" json:"positioning_rating,omitempty"`
	DecisionMakingRating float64 `protobuf:"fixed64,8,opt,name=decision_making_rating,json=decisionMakingRating,proto3" json:"decision_making_rating,omitempty"`
}

func (x *ParticipantPerformance) Reset() {
	*x = ParticipantPerformance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantPerformance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantPerformance) ProtoMessage() {}

func (x *ParticipantPerformance) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantPerformance.ProtoReflect.Descriptor instead.
func (*ParticipantPerformance) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{17}
}

func (x *ParticipantPerformance) GetOverallRating() float64 {
	if x != nil {
		return x.OverallRating
	}
	return 0
}

func (x *ParticipantPerformance) GetEarlyGameRating() float64 {
	if x != nil {
		return x.EarlyGameRating
	}
	return 0
}

func (x *ParticipantPerformance) GetMidGameRating() float64 {
	if x != nil {
		return x.MidGameRating
	}
	return 0
}

func (x *ParticipantPerformance) GetLateGameRating() float64 {
	if x != nil {
		return x.LateGameRating
	}
	return 0
}

func (x *ParticipantPerformance) GetLaningRating() float64 {
	if x != nil {
		return x.LaningRating
	}
	return 0
}

func (x *ParticipantPerformance) GetTeamFightingRating() float64 {
	if x != nil {
		return x.TeamFightingRating
	}
	return 0
}

func (x *ParticipantPerformance) GetPositioningRating() float64 {
	if x != nil {
		return x.PositioningRating
	}
	return 0
}

func (x *ParticipantPerformance) GetDecisionMakingRating() float64 {
	if x != nil {
		return x.DecisionMakingRating
	}
	return 0
}

type Team struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TeamId     int32           `protobuf:"varint,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	Win        bool            `protobuf:"varint,2,opt,name=win,proto3" json:"win,omitempty"`
	Bans       []*TeamBans     `protobuf:"bytes,3,rep,name=bans,proto3" json:"bans,omitempty"`
	Objectives *TeamObjectives `protobuf:"bytes,4,opt,name=objectives,proto3" json:"objectives,omitempty"`
	TeamStats  *TeamStats      `protobuf:"bytes,5,opt,name=team_stats,json=teamStats,proto3" json:"team_stats,omitempty"`
}

func (x *Team) Reset() {
	*x = Team{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Team) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Team) ProtoMessage() {}

func (x *Team) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Team.ProtoReflect.Descriptor instead.
func (*Team) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{18}
}

func (x *Team) GetTeamId() int32 {
	if x != nil {
		return x.TeamId
	}
	return 0
}

func (x *Team) GetWin() bool {
	if x != nil {
		return x.Win
	}
	return false
}

func (x *Team) GetBans() []*TeamBans {
	if x != nil {
		return x.Bans
	}
	return nil
}

func (x *Team) GetObjectives() *TeamObjectives {
	if x != nil {
		return x.Objectives
	}
	return nil
}

func (x *Team) GetTeamStats() *TeamStats {
	if x != nil {
		return x.TeamStats
	}
	return nil
}

type TeamBans struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChampionId int32 `protobuf:"varint,1,opt,name=champion_id,json=championId,proto3" json:"champion_id,omitempty"`
	PickTurn   int32 `protobuf:"varint,2,opt,name=pick_turn,json=pickTurn,proto3" json:"pick_turn,omitempty"`
}

func (x *TeamBans) Reset() {
	*x = TeamBans{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamBans) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamBans) ProtoMessage() {}

func (x *TeamBans) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamBans.ProtoReflect.Descriptor instead.
func (*TeamBans) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{19}
}

func (x *TeamBans) GetChampionId() int32 {
	if x != nil {
		return x.ChampionId
	}
	return 0
}

func (x *TeamBans) GetPickTurn() int32 {
	if x != nil {
		return x.PickTurn
	}
	return 0
}

type TeamObjectives struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Baron      *ObjectiveInfo `protobuf:"bytes,1,opt,name=baron,proto3" json:"baron,omitempty"`
	Champion   *ObjectiveInfo `protobuf:"bytes,2,opt,name=champion,proto3" json:"champion,omitempty"`
	Dragon     *ObjectiveInfo `protobuf:"bytes,3,opt,name=dragon,proto3" json:"dragon,omitempty"`
	Inhibitor  *ObjectiveInfo `protobuf:"bytes,4,opt,name=inhibitor,proto3" json:"inhibitor,omitempty"`
	RiftHerald *ObjectiveInfo `protobuf:"bytes,5,opt,name=rift_herald,json=riftHerald,proto3" json:"rift_herald,omitempty"`
	Tower      *ObjectiveInfo `protobuf:"bytes,6,opt,name=tower,proto3" json:"tower,omitempty"`
}

func (x *TeamObjectives) Reset() {
	*x = TeamObjectives{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamObjectives) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamObjectives) ProtoMessage() {}

func (x *TeamObjectives) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamObjectives.ProtoReflect.Descriptor instead.
func (*TeamObjectives) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{20}
}

func (x *TeamObjectives) GetBaron() *ObjectiveInfo {
	if x != nil {
		return x.Baron
	}
	return nil
}

func (x *TeamObjectives) GetChampion() *ObjectiveInfo {
	if x != nil {
		return x.Champion
	}
	return nil
}

func (x *TeamObjectives) GetDragon() *ObjectiveInfo {
	if x != nil {
		return x.Dragon
	}
	return nil
}

func (x *TeamObjectives) GetInhibitor() *ObjectiveInfo {
	if x != nil {
		return x.Inhibitor
	}
	return nil
}

func (x *TeamObjectives) GetRiftHerald() *ObjectiveInfo {
	if x != nil {
		return x.RiftHerald
	}
	return nil
}

func (x *TeamObjectives) GetTower() *ObjectiveInfo {
	if x != nil {
		return x.Tower
	}
	return nil
}

type ObjectiveInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	First bool  `protobuf:"varint,1,opt,name=first,proto3" json:"first,omitempty"`
	Kills int32 `protobuf:"varint,2,opt,name=kills,proto3" json:"kills,omitempty"`
}

func (x *ObjectiveInfo) Reset() {
	*x = ObjectiveInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectiveInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectiveInfo) ProtoMessage() {}

func (x *ObjectiveInfo) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectiveInfo.ProtoReflect.Descriptor instead.
func (*ObjectiveInfo) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{21}
}

func (x *ObjectiveInfo) GetFirst() bool {
	if x != nil {
		return x.First
	}
	return false
}

func (x *ObjectiveInfo) GetKills() int32 {
	if x != nil {
		return x.Kills
	}
	return 0
}

type TeamStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalKills      int32   `protobuf:"varint,1,opt,name=total_kills,json=totalKills,proto3" json:"total_kills,omitempty"`
	TotalDeaths     int32   `protobuf:"varint,2,opt,name=total_deaths,json=totalDeaths,proto3" json:"total_deaths,omitempty"`
	TotalAssists    int32   `protobuf:"varint,3,opt,name=total_assists,json=totalAssists,proto3" json:"total_assists,omitempty"`
	TotalGold       int64   `protobuf:"varint,4,opt,name=total_gold,json=totalGold,proto3" json:"total_gold,omitempty"`
	TotalDamage     int64   `protobuf:"varint,5,opt,name=total_damage,json=totalDamage,proto3" json:"total_damage,omitempty"`
	AvgLevel        float64 `protobuf:"fixed64,6,opt,name=avg_level,json=avgLevel,proto3" json:"avg_level,omitempty"`
	GoldPerMinute   float64 `protobuf:"fixed64,7,opt,name=gold_per_minute,json=goldPerMinute,proto3" json:"gold_per_minute,omitempty"`
	DamagePerMinute float64 `protobuf:"fixed64,8,opt,name=damage_per_minute,json=damagePerMinute,proto3" json:"damage_per_minute,omitempty"`
}

func (x *TeamStats) Reset() {
	*x = TeamStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamStats) ProtoMessage() {}

func (x *TeamStats) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamStats.ProtoReflect.Descriptor instead.
func (*TeamStats) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{22}
}

func (x *TeamStats) GetTotalKills() int32 {
	if x != nil {
		return x.TotalKills
	}
	return 0
}

func (x *TeamStats) GetTotalDeaths() int32 {
	if x != nil {
		return x.TotalDeaths
	}
	return 0
}

func (x *TeamStats) GetTotalAssists() int32 {
	if x != nil {
		return x.TotalAssists
	}
	return 0
}

func (x *TeamStats) GetTotalGold() int64 {
	if x != nil {
		return x.TotalGold
	}
	return 0
}

func (x *TeamStats) GetTotalDamage() int64 {
	if x != nil {
		return x.TotalDamage
	}
	return 0
}

func (x *TeamStats) GetAvgLevel() float64 {
	if x != nil {
		return x.AvgLevel
	}
	return 0
}

func (x *TeamStats) GetGoldPerMinute() float64 {
	if x != nil {
		return x.GoldPerMinute
	}
	return 0
}

func (x *TeamStats) GetDamagePerMinute() float64 {
	if x != nil {
		return x.DamagePerMinute
	}
	return 0
}

type MatchAnalysis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchQualityScore float64             `protobuf:"fixed64,1,opt,name=match_quality_score,json=matchQualityScore,proto3" json:"match_quality_score,omitempty"`
	DominantStrategy  string              `protobuf:"bytes,2,opt,name=dominant_strategy,json=dominantStrategy,proto3" json:"dominant_strategy,omitempty"`
	KeyMoments        []string            `protobuf:"bytes,3,rep,name=key_moments,json=keyMoments,proto3" json:"key_moments,omitempty"`
	EarlyGame         *MatchPhaseAnalysis `protobuf:"bytes,4,opt,name=early_game,json=earlyGame,proto3" json:"early_game,omitempty"`
	MidGame           *MatchPhaseAnalysis `protobuf:"bytes,5,opt,name=mid_game,json=midGame,proto3" json:"mid_game,omitempty"`
	LateGame          *MatchPhaseAnalysis `protobuf:"bytes,6,opt,name=late_game,json=lateGame,proto3" json:"late_game,omitempty"`
	VictoryCondition  string              `protobuf:"bytes,7,opt,name=victory_condition,json=victoryCondition,proto3" json:"victory_condition,omitempty"`
	TurningPoints     []string            `protobuf:"bytes,8,rep,name=turning_points,json=turningPoints,proto3" json:"turning_points,omitempty"`
}

func (x *MatchAnalysis) Reset() {
	*x = MatchAnalysis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchAnalysis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchAnalysis) ProtoMessage() {}

func (x *MatchAnalysis) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchAnalysis.ProtoReflect.Descriptor instead.
func (*MatchAnalysis) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{23}
}

func (x *MatchAnalysis) GetMatchQualityScore() float64 {
	if x != nil {
		return x.MatchQualityScore
	}
	return 0
}

func (x *MatchAnalysis) GetDominantStrategy() string {
	if x != nil {
		return x.DominantStrategy
	}
	return ""
}

func (x *MatchAnalysis) GetKeyMoments() []string {
	if x != nil {
		return x.KeyMoments
	}
	return nil
}

func (x *MatchAnalysis) GetEarlyGame() *MatchPhaseAnalysis {
	if x != nil {
		return x.EarlyGame
	}
	return nil
}

func (x *MatchAnalysis) GetMidGame() *MatchPhaseAnalysis {
	if x != nil {
		return x.MidGame
	}
	return nil
}

func (x *MatchAnalysis) GetLateGame() *MatchPhaseAnalysis {
	if x != nil {
		return x.LateGame
	}
	return nil
}

func (x *MatchAnalysis) GetVictoryCondition() string {
	if x != nil {
		return x.VictoryCondition
	}
	return ""
}

func (x *MatchAnalysis) GetTurningPoints() []string {
	if x != nil {
		return x.TurningPoints
	}
	return nil
}

type MatchPhaseAnalysis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhaseName    string               `protobuf:"bytes,1,opt,name=phase_name,json=phaseName,proto3" json:"phase_name,omitempty"`
	StartTime    *durationpb.Duration `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime      *durationpb.Duration `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	DominantTeam string               `protobuf:"bytes,4,opt,name=dominant_team,json=dominantTeam,proto3" json:"dominant_team,omitempty"`
	TeamGoldDiff float64              `protobuf:"fixed64,5,opt,name=team_gold_diff,json=teamGoldDiff,proto3" json:"team_gold_diff,omitempty"`
	KeyEvents    []string             `protobuf:"bytes,6,rep,name=key_events,json=keyEvents,proto3" json:"key_events,omitempty"`
}

func (x *MatchPhaseAnalysis) Reset() {
	*x = MatchPhaseAnalysis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchPhaseAnalysis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchPhaseAnalysis) ProtoMessage() {}

func (x *MatchPhaseAnalysis) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchPhaseAnalysis.ProtoReflect.Descriptor instead.
func (*MatchPhaseAnalysis) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{24}
}

func (x *MatchPhaseAnalysis) GetPhaseName() string {
	if x != nil {
		return x.PhaseName
	}
	return ""
}

func (x *MatchPhaseAnalysis) GetStartTime() *durationpb.Duration {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *MatchPhaseAnalysis) GetEndTime() *durationpb.Duration {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *MatchPhaseAnalysis) GetDominantTeam() string {
	if x != nil {
		return x.DominantTeam
	}
	return ""
}

func (x *MatchPhaseAnalysis) GetTeamGoldDiff() float64 {
	if x != nil {
		return x.TeamGoldDiff
	}
	return 0
}

func (x *MatchPhaseAnalysis) GetKeyEvents() []string {
	if x != nil {
		return x.KeyEvents
	}
	return nil
}

type MatchTimeline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId  string               `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	Events   []*MatchEvent        `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
	Frames   []*MatchFrame        `protobuf:"bytes,3,rep,name=frames,proto3" json:"frames,omitempty"`
	Interval *durationpb.Duration `protobuf:"bytes,4,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (x *MatchTimeline) Reset() {
	*x = MatchTimeline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchTimeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchTimeline) ProtoMessage() {}

func (x *MatchTimeline) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchTimeline.ProtoReflect.Descriptor instead.
func (*MatchTimeline) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{25}
}

func (x *MatchTimeline) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *MatchTimeline) GetEvents() []*MatchEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *MatchTimeline) GetFrames() []*MatchFrame {
	if x != nil {
		return x.Frames
	}
	return nil
}

func (x *MatchTimeline) GetInterval() *durationpb.Duration {
	if x != nil {
		return x.Interval
	}
	return nil
}

type MatchEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp               *durationpb.Duration `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	EventType               string               `protobuf:"bytes,2,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	ParticipantId           int32                `protobuf:"varint,3,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`
	Position                *Position            `protobuf:"bytes,4,opt,name=position,proto3" json:"position,omitempty"`
	EventData               map[string]string    `protobuf:"bytes,5,rep,name=event_data,json=eventData,proto3" json:"event_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AssistingParticipantIds []int32              `protobuf:"varint,6,rep,packed,name=assisting_participant_ids,json=assistingParticipantIds,proto3" json:"assisting_participant_ids,omitempty"`
}

func (x *MatchEvent) Reset() {
	*x = MatchEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchEvent) ProtoMessage() {}

func (x *MatchEvent) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchEvent.ProtoReflect.Descriptor instead.
func (*MatchEvent) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{26}
}

func (x *MatchEvent) GetTimestamp() *durationpb.Duration {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *MatchEvent) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *MatchEvent) GetParticipantId() int32 {
	if x != nil {
		return x.ParticipantId
	}
	return 0
}

func (x *MatchEvent) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *MatchEvent) GetEventData() map[string]string {
	if x != nil {
		return x.EventData
	}
	return nil
}

func (x *MatchEvent) GetAssistingParticipantIds() []int32 {
	if x != nil {
		return x.AssistingParticipantIds
	}
	return nil
}

type MatchFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp         *durationpb.Duration `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ParticipantFrames []*ParticipantFrame  `protobuf:"bytes,2,rep,name=participant_frames,json=participantFrames,proto3" json:"participant_frames,omitempty"`
	Events            []*EventData         `protobuf:"bytes,3,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *MatchFrame) Reset() {
	*x = MatchFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchFrame) ProtoMessage() {}

func (x *MatchFrame) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchFrame.ProtoReflect.Descriptor instead.
func (*MatchFrame) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{27}
}

func (x *MatchFrame) GetTimestamp() *durationpb.Duration {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *MatchFrame) GetParticipantFrames() []*ParticipantFrame {
	if x != nil {
		return x.ParticipantFrames
	}
	return nil
}

func (x *MatchFrame) GetEvents() []*EventData {
	if x != nil {
		return x.Events
	}
	return nil
}

type ParticipantFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParticipantId       int32     `protobuf:"varint,1,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`
	CurrentGold         int32     `protobuf:"varint,2,opt,name=current_gold,json=currentGold,proto3" json:"current_gold,omitempty"`
	TotalGold           int32     `protobuf:"varint,3,opt,name=total_gold,json=totalGold,proto3" json:"total_gold,omitempty"`
	Level               int32     `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	Xp                  int32     `protobuf:"varint,5,opt,name=xp,proto3" json:"xp,omitempty"`
	MinionsKilled       int32     `protobuf:"varint,6,opt,name=minions_killed,json=minionsKilled,proto3" json:"minions_killed,omitempty"`
	JungleMinionsKilled int32     `protobuf:"varint,7,opt,name=jungle_minions_killed,json=jungleMinionsKilled,proto3" json:"jungle_minions_killed,omitempty"`
	Position            *Position `protobuf:"bytes,8,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *ParticipantFrame) Reset() {
	*x = ParticipantFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantFrame) ProtoMessage() {}

func (x *ParticipantFrame) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantFrame.ProtoReflect.Descriptor instead.
func (*ParticipantFrame) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{28}
}

func (x *ParticipantFrame) GetParticipantId() int32 {
	if x != nil {
		return x.ParticipantId
	}
	return 0
}

func (x *ParticipantFrame) GetCurrentGold() int32 {
	if x != nil {
		return x.CurrentGold
	}
	return 0
}

func (x *ParticipantFrame) GetTotalGold() int32 {
	if x != nil {
		return x.TotalGold
	}
	return 0
}

func (x *ParticipantFrame) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ParticipantFrame) GetXp() int32 {
	if x != nil {
		return x.Xp
	}
	return 0
}

func (x *ParticipantFrame) GetMinionsKilled() int32 {
	if x != nil {
		return x.MinionsKilled
	}
	return 0
}

func (x *ParticipantFrame) GetJungleMinionsKilled() int32 {
	if x != nil {
		return x.JungleMinionsKilled
	}
	return 0
}

func (x *ParticipantFrame) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X int32 `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y int32 `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{29}
}

func (x *Position) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Position) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

type EventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType string                 `protobuf:"bytes,1,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Data      map[string]string      `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EventData) Reset() {
	*x = EventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventData) ProtoMessage() {}

func (x *EventData) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventData.ProtoReflect.Descriptor instead.
func (*EventData) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{30}
}

func (x *EventData) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *EventData) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *EventData) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

type LiveMatchData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Participants []*LiveParticipant `protobuf:"bytes,1,rep,name=participants,proto3" json:"participants,omitempty"`
	GameState    *GameState         `protobuf:"bytes,2,opt,name=game_state,json=gameState,proto3" json:"game_state,omitempty"`
	Objectives   *LiveObjectives    `protobuf:"bytes,3,opt,name=objectives,proto3" json:"objectives,omitempty"`
	RecentEvents []*LiveEvent       `protobuf:"bytes,4,rep,name=recent_events,json=recentEvents,proto3" json:"recent_events,omitempty"`
}

func (x *LiveMatchData) Reset() {
	*x = LiveMatchData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveMatchData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveMatchData) ProtoMessage() {}

func (x *LiveMatchData) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveMatchData.ProtoReflect.Descriptor instead.
func (*LiveMatchData) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{31}
}

func (x *LiveMatchData) GetParticipants() []*LiveParticipant {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *LiveMatchData) GetGameState() *GameState {
	if x != nil {
		return x.GameState
	}
	return nil
}

func (x *LiveMatchData) GetObjectives() *LiveObjectives {
	if x != nil {
		return x.Objectives
	}
	return nil
}

func (x *LiveMatchData) GetRecentEvents() []*LiveEvent {
	if x != nil {
		return x.RecentEvents
	}
	return nil
}

type LiveParticipant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParticipantId int32     `protobuf:"varint,1,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`
	Champion      string    `protobuf:"bytes,2,opt,name=champion,proto3" json:"champion,omitempty"`
	Level         int32     `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	CurrentGold   int32     `protobuf:"varint,4,opt,name=current_gold,json=currentGold,proto3" json:"current_gold,omitempty"`
	Kills         int32     `protobuf:"varint,5,opt,name=kills,proto3" json:"kills,omitempty"`
	Deaths        int32     `protobuf:"varint,6,opt,name=deaths,proto3" json:"deaths,omitempty"`
	Assists       int32     `protobuf:"varint,7,opt,name=assists,proto3" json:"assists,omitempty"`
	Cs            int32     `protobuf:"varint,8,opt,name=cs,proto3" json:"cs,omitempty"`
	Position      *Position `protobuf:"bytes,9,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *LiveParticipant) Reset() {
	*x = LiveParticipant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveParticipant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveParticipant) ProtoMessage() {}

func (x *LiveParticipant) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveParticipant.ProtoReflect.Descriptor instead.
func (*LiveParticipant) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{32}
}

func (x *LiveParticipant) GetParticipantId() int32 {
	if x != nil {
		return x.ParticipantId
	}
	return 0
}

func (x *LiveParticipant) GetChampion() string {
	if x != nil {
		return x.Champion
	}
	return ""
}

func (x *LiveParticipant) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *LiveParticipant) GetCurrentGold() int32 {
	if x != nil {
		return x.CurrentGold
	}
	return 0
}

func (x *LiveParticipant) GetKills() int32 {
	if x != nil {
		return x.Kills
	}
	return 0
}

func (x *LiveParticipant) GetDeaths() int32 {
	if x != nil {
		return x.Deaths
	}
	return 0
}

func (x *LiveParticipant) GetAssists() int32 {
	if x != nil {
		return x.Assists
	}
	return 0
}

func (x *LiveParticipant) GetCs() int32 {
	if x != nil {
		return x.Cs
	}
	return 0
}

func (x *LiveParticipant) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

type GameState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameTime           *durationpb.Duration `protobuf:"bytes,1,opt,name=game_time,json=gameTime,proto3" json:"game_time,omitempty"`
	CurrentPhase       string               `protobuf:"bytes,2,opt,name=current_phase,json=currentPhase,proto3" json:"current_phase,omitempty"`
	BlueTeamGold       int32                `protobuf:"varint,3,opt,name=blue_team_gold,json=blueTeamGold,proto3" json:"blue_team_gold,omitempty"`
	RedTeamGold        int32                `protobuf:"varint,4,opt,name=red_team_gold,json=redTeamGold,proto3" json:"red_team_gold,omitempty"`
	WinProbabilityBlue float64              `protobuf:"fixed64,5,opt,name=win_probability_blue,json=winProbabilityBlue,proto3" json:"win_probability_blue,omitempty"`
}

func (x *GameState) Reset() {
	*x = GameState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameState) ProtoMessage() {}

func (x *GameState) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameState.ProtoReflect.Descriptor instead.
func (*GameState) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{33}
}

func (x *GameState) GetGameTime() *durationpb.Duration {
	if x != nil {
		return x.GameTime
	}
	return nil
}

func (x *GameState) GetCurrentPhase() string {
	if x != nil {
		return x.CurrentPhase
	}
	return ""
}

func (x *GameState) GetBlueTeamGold() int32 {
	if x != nil {
		return x.BlueTeamGold
	}
	return 0
}

func (x *GameState) GetRedTeamGold() int32 {
	if x != nil {
		return x.RedTeamGold
	}
	return 0
}

func (x *GameState) GetWinProbabilityBlue() float64 {
	if x != nil {
		return x.WinProbabilityBlue
	}
	return 0
}

type LiveObjectives struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DragonsKilled []string         `protobuf:"bytes,1,rep,name=dragons_killed,json=dragonsKilled,proto3" json:"dragons_killed,omitempty"`
	BaronsKilled  int32            `protobuf:"varint,2,opt,name=barons_killed,json=baronsKilled,proto3" json:"barons_killed,omitempty"`
	HeraldsKilled int32            `protobuf:"varint,3,opt,name=heralds_killed,json=heraldsKilled,proto3" json:"heralds_killed,omitempty"`
	NextDragon    *ObjectiveStatus `protobuf:"bytes,4,opt,name=next_dragon,json=nextDragon,proto3" json:"next_dragon,omitempty"`
	Baron         *ObjectiveStatus `protobuf:"bytes,5,opt,name=baron,proto3" json:"baron,omitempty"`
	Herald        *ObjectiveStatus `protobuf:"bytes,6,opt,name=herald,proto3" json:"herald,omitempty"`
}

func (x *LiveObjectives) Reset() {
	*x = LiveObjectives{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveObjectives) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveObjectives) ProtoMessage() {}

func (x *LiveObjectives) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveObjectives.ProtoReflect.Descriptor instead.
func (*LiveObjectives) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{34}
}

func (x *LiveObjectives) GetDragonsKilled() []string {
	if x != nil {
		return x.DragonsKilled
	}
	return nil
}

func (x *LiveObjectives) GetBaronsKilled() int32 {
	if x != nil {
		return x.BaronsKilled
	}
	return 0
}

func (x *LiveObjectives) GetHeraldsKilled() int32 {
	if x != nil {
		return x.HeraldsKilled
	}
	return 0
}

func (x *LiveObjectives) GetNextDragon() *ObjectiveStatus {
	if x != nil {
		return x.NextDragon
	}
	return nil
}

func (x *LiveObjectives) GetBaron() *ObjectiveStatus {
	if x != nil {
		return x.Baron
	}
	return nil
}

func (x *LiveObjectives) GetHerald() *ObjectiveStatus {
	if x != nil {
		return x.Herald
	}
	return nil
}

type ObjectiveStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectiveType string               `protobuf:"bytes,1,opt,name=objective_type,json=objectiveType,proto3" json:"objective_type,omitempty"`
	SpawnTime     *durationpb.Duration `protobuf:"bytes,2,opt,name=spawn_time,json=spawnTime,proto3" json:"spawn_time,omitempty"`
	IsAvailable   bool                 `protobuf:"varint,3,opt,name=is_available,json=isAvailable,proto3" json:"is_available,omitempty"`
}

func (x *ObjectiveStatus) Reset() {
	*x = ObjectiveStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectiveStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectiveStatus) ProtoMessage() {}

func (x *ObjectiveStatus) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectiveStatus.ProtoReflect.Descriptor instead.
func (*ObjectiveStatus) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{35}
}

func (x *ObjectiveStatus) GetObjectiveType() string {
	if x != nil {
		return x.ObjectiveType
	}
	return ""
}

func (x *ObjectiveStatus) GetSpawnTime() *durationpb.Duration {
	if x != nil {
		return x.SpawnTime
	}
	return nil
}

func (x *ObjectiveStatus) GetIsAvailable() bool {
	if x != nil {
		return x.IsAvailable
	}
	return false
}

type LiveEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp      *durationpb.Duration `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	EventType      string               `protobuf:"bytes,2,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	Description    string               `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	ParticipantIds []int32              `protobuf:"varint,4,rep,packed,name=participant_ids,json=participantIds,proto3" json:"participant_ids,omitempty"`
}

func (x *LiveEvent) Reset() {
	*x = LiveEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveEvent) ProtoMessage() {}

func (x *LiveEvent) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveEvent.ProtoReflect.Descriptor instead.
func (*LiveEvent) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{36}
}

func (x *LiveEvent) GetTimestamp() *durationpb.Duration {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *LiveEvent) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *LiveEvent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *LiveEvent) GetParticipantIds() []int32 {
	if x != nil {
		return x.ParticipantIds
	}
	return nil
}

type MatchSearchCriteria struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId        *string                `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3,oneof" json:"player_id,omitempty"`
	Champion        *string                `protobuf:"bytes,2,opt,name=champion,proto3,oneof" json:"champion,omitempty"`
	Position        *string                `protobuf:"bytes,3,opt,name=position,proto3,oneof" json:"position,omitempty"`
	QueueType       *string                `protobuf:"bytes,4,opt,name=queue_type,json=queueType,proto3,oneof" json:"queue_type,omitempty"`
	Season          *string                `protobuf:"bytes,5,opt,name=season,proto3,oneof" json:"season,omitempty"`
	StartDate       *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start_date,json=startDate,proto3,oneof" json:"start_date,omitempty"`
	EndDate         *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=end_date,json=endDate,proto3,oneof" json:"end_date,omitempty"`
	WinOnly         *bool                  `protobuf:"varint,8,opt,name=win_only,json=winOnly,proto3,oneof" json:"win_only,omitempty"`
	MinGameDuration *int32                 `protobuf:"varint,9,opt,name=min_game_duration,json=minGameDuration,proto3,oneof" json:"min_game_duration,omitempty"`
	MaxGameDuration *int32                 `protobuf:"varint,10,opt,name=max_game_duration,json=maxGameDuration,proto3,oneof" json:"max_game_duration,omitempty"`
}

func (x *MatchSearchCriteria) Reset() {
	*x = MatchSearchCriteria{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchSearchCriteria) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchSearchCriteria) ProtoMessage() {}

func (x *MatchSearchCriteria) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchSearchCriteria.ProtoReflect.Descriptor instead.
func (*MatchSearchCriteria) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{37}
}

func (x *MatchSearchCriteria) GetPlayerId() string {
	if x != nil && x.PlayerId != nil {
		return *x.PlayerId
	}
	return ""
}

func (x *MatchSearchCriteria) GetChampion() string {
	if x != nil && x.Champion != nil {
		return *x.Champion
	}
	return ""
}

func (x *MatchSearchCriteria) GetPosition() string {
	if x != nil && x.Position != nil {
		return *x.Position
	}
	return ""
}

func (x *MatchSearchCriteria) GetQueueType() string {
	if x != nil && x.QueueType != nil {
		return *x.QueueType
	}
	return ""
}

func (x *MatchSearchCriteria) GetSeason() string {
	if x != nil && x.Season != nil {
		return *x.Season
	}
	return ""
}

func (x *MatchSearchCriteria) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *MatchSearchCriteria) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *MatchSearchCriteria) GetWinOnly() bool {
	if x != nil && x.WinOnly != nil {
		return *x.WinOnly
	}
	return false
}

func (x *MatchSearchCriteria) GetMinGameDuration() int32 {
	if x != nil && x.MinGameDuration != nil {
		return *x.MinGameDuration
	}
	return 0
}

func (x *MatchSearchCriteria) GetMaxGameDuration() int32 {
	if x != nil && x.MaxGameDuration != nil {
		return *x.MaxGameDuration
	}
	return 0
}

type MatchSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId      string                 `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	GameDate     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=game_date,json=gameDate,proto3" json:"game_date,omitempty"`
	GameDuration *durationpb.Duration   `protobuf:"bytes,3,opt,name=game_duration,json=gameDuration,proto3" json:"game_duration,omitempty"`
	QueueType    string                 `protobuf:"bytes,4,opt,name=queue_type,json=queueType,proto3" json:"queue_type,omitempty"`
	Champion     string                 `protobuf:"bytes,5,opt,name=champion,proto3" json:"champion,omitempty"`
	Position     string                 `protobuf:"bytes,6,opt,name=position,proto3" json:"position,omitempty"`
	Win          bool                   `protobuf:"varint,7,opt,name=win,proto3" json:"win,omitempty"`
	Kills        int32                  `protobuf:"varint,8,opt,name=kills,proto3" json:"kills,omitempty"`
	Deaths       int32                  `protobuf:"varint,9,opt,name=deaths,proto3" json:"deaths,omitempty"`
	Assists      int32                  `protobuf:"varint,10,opt,name=assists,proto3" json:"assists,omitempty"`
	Kda          float64                `protobuf:"fixed64,11,opt,name=kda,proto3" json:"kda,omitempty"`
	Cs           int32                  `protobuf:"varint,12,opt,name=cs,proto3" json:"cs,omitempty"`
}

func (x *MatchSummary) Reset() {
	*x = MatchSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchSummary) ProtoMessage() {}

func (x *MatchSummary) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchSummary.ProtoReflect.Descriptor instead.
func (*MatchSummary) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{38}
}

func (x *MatchSummary) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *MatchSummary) GetGameDate() *timestamppb.Timestamp {
	if x != nil {
		return x.GameDate
	}
	return nil
}

func (x *MatchSummary) GetGameDuration() *durationpb.Duration {
	if x != nil {
		return x.GameDuration
	}
	return nil
}

func (x *MatchSummary) GetQueueType() string {
	if x != nil {
		return x.QueueType
	}
	return ""
}

func (x *MatchSummary) GetChampion() string {
	if x != nil {
		return x.Champion
	}
	return ""
}

func (x *MatchSummary) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *MatchSummary) GetWin() bool {
	if x != nil {
		return x.Win
	}
	return false
}

func (x *MatchSummary) GetKills() int32 {
	if x != nil {
		return x.Kills
	}
	return 0
}

func (x *MatchSummary) GetDeaths() int32 {
	if x != nil {
		return x.Deaths
	}
	return 0
}

func (x *MatchSummary) GetAssists() int32 {
	if x != nil {
		return x.Assists
	}
	return 0
}

func (x *MatchSummary) GetKda() float64 {
	if x != nil {
		return x.Kda
	}
	return 0
}

func (x *MatchSummary) GetCs() int32 {
	if x != nil {
		return x.Cs
	}
	return 0
}

type MatchProcessResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId     string                 `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	Success     bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Error       *string                `protobuf:"bytes,3,opt,name=error,proto3,oneof" json:"error,omitempty"`
	ProcessedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=processed_at,json=processedAt,proto3" json:"processed_at,omitempty"`
	Stats       *ProcessingStats       `protobuf:"bytes,5,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *MatchProcessResult) Reset() {
	*x = MatchProcessResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchProcessResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchProcessResult) ProtoMessage() {}

func (x *MatchProcessResult) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchProcessResult.ProtoReflect.Descriptor instead.
func (*MatchProcessResult) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{39}
}

func (x *MatchProcessResult) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *MatchProcessResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *MatchProcessResult) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

func (x *MatchProcessResult) GetProcessedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ProcessedAt
	}
	return nil
}

func (x *MatchProcessResult) GetStats() *ProcessingStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type ProcessingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncludeTimeline        bool  `protobuf:"varint,1,opt,name=include_timeline,json=includeTimeline,proto3" json:"include_timeline,omitempty"`
	CalculateAdvancedStats bool  `protobuf:"varint,2,opt,name=calculate_advanced_stats,json=calculateAdvancedStats,proto3" json:"calculate_advanced_stats,omitempty"`
	UpdatePlayerStats      bool  `protobuf:"varint,3,opt,name=update_player_stats,json=updatePlayerStats,proto3" json:"update_player_stats,omitempty"`
	GenerateInsights       bool  `protobuf:"varint,4,opt,name=generate_insights,json=generateInsights,proto3" json:"generate_insights,omitempty"`
	Priority               int32 `protobuf:"varint,5,opt,name=priority,proto3" json:"priority,omitempty"`
}

func (x *ProcessingConfig) Reset() {
	*x = ProcessingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessingConfig) ProtoMessage() {}

func (x *ProcessingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessingConfig.ProtoReflect.Descriptor instead.
func (*ProcessingConfig) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{40}
}

func (x *ProcessingConfig) GetIncludeTimeline() bool {
	if x != nil {
		return x.IncludeTimeline
	}
	return false
}

func (x *ProcessingConfig) GetCalculateAdvancedStats() bool {
	if x != nil {
		return x.CalculateAdvancedStats
	}
	return false
}

func (x *ProcessingConfig) GetUpdatePlayerStats() bool {
	if x != nil {
		return x.UpdatePlayerStats
	}
	return false
}

func (x *ProcessingConfig) GetGenerateInsights() bool {
	if x != nil {
		return x.GenerateInsights
	}
	return false
}

func (x *ProcessingConfig) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

type ProcessingStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcessingTime       *durationpb.Duration `protobuf:"bytes,1,opt,name=processing_time,json=processingTime,proto3" json:"processing_time,omitempty"`
	EventsProcessed      int32                `protobuf:"varint,2,opt,name=events_processed,json=eventsProcessed,proto3" json:"events_processed,omitempty"`
	ParticipantsAnalyzed int32                `protobuf:"varint,3,opt,name=participants_analyzed,json=participantsAnalyzed,proto3" json:"participants_analyzed,omitempty"`
	FromCache            bool                 `protobuf:"varint,4,opt,name=from_cache,json=fromCache,proto3" json:"from_cache,omitempty"`
	ProcessingVersion    string               `protobuf:"bytes,5,opt,name=processing_version,json=processingVersion,proto3" json:"processing_version,omitempty"`
}

func (x *ProcessingStats) Reset() {
	*x = ProcessingStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessingStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessingStats) ProtoMessage() {}

func (x *ProcessingStats) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessingStats.ProtoReflect.Descriptor instead.
func (*ProcessingStats) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{41}
}

func (x *ProcessingStats) GetProcessingTime() *durationpb.Duration {
	if x != nil {
		return x.ProcessingTime
	}
	return nil
}

func (x *ProcessingStats) GetEventsProcessed() int32 {
	if x != nil {
		return x.EventsProcessed
	}
	return 0
}

func (x *ProcessingStats) GetParticipantsAnalyzed() int32 {
	if x != nil {
		return x.ParticipantsAnalyzed
	}
	return 0
}

func (x *ProcessingStats) GetFromCache() bool {
	if x != nil {
		return x.FromCache
	}
	return false
}

func (x *ProcessingStats) GetProcessingVersion() string {
	if x != nil {
		return x.ProcessingVersion
	}
	return ""
}

type BatchProcessingStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalMatches        int32                `protobuf:"varint,1,opt,name=total_matches,json=totalMatches,proto3" json:"total_matches,omitempty"`
	Successful          int32                `protobuf:"varint,2,opt,name=successful,proto3" json:"successful,omitempty"`
	Failed              int32                `protobuf:"varint,3,opt,name=failed,proto3" json:"failed,omitempty"`
	TotalTime           *durationpb.Duration `protobuf:"bytes,4,opt,name=total_time,json=totalTime,proto3" json:"total_time,omitempty"`
	AverageTimePerMatch float64              `protobuf:"fixed64,5,opt,name=average_time_per_match,json=averageTimePerMatch,proto3" json:"average_time_per_match,omitempty"`
	CacheHits           int32                `protobuf:"varint,6,opt,name=cache_hits,json=cacheHits,proto3" json:"cache_hits,omitempty"`
}

func (x *BatchProcessingStats) Reset() {
	*x = BatchProcessingStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_match_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchProcessingStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchProcessingStats) ProtoMessage() {}

func (x *BatchProcessingStats) ProtoReflect() protoreflect.Message {
	mi := &file_match_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchProcessingStats.ProtoReflect.Descriptor instead.
func (*BatchProcessingStats) Descriptor() ([]byte, []int) {
	return file_match_proto_rawDescGZIP(), []int{42}
}

func (x *BatchProcessingStats) GetTotalMatches() int32 {
	if x != nil {
		return x.TotalMatches
	}
	return 0
}

func (x *BatchProcessingStats) GetSuccessful() int32 {
	if x != nil {
		return x.Successful
	}
	return 0
}

func (x *BatchProcessingStats) GetFailed() int32 {
	if x != nil {
		return x.Failed
	}
	return 0
}

func (x *BatchProcessingStats) GetTotalTime() *durationpb.Duration {
	if x != nil {
		return x.TotalTime
	}
	return nil
}

func (x *BatchProcessingStats) GetAverageTimePerMatch() float64 {
	if x != nil {
		return x.AverageTimePerMatch
	}
	return 0
}

func (x *BatchProcessingStats) GetCacheHits() int32 {
	if x != nil {
		return x.CacheHits
	}
	return 0
}

var File_match_proto protoreflect.FileDescriptor

var file_match_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x68,
	0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xac, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x65, 0x72,
	0x61, 0x6c, 0x64, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x72,
	0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x22, 0xba,
	0x01, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x65,
	0x72, 0x61, 0x6c, 0x64, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x4b, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68,
	0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xb7, 0x01, 0x0a, 0x1a,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x39, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x61,
	0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x1b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x22, 0x7f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x10,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x22, 0x9b, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x65,
	0x72, 0x61, 0x6c, 0x64, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x3f, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x22, 0x94, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x08, 0x63, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x65,
	0x72, 0x61, 0x6c, 0x64, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x52, 0x08, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x99, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x37, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x6c, 0x0a, 0x16, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x76,
	0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x22, 0xbb, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x76, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x65, 0x72, 0x61,
	0x6c, 0x64, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xca, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x8b, 0x01, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x65,
	0x72, 0x61, 0x6c, 0x64, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xc0, 0x02, 0x0a, 0x09, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x68, 0x65, 0x72, 0x61,
	0x6c, 0x64, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x05, 0x74, 0x65, 0x61,
	0x6d, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x52, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0x3d,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x41, 0x74, 0x22, 0xda, 0x02,
	0x0a, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x67, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x74, 0x63, 0x68, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75, 0x65, 0x75, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x14, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12,
	0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x96, 0x06, 0x0a, 0x0b, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x75, 0x75, 0x69, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x74, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x30, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x30, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x31, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x32, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x33, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x33, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x34, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x34, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x35, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x35, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x36, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x36,
	0x12, 0x34, 0x0a, 0x05, 0x72, 0x75, 0x6e, 0x65, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x75, 0x6e, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x05, 0x72, 0x75, 0x6e, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e,
	0x65, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x31, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x31, 0x12,
	0x27, 0x0a, 0x0f, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x6c,
	0x6c, 0x32, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x75, 0x6d, 0x6d, 0x6f, 0x6e,
	0x65, 0x72, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x32, 0x12, 0x49, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x22, 0xa8, 0x0a, 0x0a, 0x10, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x69, 0x6c, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x64, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6b,
	0x64, 0x61, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x69, 0x6e, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x4b, 0x69,
	0x6c, 0x6c, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x6e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x5f,
	0x6d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6e, 0x65, 0x75, 0x74, 0x72, 0x61, 0x6c, 0x4d, 0x69, 0x6e,
	0x69, 0x6f, 0x6e, 0x73, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x73,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x63, 0x73, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x6f, 0x6c, 0x64, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x6f, 0x6c, 0x64, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x12, 0x2c,
	0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64,
	0x65, 0x61, 0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x12, 0x44, 0x0a, 0x1f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x61,
	0x6c, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x6e,
	0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x64, 0x65, 0x61, 0x6c, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6d, 0x61,
	0x67, 0x69, 0x63, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x12, 0x32,
	0x0a, 0x15, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x70,
	0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61,
	0x6c, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x72, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74,
	0x72, 0x75, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x12, 0x32, 0x0a,
	0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x68,
	0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x70, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x57, 0x61, 0x72, 0x64, 0x73, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x75, 0x72, 0x72, 0x65, 0x74, 0x73, 0x5f, 0x6b, 0x69,
	0x6c, 0x6c, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x75, 0x72, 0x72,
	0x65, 0x74, 0x73, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x68,
	0x69, 0x62, 0x69, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x69, 0x6e, 0x68, 0x69, 0x62, 0x69, 0x74, 0x6f, 0x72, 0x73,
	0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e,
	0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x72,
	0x61, 0x67, 0x6f, 0x6e, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x72,
	0x6f, 0x6e, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x62, 0x61, 0x72, 0x6f, 0x6e, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x61,
	0x72, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x70,
	0x72, 0x65, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6c, 0x61, 0x72, 0x67, 0x65,
	0x73, 0x74, 0x4b, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x72, 0x65, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f,
	0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6c, 0x61, 0x72, 0x67,
	0x65, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4b, 0x69, 0x6c, 0x6c, 0x12, 0x28, 0x0a, 0x10,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x5f, 0x6b, 0x69, 0x6c, 0x6c,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x42, 0x6c, 0x6f,
	0x6f, 0x64, 0x4b, 0x69, 0x6c, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x74, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x4b, 0x69, 0x6c, 0x6c,
	0x12, 0x2a, 0x0a, 0x11, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x64, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12,
	0x2d, 0x0a, 0x12, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6b, 0x69, 0x6c,
	0x6c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x92,
	0x01, 0x0a, 0x0d, 0x52, 0x75, 0x6e, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x65, 0x72, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x70,
	0x65, 0x72, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x70, 0x65, 0x72,
	0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x50, 0x65,
	0x72, 0x6b, 0x73, 0x22, 0xf9, 0x02, 0x0a, 0x16, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x52,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0f, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x69, 0x64, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6d, 0x69, 0x64, 0x47,
	0x61, 0x6d, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x74,
	0x65, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x6c, 0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x69,
	0x6e, 0x67, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x66, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x74, 0x65, 0x61, 0x6d, 0x46, 0x69, 0x67, 0x68,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x64, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x22,
	0xdc, 0x01, 0x0a, 0x04, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x77, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03,
	0x77, 0x69, 0x6e, 0x12, 0x2d, 0x0a, 0x04, 0x62, 0x61, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x61, 0x6e, 0x73, 0x52, 0x04, 0x62, 0x61,
	0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64,
	0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x48,
	0x0a, 0x08, 0x54, 0x65, 0x61, 0x6d, 0x42, 0x61, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68,
	0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x69, 0x63, 0x6b, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x69, 0x63, 0x6b, 0x54, 0x75, 0x72, 0x6e, 0x22, 0xef, 0x02, 0x0a, 0x0e, 0x54, 0x65, 0x61,
	0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x05, 0x62,
	0x61, 0x72, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x65, 0x72,
	0x61, 0x6c, 0x64, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x62, 0x61, 0x72, 0x6f,
	0x6e, 0x12, 0x3a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a,
	0x06, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x64,
	0x72, 0x61, 0x67, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x09, 0x69, 0x6e, 0x68, 0x69, 0x62, 0x69, 0x74,
	0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c,
	0x64, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x69, 0x6e, 0x68, 0x69, 0x62, 0x69,
	0x74, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x0b, 0x72, 0x69, 0x66, 0x74, 0x5f, 0x68, 0x65, 0x72, 0x61,
	0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c,
	0x64, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x72, 0x69, 0x66, 0x74, 0x48, 0x65,
	0x72, 0x61, 0x6c, 0x64, 0x12, 0x34, 0x0a, 0x05, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x74, 0x6f, 0x77, 0x65, 0x72, 0x22, 0x3b, 0x0a, 0x0d, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x22, 0xa7, 0x02, 0x0a, 0x09, 0x54, 0x65, 0x61, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6b,
	0x69, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x4b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x44, 0x65, 0x61, 0x74, 0x68, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x76, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x26, 0x0a,
	0x0f, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x67, 0x6f, 0x6c, 0x64, 0x50, 0x65, 0x72, 0x4d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x22, 0xa7, 0x03, 0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x64, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x5f, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x65, 0x79, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x42, 0x0a, 0x0a, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x09, 0x65, 0x61, 0x72, 0x6c,
	0x79, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x69, 0x64, 0x5f, 0x67, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64,
	0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x07, 0x6d, 0x69,
	0x64, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c,
	0x64, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x08, 0x6c,
	0x61, 0x74, 0x65, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x76, 0x69, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x76, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x75,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x8d, 0x02, 0x0a, 0x12,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x68, 0x61, 0x73, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x68, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x38, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x65,
	0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
	0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x67,
	0x6f, 0x6c, 0x64, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x74, 0x65, 0x61, 0x6d, 0x47, 0x6f, 0x6c, 0x64, 0x44, 0x69, 0x66, 0x66, 0x12, 0x1d, 0x0a, 0x0a,
	0x6b, 0x65, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x6b, 0x65, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xcb, 0x01, 0x0a, 0x0d,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c,
	0x64, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x33, 0x0a,
	0x06, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x06, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x87, 0x03, 0x0a, 0x0a, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x65, 0x72, 0x61,
	0x6c, 0x64, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49,
	0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x19, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x17, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xcb, 0x01, 0x0a, 0x0a, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x50, 0x0a, 0x12, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64,
	0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x32, 0x0a,
	0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x22, 0xb3, 0x02, 0x0a, 0x10, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x6f, 0x6c, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x6f, 0x6c, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x78, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x78, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d,
	0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x15,
	0x6a, 0x75, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6b,
	0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6a, 0x75, 0x6e,
	0x67, 0x6c, 0x65, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x73, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64,
	0x12, 0x35, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x26, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01,
	0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x79, 0x22,
	0xd7, 0x01, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x1a, 0x37, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x92, 0x02, 0x0a, 0x0d, 0x4c, 0x69,
	0x76, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x0c, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x73, 0x12, 0x39, 0x0a, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x0a,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x73, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x3f, 0x0a,
	0x0d, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x9c,
	0x02, 0x0a, 0x0f, 0x4c, 0x69, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61,
	0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x61,
	0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6b,
	0x69, 0x6c, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x63, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c,
	0x64, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe4, 0x01,
	0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x68, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x6c, 0x75, 0x65,
	0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x62, 0x6c, 0x75, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x22,
	0x0a, 0x0d, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x67, 0x6f, 0x6c, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x54, 0x65, 0x61, 0x6d, 0x47, 0x6f,
	0x6c, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x77, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x12, 0x77, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x42, 0x6c, 0x75, 0x65, 0x22, 0xb8, 0x02, 0x0a, 0x0e, 0x4c, 0x69, 0x76, 0x65, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x72, 0x61, 0x67, 0x6f,
	0x6e, 0x73, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0d, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x73, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x62, 0x61, 0x72, 0x6f, 0x6e, 0x73, 0x5f, 0x6b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x62, 0x61, 0x72, 0x6f, 0x6e, 0x73, 0x4b, 0x69, 0x6c,
	0x6c, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x73, 0x5f, 0x6b,
	0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x68, 0x65, 0x72,
	0x61, 0x6c, 0x64, 0x73, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x64, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x44, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x12, 0x36, 0x0a,
	0x05, 0x62, 0x61, 0x72, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68,
	0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05,
	0x62, 0x61, 0x72, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x06, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x22,
	0x95, 0x01, 0x0a, 0x0f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x73, 0x70,
	0x61, 0x77, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x73, 0x70, 0x61, 0x77, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x09, 0x4c, 0x69, 0x76, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x27, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0xcf, 0x04, 0x0a, 0x13, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x12, 0x20, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x09, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x73, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x48, 0x06, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1e, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x07, 0x77, 0x69, 0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x2f, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x08, 0x52, 0x0f,
	0x6d, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x2f, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52,
	0x0f, 0x6d, 0x61, 0x78, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x77, 0x69, 0x6e, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x67, 0x61, 0x6d,
	0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf5, 0x02, 0x0a, 0x0c, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x3e, 0x0a, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x77, 0x69, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x03, 0x77, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x69, 0x6c, 0x6c,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6b, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x64, 0x65, 0x61, 0x74, 0x68, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x64, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6b,
	0x64, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x63, 0x73, 0x22, 0xe5, 0x01, 0x0a, 0x12, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x19,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x41, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64,
	0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xf0, 0x01, 0x0a, 0x10, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x63, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x83, 0x02,
	0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x42, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x12, 0x33, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x14, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x7a, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x81, 0x02, 0x0a, 0x14, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75,
	0x6c, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x13, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x50, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x5f, 0x68, 0x69, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x48, 0x69, 0x74, 0x73, 0x32, 0xd7, 0x04, 0x0a, 0x0c, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5b, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x24, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c,
	0x64, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x13, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x68,
	0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x68, 0x65, 0x72, 0x61,
	0x6c, 0x64, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x20, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x68, 0x65, 0x72, 0x61,
	0x6c, 0x64, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x0f, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x4c, 0x69, 0x76, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x27, 0x2e, 0x68, 0x65,
	0x72, 0x61, 0x6c, 0x64, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x76, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x30, 0x01, 0x12, 0x67, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x28, 0x2e, 0x68,
	0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2e,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x49, 0x5a, 0x47, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x68, 0x65, 0x72, 0x61, 0x6c, 0x64, 0x2d, 0x6c, 0x6f, 0x6c, 0x2f, 0x68, 0x65, 0x72, 0x61, 0x6c,
	0x64, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x2f, 0x76, 0x31, 0x3b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_match_proto_rawDescOnce sync.Once
	file_match_proto_rawDescData = file_match_proto_rawDesc
)

func file_match_proto_rawDescGZIP() []byte {
	file_match_proto_rawDescOnce.Do(func() {
		file_match_proto_rawDescData = protoimpl.X.CompressGZIP(file_match_proto_rawDescData)
	})
	return file_match_proto_rawDescData
}

var file_match_proto_msgTypes = make([]protoimpl.MessageInfo, 45)
var file_match_proto_goTypes = []interface{}{
	(*ProcessMatchRequest)(nil),         // 0: herald.match.v1.ProcessMatchRequest
	(*ProcessMatchResponse)(nil),        // 1: herald.match.v1.ProcessMatchResponse
	(*BatchProcessMatchesRequest)(nil),  // 2: herald.match.v1.BatchProcessMatchesRequest
	(*BatchProcessMatchesResponse)(nil), // 3: herald.match.v1.BatchProcessMatchesResponse
	(*GetMatchRequest)(nil),             // 4: herald.match.v1.GetMatchRequest
	(*GetMatchResponse)(nil),            // 5: herald.match.v1.GetMatchResponse
	(*SearchMatchesRequest)(nil),        // 6: herald.match.v1.SearchMatchesRequest
	(*SearchMatchesResponse)(nil),       // 7: herald.match.v1.SearchMatchesResponse
	(*StreamLiveMatchRequest)(nil),      // 8: herald.match.v1.StreamLiveMatchRequest
	(*LiveMatchUpdate)(nil),             // 9: herald.match.v1.LiveMatchUpdate
	(*GetMatchTimelineRequest)(nil),     // 10: herald.match.v1.GetMatchTimelineRequest
	(*GetMatchTimelineResponse)(nil),    // 11: herald.match.v1.GetMatchTimelineResponse
	(*MatchData)(nil),                   // 12: herald.match.v1.MatchData
	(*MatchInfo)(nil),                   // 13: herald.match.v1.MatchInfo
	(*Participant)(nil),                 // 14: herald.match.v1.Participant
	(*ParticipantStats)(nil),            // 15: herald.match.v1.ParticipantStats
	(*RuneSelection)(nil),               // 16: herald.match.v1.RuneSelection
	(*ParticipantPerformance)(nil),      // 17: herald.match.v1.ParticipantPerformance
	(*Team)(nil),                        // 18: herald.match.v1.Team
	(*TeamBans)(nil),                    // 19: herald.match.v1.TeamBans
	(*TeamObjectives)(nil),              // 20: herald.match.v1.TeamObjectives
	(*ObjectiveInfo)(nil),               // 21: herald.match.v1.ObjectiveInfo
	(*TeamStats)(nil),                   // 22: herald.match.v1.TeamStats
	(*MatchAnalysis)(nil),               // 23: herald.match.v1.MatchAnalysis
	(*MatchPhaseAnalysis)(nil),          // 24: herald.match.v1.MatchPhaseAnalysis
	(*MatchTimeline)(nil),               // 25: herald.match.v1.MatchTimeline
	(*MatchEvent)(nil),                  // 26: herald.match.v1.MatchEvent
	(*MatchFrame)(nil),                  // 27: herald.match.v1.MatchFrame
	(*ParticipantFrame)(nil),            // 28: herald.match.v1.ParticipantFrame
	(*Position)(nil),                    // 29: herald.match.v1.Position
	(*EventData)(nil),                   // 30: herald.match.v1.EventData
	(*LiveMatchData)(nil),               // 31: herald.match.v1.LiveMatchData
	(*LiveParticipant)(nil),             // 32: herald.match.v1.LiveParticipant
	(*GameState)(nil),                   // 33: herald.match.v1.GameState
	(*LiveObjectives)(nil),              // 34: herald.match.v1.LiveObjectives
	(*ObjectiveStatus)(nil),             // 35: herald.match.v1.ObjectiveStatus
	(*LiveEvent)(nil),                   // 36: herald.match.v1.LiveEvent
	(*MatchSearchCriteria)(nil),         // 37: herald.match.v1.MatchSearchCriteria
	(*MatchSummary)(nil),                // 38: herald.match.v1.MatchSummary
	(*MatchProcessResult)(nil),          // 39: herald.match.v1.MatchProcessResult
	(*ProcessingConfig)(nil),            // 40: herald.match.v1.ProcessingConfig
	(*ProcessingStats)(nil),             // 41: herald.match.v1.ProcessingStats
	(*BatchProcessingStats)(nil),        // 42: herald.match.v1.BatchProcessingStats
	nil,                                 // 43: herald.match.v1.MatchEvent.EventDataEntry
	nil,                                 // 44: herald.match.v1.EventData.DataEntry
	(*timestamppb.Timestamp)(nil),       // 45: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),         // 46: google.protobuf.Duration
}
var file_match_proto_depIdxs = []int32{
	40, // 0: herald.match.v1.ProcessMatchRequest.config:type_name -> herald.match.v1.ProcessingConfig
	12, // 1: herald.match.v1.ProcessMatchResponse.match_data:type_name -> herald.match.v1.MatchData
	41, // 2: herald.match.v1.ProcessMatchResponse.processing_stats:type_name -> herald.match.v1.ProcessingStats
	40, // 3: herald.match.v1.BatchProcessMatchesRequest.config:type_name -> herald.match.v1.ProcessingConfig
	39, // 4: herald.match.v1.BatchProcessMatchesResponse.results:type_name -> herald.match.v1.MatchProcessResult
	42, // 5: herald.match.v1.BatchProcessMatchesResponse.stats:type_name -> herald.match.v1.BatchProcessingStats
	12, // 6: herald.match.v1.GetMatchResponse.match_data:type_name -> herald.match.v1.MatchData
	25, // 7: herald.match.v1.GetMatchResponse.timeline:type_name -> herald.match.v1.MatchTimeline
	37, // 8: herald.match.v1.SearchMatchesRequest.criteria:type_name -> herald.match.v1.MatchSearchCriteria
	38, // 9: herald.match.v1.SearchMatchesResponse.matches:type_name -> herald.match.v1.MatchSummary
	45, // 10: herald.match.v1.LiveMatchUpdate.timestamp:type_name -> google.protobuf.Timestamp
	31, // 11: herald.match.v1.LiveMatchUpdate.data:type_name -> herald.match.v1.LiveMatchData
	46, // 12: herald.match.v1.GetMatchTimelineRequest.start_time:type_name -> google.protobuf.Duration
	46, // 13: herald.match.v1.GetMatchTimelineRequest.end_time:type_name -> google.protobuf.Duration
	25, // 14: herald.match.v1.GetMatchTimelineResponse.timeline:type_name -> herald.match.v1.MatchTimeline
	26, // 15: herald.match.v1.GetMatchTimelineResponse.events:type_name -> herald.match.v1.MatchEvent
	13, // 16: herald.match.v1.MatchData.info:type_name -> herald.match.v1.MatchInfo
	14, // 17: herald.match.v1.MatchData.participants:type_name -> herald.match.v1.Participant
	18, // 18: herald.match.v1.MatchData.teams:type_name -> herald.match.v1.Team
	23, // 19: herald.match.v1.MatchData.analysis:type_name -> herald.match.v1.MatchAnalysis
	45, // 20: herald.match.v1.MatchData.processed_at:type_name -> google.protobuf.Timestamp
	46, // 21: herald.match.v1.MatchInfo.game_duration:type_name -> google.protobuf.Duration
	45, // 22: herald.match.v1.MatchInfo.game_start_timestamp:type_name -> google.protobuf.Timestamp
	15, // 23: herald.match.v1.Participant.stats:type_name -> herald.match.v1.ParticipantStats
	16, // 24: herald.match.v1.Participant.runes:type_name -> herald.match.v1.RuneSelection
	17, // 25: herald.match.v1.Participant.performance:type_name -> herald.match.v1.ParticipantPerformance
	19, // 26: herald.match.v1.Team.bans:type_name -> herald.match.v1.TeamBans
	20, // 27: herald.match.v1.Team.objectives:type_name -> herald.match.v1.TeamObjectives
	22, // 28: herald.match.v1.Team.team_stats:type_name -> herald.match.v1.TeamStats
	21, // 29: herald.match.v1.TeamObjectives.baron:type_name -> herald.match.v1.ObjectiveInfo
	21, // 30: herald.match.v1.TeamObjectives.champion:type_name -> herald.match.v1.ObjectiveInfo
	21, // 31: herald.match.v1.TeamObjectives.dragon:type_name -> herald.match.v1.ObjectiveInfo
	21, // 32: herald.match.v1.TeamObjectives.inhibitor:type_name -> herald.match.v1.ObjectiveInfo
	21, // 33: herald.match.v1.TeamObjectives.rift_herald:type_name -> herald.match.v1.ObjectiveInfo
	21, // 34: herald.match.v1.TeamObjectives.tower:type_name -> herald.match.v1.ObjectiveInfo
	24, // 35: herald.match.v1.MatchAnalysis.early_game:type_name -> herald.match.v1.MatchPhaseAnalysis
	24, // 36: herald.match.v1.MatchAnalysis.mid_game:type_name -> herald.match.v1.MatchPhaseAnalysis
	24, // 37: herald.match.v1.MatchAnalysis.late_game:type_name -> herald.match.v1.MatchPhaseAnalysis
	46, // 38: herald.match.v1.MatchPhaseAnalysis.start_time:type_name -> google.protobuf.Duration
	46, // 39: herald.match.v1.MatchPhaseAnalysis.end_time:type_name -> google.protobuf.Duration
	26, // 40: herald.match.v1.MatchTimeline.events:type_name -> herald.match.v1.MatchEvent
	27, // 41: herald.match.v1.MatchTimeline.frames:type_name -> herald.match.v1.MatchFrame
	46, // 42: herald.match.v1.MatchTimeline.interval:type_name -> google.protobuf.Duration
	46, // 43: herald.match.v1.MatchEvent.timestamp:type_name -> google.protobuf.Duration
	29, // 44: herald.match.v1.MatchEvent.position:type_name -> herald.match.v1.Position
	43, // 45: herald.match.v1.MatchEvent.event_data:type_name -> herald.match.v1.MatchEvent.EventDataEntry
	46, // 46: herald.match.v1.MatchFrame.timestamp:type_name -> google.protobuf.Duration
	28, // 47: herald.match.v1.MatchFrame.participant_frames:type_name -> herald.match.v1.ParticipantFrame
	30, // 48: herald.match.v1.MatchFrame.events:type_name -> herald.match.v1.EventData
	29, // 49: herald.match.v1.ParticipantFrame.position:type_name -> herald.match.v1.Position
	45, // 50: herald.match.v1.EventData.timestamp:type_name -> google.protobuf.Timestamp
	44, // 51: herald.match.v1.EventData.data:type_name -> herald.match.v1.EventData.DataEntry
	32, // 52: herald.match.v1.LiveMatchData.participants:type_name -> herald.match.v1.LiveParticipant
	33, // 53: herald.match.v1.LiveMatchData.game_state:type_name -> herald.match.v1.GameState
	34, // 54: herald.match.v1.LiveMatchData.objectives:type_name -> herald.match.v1.LiveObjectives
	36, // 55: herald.match.v1.LiveMatchData.recent_events:type_name -> herald.match.v1.LiveEvent
	29, // 56: herald.match.v1.LiveParticipant.position:type_name -> herald.match.v1.Position
	46, // 57: herald.match.v1.GameState.game_time:type_name -> google.protobuf.Duration
	35, // 58: herald.match.v1.LiveObjectives.next_dragon:type_name -> herald.match.v1.ObjectiveStatus
	35, // 59: herald.match.v1.LiveObjectives.baron:type_name -> herald.match.v1.ObjectiveStatus
	35, // 60: herald.match.v1.LiveObjectives.herald:type_name -> herald.match.v1.ObjectiveStatus
	46, // 61: herald.match.v1.ObjectiveStatus.spawn_time:type_name -> google.protobuf.Duration
	46, // 62: herald.match.v1.LiveEvent.timestamp:type_name -> google.protobuf.Duration
	45, // 63: herald.match.v1.MatchSearchCriteria.start_date:type_name -> google.protobuf.Timestamp
	45, // 64: herald.match.v1.MatchSearchCriteria.end_date:type_name -> google.protobuf.Timestamp
	45, // 65: herald.match.v1.MatchSummary.game_date:type_name -> google.protobuf.Timestamp
	46, // 66: herald.match.v1.MatchSummary.game_duration:type_name -> google.protobuf.Duration
	45, // 67: herald.match.v1.MatchProcessResult.processed_at:type_name -> google.protobuf.Timestamp
	41, // 68: herald.match.v1.MatchProcessResult.stats:type_name -> herald.match.v1.ProcessingStats
	46, // 69: herald.match.v1.ProcessingStats.processing_time:type_name -> google.protobuf.Duration
	46, // 70: herald.match.v1.BatchProcessingStats.total_time:type_name -> google.protobuf.Duration
	0,  // 71: herald.match.v1.MatchService.ProcessMatch:input_type -> herald.match.v1.ProcessMatchRequest
	2,  // 72: herald.match.v1.MatchService.BatchProcessMatches:input_type -> herald.match.v1.BatchProcessMatchesRequest
	4,  // 73: herald.match.v1.MatchService.GetMatch:input_type -> herald.match.v1.GetMatchRequest
	6,  // 74: herald.match.v1.MatchService.SearchMatches:input_type -> herald.match.v1.SearchMatchesRequest
	8,  // 75: herald.match.v1.MatchService.StreamLiveMatch:input_type -> herald.match.v1.StreamLiveMatchRequest
	10, // 76: herald.match.v1.MatchService.GetMatchTimeline:input_type -> herald.match.v1.GetMatchTimelineRequest
	1,  // 77: herald.match.v1.MatchService.ProcessMatch:output_type -> herald.match.v1.ProcessMatchResponse
	3,  // 78: herald.match.v1.MatchService.BatchProcessMatches:output_type -> herald.match.v1.BatchProcessMatchesResponse
	5,  // 79: herald.match.v1.MatchService.GetMatch:output_type -> herald.match.v1.GetMatchResponse
	7,  // 80: herald.match.v1.MatchService.SearchMatches:output_type -> herald.match.v1.SearchMatchesResponse
	9,  // 81: herald.match.v1.MatchService.StreamLiveMatch:output_type -> herald.match.v1.LiveMatchUpdate
	11, // 82: herald.match.v1.MatchService.GetMatchTimeline:output_type -> herald.match.v1.GetMatchTimelineResponse
	77, // [77:83] is the sub-list for method output_type
	71, // [71:77] is the sub-list for method input_type
	71, // [71:71] is the sub-list for extension type_name
	71, // [71:71] is the sub-list for extension extendee
	0,  // [0:71] is the sub-list for field type_name
}

func init() { file_match_proto_init() }
func file_match_proto_init() {
	if File_match_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_match_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessMatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessMatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchProcessMatchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchProcessMatchesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchMatchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchMatchesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamLiveMatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveMatchUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMatchTimelineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMatchTimelineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Participant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipantStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuneSelection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipantPerformance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Team); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamBans); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamObjectives); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectiveInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchAnalysis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchPhaseAnalysis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchTimeline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipantFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveMatchData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveParticipant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveObjectives); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectiveStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchSearchCriteria); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchProcessResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessingStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_match_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchProcessingStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_match_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_match_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_match_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_match_proto_msgTypes[37].OneofWrappers = []interface{}{}
	file_match_proto_msgTypes[39].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_match_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   45,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_match_proto_goTypes,
		DependencyIndexes: file_match_proto_depIdxs,
		MessageInfos:      file_match_proto_msgTypes,
	}.Build()
	File_match_proto = out.File
	file_match_proto_rawDesc = nil
	file_match_proto_goTypes = nil
	file_match_proto_depIdxs = nil
}
