// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: match.proto

package matchv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MatchService_ProcessMatch_FullMethodName        = "/herald.match.v1.MatchService/ProcessMatch"
	MatchService_BatchProcessMatches_FullMethodName = "/herald.match.v1.MatchService/BatchProcessMatches"
	MatchService_GetMatch_FullMethodName            = "/herald.match.v1.MatchService/GetMatch"
	MatchService_SearchMatches_FullMethodName       = "/herald.match.v1.MatchService/SearchMatches"
	MatchService_StreamLiveMatch_FullMethodName     = "/herald.match.v1.MatchService/StreamLiveMatch"
	MatchService_GetMatchTimeline_FullMethodName    = "/herald.match.v1.MatchService/GetMatchTimeline"
)

// MatchServiceClient is the client API for MatchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MatchServiceClient interface {
	// Process a single match
	ProcessMatch(ctx context.Context, in *ProcessMatchRequest, opts ...grpc.CallOption) (*ProcessMatchResponse, error)
	// Batch process multiple matches
	BatchProcessMatches(ctx context.Context, in *BatchProcessMatchesRequest, opts ...grpc.CallOption) (*BatchProcessMatchesResponse, error)
	// Get match details
	GetMatch(ctx context.Context, in *GetMatchRequest, opts ...grpc.CallOption) (*GetMatchResponse, error)
	// Search matches by criteria
	SearchMatches(ctx context.Context, in *SearchMatchesRequest, opts ...grpc.CallOption) (*SearchMatchesResponse, error)
	// Stream live match updates
	StreamLiveMatch(ctx context.Context, in *StreamLiveMatchRequest, opts ...grpc.CallOption) (MatchService_StreamLiveMatchClient, error)
	// Get match timeline
	GetMatchTimeline(ctx context.Context, in *GetMatchTimelineRequest, opts ...grpc.CallOption) (*GetMatchTimelineResponse, error)
}

type matchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMatchServiceClient(cc grpc.ClientConnInterface) MatchServiceClient {
	return &matchServiceClient{cc}
}

func (c *matchServiceClient) ProcessMatch(ctx context.Context, in *ProcessMatchRequest, opts ...grpc.CallOption) (*ProcessMatchResponse, error) {
	out := new(ProcessMatchResponse)
	err := c.cc.Invoke(ctx, MatchService_ProcessMatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchServiceClient) BatchProcessMatches(ctx context.Context, in *BatchProcessMatchesRequest, opts ...grpc.CallOption) (*BatchProcessMatchesResponse, error) {
	out := new(BatchProcessMatchesResponse)
	err := c.cc.Invoke(ctx, MatchService_BatchProcessMatches_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchServiceClient) GetMatch(ctx context.Context, in *GetMatchRequest, opts ...grpc.CallOption) (*GetMatchResponse, error) {
	out := new(GetMatchResponse)
	err := c.cc.Invoke(ctx, MatchService_GetMatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchServiceClient) SearchMatches(ctx context.Context, in *SearchMatchesRequest, opts ...grpc.CallOption) (*SearchMatchesResponse, error) {
	out := new(SearchMatchesResponse)
	err := c.cc.Invoke(ctx, MatchService_SearchMatches_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchServiceClient) StreamLiveMatch(ctx context.Context, in *StreamLiveMatchRequest, opts ...grpc.CallOption) (MatchService_StreamLiveMatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &MatchService_ServiceDesc.Streams[0], MatchService_StreamLiveMatch_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &matchServiceStreamLiveMatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MatchService_StreamLiveMatchClient interface {
	Recv() (*LiveMatchUpdate, error)
	grpc.ClientStream
}

type matchServiceStreamLiveMatchClient struct {
	grpc.ClientStream
}

func (x *matchServiceStreamLiveMatchClient) Recv() (*LiveMatchUpdate, error) {
	m := new(LiveMatchUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *matchServiceClient) GetMatchTimeline(ctx context.Context, in *GetMatchTimelineRequest, opts ...grpc.CallOption) (*GetMatchTimelineResponse, error) {
	out := new(GetMatchTimelineResponse)
	err := c.cc.Invoke(ctx, MatchService_GetMatchTimeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MatchServiceServer is the server API for MatchService service.
// All implementations must embed UnimplementedMatchServiceServer
// for forward compatibility
type MatchServiceServer interface {
	// Process a single match
	ProcessMatch(context.Context, *ProcessMatchRequest) (*ProcessMatchResponse, error)
	// Batch process multiple matches
	BatchProcessMatches(context.Context, *BatchProcessMatchesRequest) (*BatchProcessMatchesResponse, error)
	// Get match details
	GetMatch(context.Context, *GetMatchRequest) (*GetMatchResponse, error)
	// Search matches by criteria
	SearchMatches(context.Context, *SearchMatchesRequest) (*SearchMatchesResponse, error)
	// Stream live match updates
	StreamLiveMatch(*StreamLiveMatchRequest, MatchService_StreamLiveMatchServer) error
	// Get match timeline
	GetMatchTimeline(context.Context, *GetMatchTimelineRequest) (*GetMatchTimelineResponse, error)
	mustEmbedUnimplementedMatchServiceServer()
}

// UnimplementedMatchServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMatchServiceServer struct {
}

func (UnimplementedMatchServiceServer) ProcessMatch(context.Context, *ProcessMatchRequest) (*ProcessMatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessMatch not implemented")
}
func (UnimplementedMatchServiceServer) BatchProcessMatches(context.Context, *BatchProcessMatchesRequest) (*BatchProcessMatchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchProcessMatches not implemented")
}
func (UnimplementedMatchServiceServer) GetMatch(context.Context, *GetMatchRequest) (*GetMatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatch not implemented")
}
func (UnimplementedMatchServiceServer) SearchMatches(context.Context, *SearchMatchesRequest) (*SearchMatchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchMatches not implemented")
}
func (UnimplementedMatchServiceServer) StreamLiveMatch(*StreamLiveMatchRequest, MatchService_StreamLiveMatchServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamLiveMatch not implemented")
}
func (UnimplementedMatchServiceServer) GetMatchTimeline(context.Context, *GetMatchTimelineRequest) (*GetMatchTimelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatchTimeline not implemented")
}
func (UnimplementedMatchServiceServer) mustEmbedUnimplementedMatchServiceServer() {}

// UnsafeMatchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatchServiceServer will
// result in compilation errors.
type UnsafeMatchServiceServer interface {
	mustEmbedUnimplementedMatchServiceServer()
}

func RegisterMatchServiceServer(s grpc.ServiceRegistrar, srv MatchServiceServer) {
	s.RegisterService(&MatchService_ServiceDesc, srv)
}

func _MatchService_ProcessMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServiceServer).ProcessMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchService_ProcessMatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServiceServer).ProcessMatch(ctx, req.(*ProcessMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchService_BatchProcessMatches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchProcessMatchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServiceServer).BatchProcessMatches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchService_BatchProcessMatches_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServiceServer).BatchProcessMatches(ctx, req.(*BatchProcessMatchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchService_GetMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServiceServer).GetMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchService_GetMatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServiceServer).GetMatch(ctx, req.(*GetMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchService_SearchMatches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchMatchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServiceServer).SearchMatches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchService_SearchMatches_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServiceServer).SearchMatches(ctx, req.(*SearchMatchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchService_StreamLiveMatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamLiveMatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MatchServiceServer).StreamLiveMatch(m, &matchServiceStreamLiveMatchServer{stream})
}

type MatchService_StreamLiveMatchServer interface {
	Send(*LiveMatchUpdate) error
	grpc.ServerStream
}

type matchServiceStreamLiveMatchServer struct {
	grpc.ServerStream
}

func (x *matchServiceStreamLiveMatchServer) Send(m *LiveMatchUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _MatchService_GetMatchTimeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMatchTimelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServiceServer).GetMatchTimeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatchService_GetMatchTimeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServiceServer).GetMatchTimeline(ctx, req.(*GetMatchTimelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MatchService_ServiceDesc is the grpc.ServiceDesc for MatchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MatchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "herald.match.v1.MatchService",
	HandlerType: (*MatchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessMatch",
			Handler:    _MatchService_ProcessMatch_Handler,
		},
		{
			MethodName: "BatchProcessMatches",
			Handler:    _MatchService_BatchProcessMatches_Handler,
		},
		{
			MethodName: "GetMatch",
			Handler:    _MatchService_GetMatch_Handler,
		},
		{
			MethodName: "SearchMatches",
			Handler:    _MatchService_SearchMatches_Handler,
		},
		{
			MethodName: "GetMatchTimeline",
			Handler:    _MatchService_GetMatchTimeline_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamLiveMatch",
			Handler:       _MatchService_StreamLiveMatch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "match.proto",
}
