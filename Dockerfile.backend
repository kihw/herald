# Multi-stage Docker build for Go backend
FROM node:18-alpine AS web-builder

# Set working directory for web build
WORKDIR /app/web

# Copy web package files
COPY web/package*.json ./

# Install ALL web dependencies (including dev dependencies needed for build)
RUN npm ci

# Copy web source
COPY web/ ./

# Build web assets
RUN npm run build

# Go builder stage
FROM golang:1.23-alpine AS go-builder

# Install build dependencies
RUN apk add --no-cache git ca-certificates tzdata

# Set working directory
WORKDIR /app

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy source code
COPY cmd/ cmd/
COPY internal/ internal/
COPY main.go .

# Copy built web files from web-builder stage
COPY --from=web-builder /app/web/dist/ web/dist/

# Build the application using main.go or cmd/server
RUN if [ -f "./main.go" ]; then \
  CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o server ./main.go; \
  else \
  CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o server ./cmd/server; \
  fi

# Production stage
FROM alpine:latest AS production

# Install runtime dependencies
RUN apk --no-cache add ca-certificates curl tzdata

# Create non-root user
RUN addgroup -g 1000 appgroup && \
  adduser -D -s /bin/sh -u 1000 -G appgroup appuser

# Set working directory
WORKDIR /app

# Copy binary from go-builder stage
COPY --from=go-builder /app/server .

# Copy web files for static serving
COPY --from=go-builder /app/web/dist/ web/dist/

# Create necessary directories
RUN mkdir -p logs data exports config web/dist && chown -R appuser:appgroup /app

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:8000/api/health || exit 1

# Run the application
CMD ["./server"]
