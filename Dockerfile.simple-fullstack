# Simplified fullstack build using pre-compiled frontend
FROM golang:1.23-alpine AS backend-builder

# Install build dependencies
RUN apk add --no-cache git ca-certificates tzdata

# Set working directory
WORKDIR /app

# Copy go mod files
COPY go.mod go.sum ./
RUN go mod download

# Copy source files
COPY main.go ./
COPY cmd/real-server/ cmd/real-server/
COPY internal/ internal/

# Build the application
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o server main.go

# Production stage with Nginx
FROM nginx:alpine AS production

# Install curl and openssl for health checks and SSL
RUN apk --no-cache add curl openssl

# Copy custom nginx configuration
COPY nginx/nginx-fullstack.conf /etc/nginx/nginx.conf

# Copy pre-compiled frontend
COPY web/dist/ /usr/share/nginx/html/

# Copy backend binary
COPY --from=backend-builder /app/server /usr/local/bin/server

# Create directories and fix permissions
RUN mkdir -p /app/data /app/logs /app/exports && \
    chmod +x /usr/local/bin/server && \
    chmod -R 755 /usr/share/nginx/html && \
    chown -R nginx:nginx /usr/share/nginx/html

# Copy startup script
COPY scripts/start-fullstack.sh /start.sh
RUN chmod +x /start.sh

# Expose port
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost/api/health || exit 1

# Start both services
CMD ["/start.sh"]
