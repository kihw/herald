version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: lol-postgres
    environment:
      POSTGRES_DB: lol_match_db
      POSTGRES_USER: lol_user
      POSTGRES_PASSWORD: lol_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lol_user -d lol_match_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for sessions and caching
  redis:
    image: redis:7-alpine
    container_name: lol-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Go Backend Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: lol-app
    ports:
      - "8000:8000"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=lol_user
      - DB_PASSWORD=lol_password
      - DB_NAME=lol_match_db
      - REDIS_ADDR=redis:6379
      - REDIS_PASSWORD=
      - REDIS_DB=0
      - SESSION_SECRET=your-super-secret-session-key-change-this-in-production
      - RIOT_API_KEY=RGAPI-1b22f013-ed33-4991-9c64-625f37180c23
      - PORT=8000
      - GIN_MODE=release
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Frontend (served by backend in production)
  # For development, use separate React dev server

volumes:
  postgres_data:
  redis_data:
