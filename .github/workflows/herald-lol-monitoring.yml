# Herald.lol Gaming Analytics - Monitoring and Alerting Pipeline
name: üìä Herald.lol Monitoring & Alerts

on:
  schedule:
    # Run every 15 minutes for gaming performance monitoring
    - cron: '*/15 * * * *'
    # Daily comprehensive health check at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      check_type:
        description: 'Type of health check'
        required: true
        default: 'quick'
        type: choice
        options:
          - quick
          - comprehensive
          - performance
          - security
      environment:
        description: 'Environment to monitor'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

# Herald.lol monitoring configuration
env:
  PRODUCTION_URL: 'https://herald.lol'
  STAGING_URL: 'https://staging.herald.lol'
  PERFORMANCE_THRESHOLD_ANALYTICS: 5000    # <5s requirement
  PERFORMANCE_THRESHOLD_UI: 2000          # <2s requirement
  UPTIME_THRESHOLD: 99.9                  # 99.9% requirement

jobs:
  # =============================================================================
  # GAMING HEALTH MONITORING
  # =============================================================================
  gaming-health-check:
    name: üéÆ Gaming Health Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Determine Environment URL
        id: env-setup
        run: |
          if [[ "${{ inputs.environment }}" == "staging" ]]; then
            echo "url=${{ env.STAGING_URL }}" >> $GITHUB_OUTPUT
            echo "env=staging" >> $GITHUB_OUTPUT
          else
            echo "url=${{ env.PRODUCTION_URL }}" >> $GITHUB_OUTPUT
            echo "env=production" >> $GITHUB_OUTPUT
          fi

      - name: Gaming Platform Health Check
        env:
          HERALD_URL: ${{ steps.env-setup.outputs.url }}
        run: |
          echo "üéÆ Herald.lol Gaming Platform Health Check"
          echo "Environment: ${{ steps.env-setup.outputs.env }}"
          echo "URL: $HERALD_URL"
          echo ""
          
          # Basic health check
          if curl -f -s "$HERALD_URL/health" > /dev/null; then
            echo "‚úÖ Herald.lol platform is UP"
          else
            echo "‚ùå Herald.lol platform is DOWN"
            exit 1
          fi
          
          # API health check
          if curl -f -s "$HERALD_URL/api/health" > /dev/null; then
            echo "‚úÖ Herald.lol API is UP"
          else
            echo "‚ùå Herald.lol API is DOWN"
            exit 1
          fi

      - name: Gaming Analytics Health Check
        env:
          HERALD_URL: ${{ steps.env-setup.outputs.url }}
        run: |
          echo "üìä Herald.lol Gaming Analytics Health Check"
          
          # Gaming analytics endpoints
          gaming_endpoints=(
            "/api/analytics/health"
            "/api/analytics/kda/health"
            "/api/analytics/cs/health"
            "/api/analytics/vision/health"
            "/api/analytics/damage/health"
            "/api/analytics/gold/health"
          )
          
          failed_endpoints=0
          
          for endpoint in "${gaming_endpoints[@]}"; do
            if curl -f -s "$HERALD_URL$endpoint" > /dev/null; then
              echo "‚úÖ Gaming Analytics: $endpoint"
            else
              echo "‚ùå Gaming Analytics: $endpoint"
              failed_endpoints=$((failed_endpoints + 1))
            fi
          done
          
          if [ $failed_endpoints -gt 0 ]; then
            echo "‚ö†Ô∏è  $failed_endpoints gaming analytics endpoints failed"
            if [ $failed_endpoints -gt 2 ]; then
              echo "‚ùå Critical: Too many gaming analytics failures"
              exit 1
            fi
          else
            echo "‚úÖ All gaming analytics endpoints healthy"
          fi

      - name: Gaming Features Health Check
        env:
          HERALD_URL: ${{ steps.env-setup.outputs.url }}
        run: |
          echo "üéØ Herald.lol Gaming Features Health Check"
          
          # Gaming feature endpoints
          gaming_features=(
            "/api/team-composition/health"
            "/api/counter-picks/health"
            "/api/skill-progression/health"
            "/api/coaching/health"
            "/api/riot/health"
          )
          
          for endpoint in "${gaming_features[@]}"; do
            if curl -f -s "$HERALD_URL$endpoint" > /dev/null; then
              echo "‚úÖ Gaming Feature: $endpoint"
            else
              echo "‚ö†Ô∏è  Gaming Feature: $endpoint (non-critical)"
            fi
          done

  # =============================================================================
  # GAMING PERFORMANCE MONITORING
  # =============================================================================
  gaming-performance-check:
    name: ‚ö° Gaming Performance Check
    runs-on: ubuntu-latest
    if: ${{ inputs.check_type == 'performance' || inputs.check_type == 'comprehensive' || github.event_name == 'schedule' }}
    
    steps:
      - name: Determine Environment URL
        id: env-setup
        run: |
          if [[ "${{ inputs.environment }}" == "staging" ]]; then
            echo "url=${{ env.STAGING_URL }}" >> $GITHUB_OUTPUT
            echo "env=staging" >> $GITHUB_OUTPUT
          else
            echo "url=${{ env.PRODUCTION_URL }}" >> $GITHUB_OUTPUT
            echo "env=production" >> $GITHUB_OUTPUT
          fi

      - name: Gaming Analytics Performance Test
        env:
          HERALD_URL: ${{ steps.env-setup.outputs.url }}
        run: |
          echo "‚ö° Herald.lol Gaming Analytics Performance Test"
          echo "Target: <${{ env.PERFORMANCE_THRESHOLD_ANALYTICS }}ms per analytics request"
          echo ""
          
          # Gaming analytics performance test
          gaming_analytics=(
            "/api/analytics/kda"
            "/api/analytics/cs"
            "/api/analytics/vision"
            "/api/analytics/damage"
            "/api/analytics/gold"
          )
          
          total_time=0
          failed_tests=0
          
          for endpoint in "${gaming_analytics[@]}"; do
            echo "Testing: $endpoint"
            
            # Measure response time
            start_time=$(date +%s%3N)
            if curl -f -s "$HERALD_URL$endpoint" > /dev/null; then
              end_time=$(date +%s%3N)
              response_time=$((end_time - start_time))
              total_time=$((total_time + response_time))
              
              if [ $response_time -lt ${{ env.PERFORMANCE_THRESHOLD_ANALYTICS }} ]; then
                echo "‚úÖ $endpoint: ${response_time}ms (PASS)"
              else
                echo "‚ùå $endpoint: ${response_time}ms (FAIL - >${{ env.PERFORMANCE_THRESHOLD_ANALYTICS }}ms)"
                failed_tests=$((failed_tests + 1))
              fi
            else
              echo "‚ùå $endpoint: Request failed"
              failed_tests=$((failed_tests + 1))
            fi
          done
          
          # Calculate average
          average_time=$((total_time / ${#gaming_analytics[@]}))
          echo ""
          echo "üìä Gaming Analytics Performance Summary:"
          echo "Average Response Time: ${average_time}ms"
          echo "Failed Tests: $failed_tests/${#gaming_analytics[@]}"
          
          if [ $failed_tests -gt 0 ]; then
            echo "‚ùå Gaming analytics performance requirements NOT met"
            exit 1
          else
            echo "‚úÖ Gaming analytics performance requirements met"
          fi

      - name: Gaming UI Performance Test
        env:
          HERALD_URL: ${{ steps.env-setup.outputs.url }}
        run: |
          echo "üé® Herald.lol Gaming UI Performance Test"
          echo "Target: <${{ env.PERFORMANCE_THRESHOLD_UI }}ms for UI load"
          
          # Test main gaming pages
          gaming_pages=(
            "/"
            "/analytics"
            "/matches"
            "/team-composition"
            "/counter-picks"
          )
          
          failed_pages=0
          
          for page in "${gaming_pages[@]}"; do
            echo "Testing: $page"
            
            start_time=$(date +%s%3N)
            if curl -f -s "$HERALD_URL$page" > /dev/null; then
              end_time=$(date +%s%3N)
              response_time=$((end_time - start_time))
              
              if [ $response_time -lt ${{ env.PERFORMANCE_THRESHOLD_UI }} ]; then
                echo "‚úÖ $page: ${response_time}ms (PASS)"
              else
                echo "‚ùå $page: ${response_time}ms (FAIL - >${{ env.PERFORMANCE_THRESHOLD_UI }}ms)"
                failed_pages=$((failed_pages + 1))
              fi
            else
              echo "‚ùå $page: Request failed"
              failed_pages=$((failed_pages + 1))
            fi
          done
          
          if [ $failed_pages -gt 0 ]; then
            echo "‚ùå Gaming UI performance requirements NOT met"
            exit 1
          else
            echo "‚úÖ Gaming UI performance requirements met"
          fi

  # =============================================================================
  # GAMING SECURITY MONITORING
  # =============================================================================
  gaming-security-check:
    name: üõ°Ô∏è Gaming Security Check
    runs-on: ubuntu-latest
    if: ${{ inputs.check_type == 'security' || inputs.check_type == 'comprehensive' || github.event_name == 'schedule' }}
    
    steps:
      - name: Determine Environment URL
        id: env-setup
        run: |
          if [[ "${{ inputs.environment }}" == "staging" ]]; then
            echo "url=${{ env.STAGING_URL }}" >> $GITHUB_OUTPUT
            echo "env=staging" >> $GITHUB_OUTPUT
          else
            echo "url=${{ env.PRODUCTION_URL }}" >> $GITHUB_OUTPUT
            echo "env=production" >> $GITHUB_OUTPUT
          fi

      - name: Gaming Security Headers Check
        env:
          HERALD_URL: ${{ steps.env-setup.outputs.url }}
        run: |
          echo "üõ°Ô∏è Herald.lol Gaming Security Headers Check"
          
          # Check security headers
          response=$(curl -I -s "$HERALD_URL")
          
          security_headers=(
            "X-Content-Type-Options: nosniff"
            "X-Frame-Options"
            "X-XSS-Protection"
            "Strict-Transport-Security"
            "Content-Security-Policy"
          )
          
          missing_headers=0
          
          for header in "${security_headers[@]}"; do
            if echo "$response" | grep -i "$header" > /dev/null; then
              echo "‚úÖ Security Header: $header"
            else
              echo "‚ö†Ô∏è  Missing Security Header: $header"
              missing_headers=$((missing_headers + 1))
            fi
          done
          
          if [ $missing_headers -gt 2 ]; then
            echo "‚ùå Too many missing security headers"
            exit 1
          fi

      - name: Gaming API Security Check
        env:
          HERALD_URL: ${{ steps.env-setup.outputs.url }}
        run: |
          echo "üîê Herald.lol Gaming API Security Check"
          
          # Test for common security vulnerabilities
          
          # Check for exposed sensitive endpoints
          sensitive_endpoints=(
            "/api/admin"
            "/api/debug"
            "/api/config"
            "/api/.env"
            "/api/swagger"
          )
          
          for endpoint in "${sensitive_endpoints[@]}"; do
            if curl -f -s "$HERALD_URL$endpoint" > /dev/null; then
              echo "‚ùå SECURITY ALERT: Exposed endpoint $endpoint"
              exit 1
            else
              echo "‚úÖ Protected: $endpoint"
            fi
          done
          
          # Check API rate limiting
          echo "Testing API rate limiting..."
          for i in {1..10}; do
            curl -s "$HERALD_URL/api/analytics/kda" > /dev/null
          done
          
          # 11th request should be rate limited (if implemented)
          if curl -f -s "$HERALD_URL/api/analytics/kda" > /dev/null; then
            echo "‚ö†Ô∏è  Rate limiting may not be properly configured"
          else
            echo "‚úÖ Rate limiting appears to be working"
          fi

  # =============================================================================
  # RIOT API HEALTH MONITORING
  # =============================================================================
  riot-api-health:
    name: üéÆ Riot API Health
    runs-on: ubuntu-latest
    if: ${{ inputs.check_type == 'comprehensive' || github.event_name == 'schedule' }}
    
    steps:
      - name: Determine Environment URL
        id: env-setup
        run: |
          if [[ "${{ inputs.environment }}" == "staging" ]]; then
            echo "url=${{ env.STAGING_URL }}" >> $GITHUB_OUTPUT
            echo "env=staging" >> $GITHUB_OUTPUT
          else
            echo "url=${{ env.PRODUCTION_URL }}" >> $GITHUB_OUTPUT
            echo "env=production" >> $GITHUB_OUTPUT
          fi

      - name: Riot API Integration Health
        env:
          HERALD_URL: ${{ steps.env-setup.outputs.url }}
        run: |
          echo "üéÆ Riot API Integration Health Check"
          
          # Check Riot API status through Herald.lol
          if curl -f -s "$HERALD_URL/api/riot/status" > /dev/null; then
            echo "‚úÖ Riot API integration is healthy"
          else
            echo "‚ö†Ô∏è  Riot API integration may have issues"
          fi
          
          # Check rate limit status
          rate_limit_response=$(curl -s "$HERALD_URL/api/riot/rate-limit-status")
          if echo "$rate_limit_response" | grep -q "healthy"; then
            echo "‚úÖ Riot API rate limits are healthy"
          else
            echo "‚ö†Ô∏è  Riot API rate limits may be approaching limits"
          fi

  # =============================================================================
  # GAMING DATABASE HEALTH
  # =============================================================================
  database-health:
    name: üóÑÔ∏è Database Health Check
    runs-on: ubuntu-latest
    if: ${{ inputs.check_type == 'comprehensive' || github.event_name == 'schedule' }}
    
    steps:
      - name: Determine Environment URL
        id: env-setup
        run: |
          if [[ "${{ inputs.environment }}" == "staging" ]]; then
            echo "url=${{ env.STAGING_URL }}" >> $GITHUB_OUTPUT
            echo "env=staging" >> $GITHUB_OUTPUT
          else
            echo "url=${{ env.PRODUCTION_URL }}" >> $GITHUB_OUTPUT
            echo "env=production" >> $GITHUB_OUTPUT
          fi

      - name: Gaming Database Health Check
        env:
          HERALD_URL: ${{ steps.env-setup.outputs.url }}
        run: |
          echo "üóÑÔ∏è Herald.lol Gaming Database Health Check"
          
          # Check database connectivity through API
          if curl -f -s "$HERALD_URL/api/database/health" > /dev/null; then
            echo "‚úÖ Gaming database is healthy"
          else
            echo "‚ùå Gaming database health check failed"
            exit 1
          fi
          
          # Check Redis connectivity
          if curl -f -s "$HERALD_URL/api/cache/health" > /dev/null; then
            echo "‚úÖ Redis cache is healthy"
          else
            echo "‚ö†Ô∏è  Redis cache health check failed"
          fi

  # =============================================================================
  # COMPREHENSIVE HEALTH REPORT
  # =============================================================================
  health-report:
    name: üìã Health Report Summary
    runs-on: ubuntu-latest
    needs: [gaming-health-check, gaming-performance-check, gaming-security-check, riot-api-health, database-health]
    if: always()
    
    steps:
      - name: Generate Herald.lol Health Report
        run: |
          echo "üìã Herald.lol Gaming Analytics Health Report"
          echo "=========================================="
          echo ""
          echo "**Date:** $(date)"
          echo "**Environment:** ${{ inputs.environment || 'production' }}"
          echo "**Check Type:** ${{ inputs.check_type || 'scheduled' }}"
          echo ""
          echo "## Health Check Results"
          echo ""
          echo "### Gaming Platform Health"
          echo "- Gaming Health Check: ${{ needs.gaming-health-check.result }}"
          echo ""
          echo "### Gaming Performance"
          echo "- Analytics Performance: ${{ needs.gaming-performance-check.result }}"
          echo "- Target: <5s analytics, <2s UI"
          echo ""
          echo "### Gaming Security"
          echo "- Security Check: ${{ needs.gaming-security-check.result }}"
          echo ""
          echo "### External Dependencies"
          echo "- Riot API Health: ${{ needs.riot-api-health.result }}"
          echo "- Database Health: ${{ needs.database-health.result }}"
          echo ""
          echo "## Herald.lol Gaming Requirements Status"
          echo ""
          if [[ "${{ needs.gaming-health-check.result }}" == "success" && "${{ needs.gaming-performance-check.result }}" == "success" ]]; then
            echo "‚úÖ **GAMING PLATFORM HEALTHY**"
            echo "- üéØ Analytics: <5s requirement met"
            echo "- üé® UI: <2s requirement met"
            echo "- üéÆ Gaming Features: All operational"
            echo "- üîí Security: Protected"
          else
            echo "‚ùå **GAMING PLATFORM ISSUES DETECTED**"
            echo "- Check individual test results above"
            echo "- Review Herald.lol gaming requirements"
          fi
          echo ""
          echo "## Gaming Analytics Features Status"
          echo "- ‚úÖ KDA Analysis"
          echo "- ‚úÖ CS/min Tracking"
          echo "- ‚úÖ Vision Score Analytics"
          echo "- ‚úÖ Damage Analysis"
          echo "- ‚úÖ Gold Efficiency"
          echo "- ‚úÖ Team Composition"
          echo "- ‚úÖ Counter-pick Analysis"
          echo "- ‚úÖ Skill Progression"

      - name: Alert on Critical Failures
        if: ${{ needs.gaming-health-check.result == 'failure' || needs.gaming-performance-check.result == 'failure' }}
        run: |
          echo "üö® CRITICAL: Herald.lol Gaming Platform Issues Detected!"
          echo "======================================================="
          echo ""
          echo "**IMMEDIATE ACTION REQUIRED**"
          echo ""
          echo "Gaming Platform Status: ${{ needs.gaming-health-check.result }}"
          echo "Gaming Performance Status: ${{ needs.gaming-performance-check.result }}"
          echo ""
          echo "Herald.lol gaming analytics may be degraded or unavailable."
          echo "Check logs and resolve issues immediately to maintain 99.9% uptime requirement."
          
          # Exit with failure to trigger alerting
          exit 1

# =============================================================================
# WORKFLOW PERMISSIONS
# =============================================================================
permissions:
  contents: read
  issues: write