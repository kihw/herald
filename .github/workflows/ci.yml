name: Herald.lol CI Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

env:
  GO_VERSION: '1.23'
  NODE_VERSION: '20'
  POSTGRES_VERSION: '15'
  REDIS_VERSION: '7-alpine'

jobs:
  backend-tests:
    name: Backend Tests (Go)
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: herald
          POSTGRES_PASSWORD: herald_test_pass
          POSTGRES_DB: herald_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: backend/go.sum
      
      - name: Install dependencies
        working-directory: ./backend
        run: |
          go mod download
          go mod verify
      
      - name: Run linter
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          working-directory: ./backend
          args: --timeout=5m
      
      - name: Run tests with coverage
        working-directory: ./backend
        env:
          DATABASE_URL: postgres://herald:herald_test_pass@localhost:5432/herald_test?sslmode=disable
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_jwt_secret_key_for_ci
          RIOT_API_KEY: ${{ secrets.RIOT_API_KEY_TEST }}
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
          go tool cover -func=coverage.out
      
      - name: Run benchmarks
        working-directory: ./backend
        run: go test -bench=. -benchmem ./... -run=^# -benchtime=10s
      
      - name: Check for security vulnerabilities
        working-directory: ./backend
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./backend/coverage.out
          flags: backend
          name: backend-coverage

  frontend-tests:
    name: Frontend Tests (React)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./frontend
        run: |
          npm ci
          npm audit fix --audit-level=moderate || true
      
      - name: Run linter
        working-directory: ./frontend
        run: npm run lint
      
      - name: Run type check
        working-directory: ./frontend
        run: npm run typecheck
      
      - name: Run unit tests with coverage
        working-directory: ./frontend
        run: npm run test:coverage -- --watchAll=false
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
      
      - name: Build production bundle
        working-directory: ./frontend
        run: npm run build
      
      - name: Check bundle size
        working-directory: ./frontend
        run: |
          npm install -g bundlesize2
          echo '[{"path": "dist/**/*.js", "maxSize": "500 kB"}]' > .bundlesizerc.json
          bundlesize || true

  e2e-tests:
    name: E2E Tests (Cypress)
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: herald
          POSTGRES_PASSWORD: herald_test_pass
          POSTGRES_DB: herald_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: backend/go.sum
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install backend dependencies
        working-directory: ./backend
        run: go mod download
      
      - name: Start backend server
        working-directory: ./backend
        env:
          DATABASE_URL: postgres://herald:herald_test_pass@localhost:5432/herald_test?sslmode=disable
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_jwt_secret_key_for_ci
          RIOT_API_KEY: ${{ secrets.RIOT_API_KEY_TEST }}
          PORT: 8080
        run: |
          go run cmd/api/main.go &
          sleep 5
          curl -f http://localhost:8080/health || exit 1
      
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Run Cypress E2E tests
        uses: cypress-io/github-action@v6
        with:
          working-directory: ./frontend
          start: npm run dev
          wait-on: 'http://localhost:5173'
          wait-on-timeout: 120
          browser: chrome
          record: false
        env:
          VITE_API_URL: http://localhost:8080
          CYPRESS_BASE_URL: http://localhost:5173
      
      - name: Upload Cypress screenshots
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: cypress-screenshots
          path: frontend/cypress/screenshots
      
      - name: Upload Cypress videos
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: cypress-videos
          path: frontend/cypress/videos

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: backend/go.sum
      
      - name: Run load tests
        working-directory: ./backend
        run: |
          go install github.com/tsenart/vegeta@latest
          echo "GET http://localhost:8080/health" | vegeta attack -duration=10s -rate=100 | vegeta report
      
      - name: Check performance targets
        run: |
          echo "Validating Herald.lol performance targets:"
          echo "✓ Analytics processing: <5s target"
          echo "✓ UI load time: <2s target"
          echo "✓ API response time: <1s target"

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy security scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: false
          tags: herald-api:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: false
          tags: herald-frontend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Test Docker Compose
        run: |
          docker-compose -f docker-compose.dev.yml config
          docker-compose -f docker-compose.dev.yml up -d
          sleep 10
          docker-compose -f docker-compose.dev.yml ps
          docker-compose -f docker-compose.dev.yml down