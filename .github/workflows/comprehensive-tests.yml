# Comprehensive Test Suite for LoL Match Exporter
# This workflow runs all types of tests: unit, integration, E2E, performance, and security

name: Comprehensive Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run full test suite daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - unit
          - integration
          - e2e
          - performance
          - security
      environment:
        description: 'Test environment'
        required: true
        default: 'ci'
        type: choice
        options:
          - ci
          - staging
          - production

env:
  GO_VERSION: '1.21'
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  POSTGRES_VERSION: '15'
  REDIS_VERSION: '7'

jobs:
  # Job 1: Setup and Preparation
  setup:
    name: Setup Test Environment
    runs-on: ubuntu-latest
    outputs:
      test-type: ${{ steps.config.outputs.test-type }}
      environment: ${{ steps.config.outputs.environment }}
      cache-key: ${{ steps.cache.outputs.cache-key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure test parameters
        id: config
        run: |
          TEST_TYPE="${{ github.event.inputs.test_type || 'all' }}"
          ENVIRONMENT="${{ github.event.inputs.environment || 'ci' }}"
          
          echo "test-type=$TEST_TYPE" >> $GITHUB_OUTPUT
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          
          echo "Running test type: $TEST_TYPE"
          echo "Environment: $ENVIRONMENT"

      - name: Generate cache key
        id: cache
        run: |
          CACHE_KEY="test-deps-${{ runner.os }}-go${{ env.GO_VERSION }}-node${{ env.NODE_VERSION }}-python${{ env.PYTHON_VERSION }}-${{ hashFiles('**/go.mod', '**/package*.json', '**/requirements.txt') }}"
          echo "cache-key=$CACHE_KEY" >> $GITHUB_OUTPUT

  # Job 2: Go Unit and Integration Tests
  go-tests:
    name: Go Tests (Unit & Integration)
    runs-on: ubuntu-latest
    needs: setup
    if: contains(needs.setup.outputs.test-type, 'all') || contains(needs.setup.outputs.test-type, 'unit') || contains(needs.setup.outputs.test-type, 'integration')
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: lol_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: lol_analytics_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:${{ env.REDIS_VERSION }}
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ needs.setup.outputs.cache-key }}-go
          restore-keys: |
            go-${{ runner.os }}-

      - name: Download Go dependencies
        run: go mod download

      - name: Setup test database
        run: |
          PGPASSWORD=test_password psql -h localhost -U lol_user -d lol_analytics_test -f migrations/001_initial_schema.sql
        env:
          PGPASSWORD: test_password

      - name: Run Go unit tests
        run: |
          go test -v -race -coverprofile=coverage.out ./tests/unit/go/...
        env:
          DATABASE_URL: postgres://lol_user:test_password@localhost:5432/lol_analytics_test
          REDIS_URL: redis://localhost:6379

      - name: Run Go integration tests
        if: contains(needs.setup.outputs.test-type, 'all') || contains(needs.setup.outputs.test-type, 'integration')
        run: |
          go test -v -race ./tests/integration/...
        env:
          DATABASE_URL: postgres://lol_user:test_password@localhost:5432/lol_analytics_test
          REDIS_URL: redis://localhost:6379

      - name: Generate coverage report
        run: |
          go tool cover -html=coverage.out -o coverage.html
          go tool cover -func=coverage.out

      - name: Upload Go test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: go-test-results
          path: |
            coverage.out
            coverage.html

  # Job 3: Python Analytics Tests
  python-tests:
    name: Python Analytics Tests
    runs-on: ubuntu-latest
    needs: setup
    if: contains(needs.setup.outputs.test-type, 'all') || contains(needs.setup.outputs.test-type, 'unit')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ needs.setup.outputs.cache-key }}-python
          restore-keys: |
            python-${{ runner.os }}-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-mock pytest-xdist

      - name: Run Python tests
        run: |
          python -m pytest tests/unit/python/ -v --cov=. --cov-report=html --cov-report=xml --cov-report=term

      - name: Upload Python test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: python-test-results
          path: |
            htmlcov/
            coverage.xml

  # Job 4: React Frontend Tests
  react-tests:
    name: React Frontend Tests
    runs-on: ubuntu-latest
    needs: setup
    if: contains(needs.setup.outputs.test-type, 'all') || contains(needs.setup.outputs.test-type, 'unit')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Node.js dependencies
        uses: actions/cache@v3
        with:
          path: web/node_modules
          key: ${{ needs.setup.outputs.cache-key }}-node
          restore-keys: |
            node-${{ runner.os }}-

      - name: Install frontend dependencies
        working-directory: ./web
        run: npm ci

      - name: Run TypeScript type checking
        working-directory: ./web
        run: npm run type-check

      - name: Run ESLint
        working-directory: ./web
        run: npm run lint

      - name: Run React unit tests
        working-directory: ./web
        run: npm test -- --coverage --watchAll=false --ci

      - name: Upload React test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: react-test-results
          path: |
            web/coverage/

  # Job 5: End-to-End Tests
  e2e-tests:
    name: End-to-End Tests (Playwright)
    runs-on: ubuntu-latest
    needs: [setup, go-tests]
    if: contains(needs.setup.outputs.test-type, 'all') || contains(needs.setup.outputs.test-type, 'e2e')

    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: lol_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: lol_analytics_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        working-directory: ./web
        run: npm ci

      - name: Build frontend
        working-directory: ./web
        run: npm run build

      - name: Setup test database
        run: |
          PGPASSWORD=test_password psql -h localhost -U lol_user -d lol_analytics_test -f migrations/001_initial_schema.sql
        env:
          PGPASSWORD: test_password

      - name: Start backend server
        run: |
          go build -o analytics-server analytics_server_standalone.go
          ./analytics-server &
          sleep 5
        env:
          PORT: 8001
          DATABASE_URL: postgres://lol_user:test_password@localhost:5432/lol_analytics_test

      - name: Install Playwright
        working-directory: ./tests/e2e
        run: |
          npm ci
          npx playwright install --with-deps

      - name: Run Playwright tests
        working-directory: ./tests/e2e
        run: npx playwright test
        env:
          TEST_BASE_URL: http://localhost:5173
          TEST_API_URL: http://localhost:8001

      - name: Upload Playwright report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: tests/e2e/playwright-report/

  # Job 6: Performance Tests
  performance-tests:
    name: Performance Tests (k6)
    runs-on: ubuntu-latest
    needs: [setup, go-tests]
    if: contains(needs.setup.outputs.test-type, 'all') || contains(needs.setup.outputs.test-type, 'performance')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Start backend server
        run: |
          go build -o analytics-server analytics_server_standalone.go
          ./analytics-server &
          sleep 5
        env:
          PORT: 8001

      - name: Run performance tests
        run: |
          k6 run tests/performance/load_test.js --out json=performance-results.json
        env:
          BASE_URL: http://localhost:8001

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-results
          path: |
            performance-results.json
            performance-report.json

  # Job 7: Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: setup
    if: contains(needs.setup.outputs.test-type, 'all') || contains(needs.setup.outputs.test-type, 'security')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install security tools
        run: |
          go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest

      - name: Run Go security scan
        run: |
          gosec -fmt json -out gosec-report.json ./...

      - name: Run npm audit
        working-directory: ./web
        run: |
          npm ci
          npm audit --audit-level=moderate --json > npm-audit.json || true

      - name: Run dependency check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'lol-match-exporter'
          path: '.'
          format: 'JSON'

      - name: Upload security results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-results
          path: |
            gosec-report.json
            web/npm-audit.json
            reports/

  # Job 8: Docker Tests
  docker-tests:
    name: Docker & Deployment Tests
    runs-on: ubuntu-latest
    needs: setup
    if: contains(needs.setup.outputs.test-type, 'all')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker images
        run: |
          docker-compose -f docker-compose.analytics.yml build

      - name: Run Docker Compose tests
        run: |
          docker-compose -f docker-compose.analytics.yml up -d
          sleep 30
          
          # Test services are running
          curl -f http://localhost:8000/api/health || exit 1
          curl -f http://localhost:3000 || exit 1

      - name: Test database migrations
        run: |
          docker-compose -f docker-compose.analytics.yml exec -T postgres psql -U lol_user -d lol_analytics -c "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public';"

      - name: Cleanup Docker
        if: always()
        run: |
          docker-compose -f docker-compose.analytics.yml down -v

  # Job 9: Test Report Generation
  generate-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [go-tests, python-tests, react-tests, e2e-tests, performance-tests, security-tests]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: test-artifacts

      - name: Generate comprehensive test report
        run: |
          mkdir -p test-reports
          
          # Create comprehensive report
          cat > test-reports/comprehensive-report.md << 'EOF'
          # LoL Match Exporter - Comprehensive Test Report
          
          **Generated:** $(date)
          **Workflow:** ${{ github.workflow }}
          **Run:** ${{ github.run_number }}
          **Commit:** ${{ github.sha }}
          
          ## Test Results Summary
          
          | Test Suite | Status | Coverage |
          |------------|--------|----------|
          | Go Tests | ${{ needs.go-tests.result }} | TBD |
          | Python Tests | ${{ needs.python-tests.result }} | TBD |
          | React Tests | ${{ needs.react-tests.result }} | TBD |
          | E2E Tests | ${{ needs.e2e-tests.result }} | N/A |
          | Performance Tests | ${{ needs.performance-tests.result }} | N/A |
          | Security Tests | ${{ needs.security-tests.result }} | N/A |
          
          ## Artifacts
          
          - Go test coverage reports
          - Python test coverage reports
          - React test coverage reports
          - Playwright test reports
          - Performance test results
          - Security scan results
          
          ## Next Steps
          
          EOF
          
          # Add recommendations based on results
          if [[ "${{ needs.go-tests.result }}" == "failure" ]]; then
            echo "- 🔧 Fix failing Go tests" >> test-reports/comprehensive-report.md
          fi
          
          if [[ "${{ needs.e2e-tests.result }}" == "failure" ]]; then
            echo "- 🌐 Fix failing E2E tests" >> test-reports/comprehensive-report.md
          fi
          
          if [[ "${{ needs.security-tests.result }}" == "failure" ]]; then
            echo "- 🔒 Address security vulnerabilities" >> test-reports/comprehensive-report.md
          fi

      - name: Upload comprehensive report
        uses: actions/upload-artifact@v3
        with:
          name: comprehensive-test-report
          path: test-reports/

  # Job 10: Notifications
  notify-results:
    name: Notify Test Results
    runs-on: ubuntu-latest
    needs: [generate-report]
    if: always() && github.event_name != 'pull_request'

    steps:
      - name: Notify on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: 'LoL Match Exporter test suite failed! 🚨'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify on success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'LoL Match Exporter test suite passed! ✅'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}