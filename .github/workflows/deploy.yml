name: Herald.lol Deploy Pipeline

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    outputs:
      version: ${{ steps.meta.outputs.version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build and push backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:${{ steps.meta.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}
            COMMIT=${{ github.sha }}
            BUILD_TIME=${{ steps.meta.outputs.created }}
      
      - name: Build and push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ steps.meta.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}
            COMMIT=${{ github.sha }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging.herald.lol
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region us-west-2 --name herald-staging
      
      - name: Deploy to Kubernetes
        run: |
          kubectl set image deployment/herald-api herald-api=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:${{ needs.build-and-push.outputs.version }} -n herald-staging
          kubectl set image deployment/herald-frontend herald-frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ needs.build-and-push.outputs.version }} -n herald-staging
          kubectl rollout status deployment/herald-api -n herald-staging
          kubectl rollout status deployment/herald-frontend -n herald-staging
      
      - name: Run smoke tests
        run: |
          sleep 30
          curl -f https://staging.herald.lol/health || exit 1
          curl -f https://staging.herald.lol/api/health || exit 1
      
      - name: Notify Discord
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          status: ${{ job.status }}
          title: "Staging Deployment"
          description: |
            Deployed version: ${{ needs.build-and-push.outputs.version }}
            Environment: Staging
            URL: https://staging.herald.lol

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://herald.lol
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: us-east-1
      
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region us-east-1 --name herald-production
      
      - name: Create database backup
        run: |
          kubectl exec -n herald-production deployment/postgres -- pg_dump -U herald herald_prod > backup-$(date +%Y%m%d-%H%M%S).sql
          aws s3 cp backup-*.sql s3://herald-backups/pre-deploy/
      
      - name: Deploy to Kubernetes (Blue-Green)
        run: |
          # Deploy to green environment
          kubectl set image deployment/herald-api-green herald-api=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:${{ needs.build-and-push.outputs.version }} -n herald-production
          kubectl set image deployment/herald-frontend-green herald-frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ needs.build-and-push.outputs.version }} -n herald-production
          
          # Wait for green deployment
          kubectl rollout status deployment/herald-api-green -n herald-production
          kubectl rollout status deployment/herald-frontend-green -n herald-production
          
          # Run health checks on green
          GREEN_URL=$(kubectl get service herald-green -n herald-production -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          curl -f http://${GREEN_URL}/health || exit 1
          
          # Switch traffic to green
          kubectl patch service herald -n herald-production -p '{"spec":{"selector":{"version":"green"}}}'
          
          # Wait and verify
          sleep 30
          curl -f https://herald.lol/health || exit 1
          
          # Update blue with new version for next deployment
          kubectl set image deployment/herald-api-blue herald-api=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:${{ needs.build-and-push.outputs.version }} -n herald-production
          kubectl set image deployment/herald-frontend-blue herald-frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ needs.build-and-push.outputs.version }} -n herald-production
      
      - name: Run production smoke tests
        run: |
          npm install -g @herald/smoke-tests
          herald-smoke-tests --url https://herald.lol --comprehensive
      
      - name: Update monitoring
        run: |
          curl -X POST ${{ secrets.DATADOG_WEBHOOK }} \
            -H "Content-Type: application/json" \
            -d '{"version": "${{ needs.build-and-push.outputs.version }}", "environment": "production"}'
      
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          prerelease: false
      
      - name: Notify Discord
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          status: ${{ job.status }}
          title: "🚀 Production Deployment"
          description: |
            Deployed version: ${{ needs.build-and-push.outputs.version }}
            Environment: Production
            URL: https://herald.lol
            Performance targets: <5s analysis ✓

  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: failure() && needs.deploy-production.result == 'failure'
    needs: [deploy-production]
    environment:
      name: production-rollback
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: us-east-1
      
      - name: Rollback to blue environment
        run: |
          aws eks update-kubeconfig --region us-east-1 --name herald-production
          kubectl patch service herald -n herald-production -p '{"spec":{"selector":{"version":"blue"}}}'
          
          # Verify rollback
          sleep 10
          curl -f https://herald.lol/health || exit 1
      
      - name: Notify Discord - Rollback
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          status: warning
          title: "⚠️ Production Rollback"
          description: |
            Production deployment failed and was rolled back
            Current version: Previous stable
            URL: https://herald.lol