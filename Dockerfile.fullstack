# Multi-stage build: Frontend + Backend
FROM node:18-alpine AS frontend-builder

# Set working directory for frontend
WORKDIR /app/frontend

# Copy frontend package files
COPY web/package*.json ./

# Install frontend dependencies
RUN npm ci --only=production

# Copy frontend source
COPY web/ ./

# Build frontend
RUN npm run build

# Backend builder stage
FROM golang:1.23-alpine AS backend-builder

# Install build dependencies
RUN apk add --no-cache git ca-certificates tzdata

# Set working directory
WORKDIR /app

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy source files
COPY main.go ./
COPY cmd/real-server/ cmd/real-server/
COPY internal/ internal/

# Build the Go application
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o server main.go

# Production stage
FROM nginx:alpine AS production

# Install runtime dependencies
RUN apk --no-cache add ca-certificates curl

# Copy nginx configuration
COPY nginx/nginx.fullstack.conf /etc/nginx/nginx.conf

# Copy frontend build from frontend-builder stage
COPY --from=frontend-builder /app/frontend/dist /usr/share/nginx/html

# Copy backend binary from backend-builder stage
COPY --from=backend-builder /app/server /usr/local/bin/server

# Create startup script
RUN echo '#!/bin/sh\n# Start Go backend in background\n/usr/local/bin/server &\n# Start nginx in foreground\nexec nginx -g "daemon off;"' > /docker-entrypoint.sh && \
    chmod +x /docker-entrypoint.sh

# Expose ports
EXPOSE 80 8000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/api/health || exit 1

# Run both services
CMD ["/docker-entrypoint.sh"]
