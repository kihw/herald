.PHONY: help install dev build test lint clean validate benchmark docker production
.DEFAULT_GOAL := help

# Variables
PROJECT_NAME := lol-match-exporter
VERSION := $(shell git describe --tags --always --dirty 2>/dev/null || echo "dev")
BUILD_TIME := $(shell date -u +"%Y-%m-%dT%H:%M:%SZ" 2>/dev/null || date)
LDFLAGS := -ldflags="-s -w -X main.Version=$(VERSION) -X main.BuildTime=$(BUILD_TIME)"

# Colors
CYAN := \033[36m
GREEN := \033[32m
YELLOW := \033[33m
NC := \033[0m

help:
	@echo "$(CYAN)LoL Match Exporter - Build System$(NC)"
	@echo "=================================="
	@echo "Available commands:"
	@echo "  $(GREEN)install$(NC)     - Install all dependencies (Go + Node.js)"
	@echo "  $(GREEN)dev$(NC)         - Start development servers (backend + frontend)"
	@echo "  $(GREEN)build$(NC)       - Build production binaries and frontend"
	@echo "  $(GREEN)test$(NC)        - Run all tests (Go + TypeScript)"
	@echo "  $(GREEN)lint$(NC)        - Run linting (Go + TypeScript)"
	@echo "  $(GREEN)validate$(NC)    - Run system validation tests"
	@echo "  $(GREEN)benchmark$(NC)   - Run performance benchmarks"
	@echo "  $(GREEN)docker$(NC)      - Build and run with Docker"
	@echo "  $(GREEN)production$(NC)  - Build production deployment package"
	@echo "  $(GREEN)clean$(NC)       - Clean build artifacts and caches"

install:
	@echo "$(CYAN)Installing Go dependencies...$(NC)"
	go mod download && go mod tidy
	@echo "$(CYAN)Installing Node.js dependencies...$(NC)"
	cd web && npm install
	@echo "$(GREEN)✅ Dependencies installed$(NC)"

dev:
	@echo "$(CYAN)Starting development servers...$(NC)"
	@echo "Analytics Server: http://localhost:8001"
	@echo "Frontend: http://localhost:5173"
	@echo "Starting analytics server..."
	go run ./cmd/analytics-server &
	@echo "Starting frontend..."
	cd web && npm run dev

build: build-server build-frontend
	@echo "$(GREEN)✅ Build completed$(NC)"

build-server:
	@echo "$(CYAN)Building Go server binaries...$(NC)"
	@mkdir -p ./build
	go build $(LDFLAGS) -o ./build/analytics-server ./cmd/analytics-server
	go build $(LDFLAGS) -o ./build/dev-server ./cmd/dev-server

build-frontend:
	@echo "$(CYAN)Building React frontend...$(NC)"
	cd web && npm run build

test:
	@echo "$(CYAN)Running Go tests...$(NC)"
	go test -v -race ./...
	@echo "$(CYAN)Running frontend tests...$(NC)"
	cd web && npm run type-check
	@echo "$(GREEN)✅ Tests completed$(NC)"

lint:
	@echo "$(CYAN)Running Go linting...$(NC)"
	go vet ./...
	@echo "$(CYAN)Running frontend linting...$(NC)"
	cd web && npm run lint
	@echo "$(GREEN)✅ Linting completed$(NC)"

validate:
	@echo "$(CYAN)Running system validation...$(NC)"
	@if [ -f "./scripts/validate-system.sh" ]; then \
		chmod +x ./scripts/validate-system.sh && ./scripts/validate-system.sh; \
	else \
		powershell -ExecutionPolicy Bypass -File ./scripts/validate-system.ps1; \
	fi

benchmark:
	@echo "$(CYAN)Running performance benchmarks...$(NC)"
	@if [ -f "./scripts/performance-benchmark.sh" ]; then \
		chmod +x ./scripts/performance-benchmark.sh && ./scripts/performance-benchmark.sh; \
	else \
		echo "$(YELLOW)Benchmark script not found or not executable$(NC)"; \
	fi

docker:
	@echo "$(CYAN)Building and starting Docker services...$(NC)"
	docker-compose up --build -d
	@echo "$(GREEN)✅ Docker services started$(NC)"

production: clean build test
	@echo "$(CYAN)Creating production package...$(NC)"
	@mkdir -p ./dist
	cp ./build/* ./dist/
	cp -r ./web/dist ./dist/web-dist
	cp config.example.env ./dist/
	cd ./dist && tar -czf ../$(PROJECT_NAME)-$(VERSION).tar.gz .
	@echo "$(GREEN)✅ Production package: $(PROJECT_NAME)-$(VERSION).tar.gz$(NC)"

clean:
	@echo "$(CYAN)Cleaning build artifacts...$(NC)"
	rm -rf ./build/
	rm -rf ./dist/
	rm -rf web/dist/
	rm -rf web/node_modules/.vite/
	rm -rf jobs/
	rm -f ranked*.csv
	rm -f export_bundle.zip
	rm -f *.tar.gz
	@echo "$(GREEN)✅ Clean completed$(NC)"
	find . -type d -name "__pycache__" -exec rm -rf {} +
	find . -name "*.pyc" -delete