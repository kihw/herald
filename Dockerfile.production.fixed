# Multi-stage Docker build for Go backend
FROM golang:1.23-alpine AS builder

# Install build dependencies
RUN apk add --no-cache git ca-certificates tzdata

# Set working directory
WORKDIR /app

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy source code (only if directories exist)
COPY cmd/ cmd/
COPY internal/ internal/

# Copy other directories if they exist
COPY config/ config/ 2>/dev/null || mkdir -p config/

# Build the application - try analytics server first, fallback to server
RUN if [ -d "./cmd/analytics-server" ]; then \
    CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o server ./cmd/analytics-server; \
    elif [ -f "./analytics_server_standalone.go" ]; then \
    CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o server ./analytics_server_standalone.go; \
    else \
    CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o server ./cmd/server; \
    fi

# Production stage
FROM alpine:latest AS production

# Install runtime dependencies
RUN apk --no-cache add ca-certificates curl tzdata

# Create non-root user
RUN addgroup -g 1000 appgroup && \
    adduser -D -s /bin/sh -u 1000 -G appgroup appuser

# Set working directory
WORKDIR /app

# Copy binary from builder stage
COPY --from=builder /app/server .

# Create necessary directories
RUN mkdir -p config logs data && chown -R appuser:appgroup /app

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 8001

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8001/api/health || exit 1

# Run the application
CMD ["./server"]
