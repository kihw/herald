# Production Docker Compose Configuration
version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: lol_exporter_postgres
    environment:
      POSTGRES_DB: lol_match_db
      POSTGRES_USER: lol_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lol_user -d lol_match_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - lol_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: lol_exporter_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password_123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test:
        [
          "CMD",
          "redis-cli",
          "-a",
          "${REDIS_PASSWORD:-redis_password_123}",
          "ping",
        ]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    networks:
      - lol_network

  # Backend Application
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: production
    container_name: lol_exporter_backend
    environment:
      - GIN_MODE=release
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=lol_user
      - DB_PASSWORD=${POSTGRES_PASSWORD:-secure_password_123}
      - DB_NAME=lol_match_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_password_123}
      - RIOT_API_KEY=${RIOT_API_KEY}
      - JWT_SECRET=${JWT_SECRET:-your_jwt_secret_key_here}
      - APP_ENV=production
      - LOG_LEVEL=info
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - lol_network
    volumes:
      - app_logs:/app/logs

  # Frontend Application (Production Build)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: production
    container_name: lol_exporter_frontend
    environment:
      - NODE_ENV=production
      - VITE_API_BASE=http://backend:8001
    ports:
      - "3000:80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks:
      - lol_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: lol_exporter_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks:
      - lol_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  nginx_logs:
    driver: local

networks:
  lol_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
